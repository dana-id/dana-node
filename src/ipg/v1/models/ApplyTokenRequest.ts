/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { ValidationErrorContext } from '../../../runtime';
import type { ApplyTokenAuthorizationCodeRequest } from './ApplyTokenAuthorizationCodeRequest';
import {
    instanceOfApplyTokenAuthorizationCodeRequest,
    validateApplyTokenAuthorizationCodeRequest,
    ApplyTokenAuthorizationCodeRequestFromJSON,
    ApplyTokenAuthorizationCodeRequestFromJSONTyped,
    ApplyTokenAuthorizationCodeRequestToJSON,
} from './ApplyTokenAuthorizationCodeRequest';
import type { ApplyTokenRefreshTokenRequest } from './ApplyTokenRefreshTokenRequest';
import {
    instanceOfApplyTokenRefreshTokenRequest,
    validateApplyTokenRefreshTokenRequest,
    ApplyTokenRefreshTokenRequestFromJSON,
    ApplyTokenRefreshTokenRequestFromJSONTyped,
    ApplyTokenRefreshTokenRequestToJSON,
} from './ApplyTokenRefreshTokenRequest';

/**
 * @type ApplyTokenRequest
 * This schema is a oneOf type with the following possible variants:
 * - ApplyTokenAuthorizationCodeRequest
 * - ApplyTokenRefreshTokenRequest
 * @export
 */
export type ApplyTokenRequest = ApplyTokenAuthorizationCodeRequest | ApplyTokenRefreshTokenRequest;

export function ApplyTokenRequestFromJSON(json: any): ApplyTokenRequest {
    return ApplyTokenRequestFromJSONTyped(json, false);
}

export function ApplyTokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyTokenRequest {
    if (json == null) {
        return json;
    }
    if (instanceOfApplyTokenAuthorizationCodeRequest(json)) {
        return ApplyTokenAuthorizationCodeRequestFromJSONTyped(json, true);
    }
    if (instanceOfApplyTokenRefreshTokenRequest(json)) {
        return ApplyTokenRefreshTokenRequestFromJSONTyped(json, true);
    }

    return {} as any;
}

export function ApplyTokenRequestToJSON(json: any): any {
    return ApplyTokenRequestToJSONTyped(json, false);
}

export function ApplyTokenRequestToJSONTyped(value?: ApplyTokenRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (instanceOfApplyTokenAuthorizationCodeRequest(value)) {
        return ApplyTokenAuthorizationCodeRequestToJSON(value as ApplyTokenAuthorizationCodeRequest);
    }
    if (instanceOfApplyTokenRefreshTokenRequest(value)) {
        return ApplyTokenRefreshTokenRequestToJSON(value as ApplyTokenRefreshTokenRequest);
    }

    return {};
}

export function validateApplyTokenRequest(value?: ApplyTokenRequest): ValidationErrorContext[] {
    if (value == null) {
        return [];
    }

    if (instanceOfApplyTokenAuthorizationCodeRequest(value)) {
        return validateApplyTokenAuthorizationCodeRequest(value as ApplyTokenAuthorizationCodeRequest);
    }
    if (instanceOfApplyTokenRefreshTokenRequest(value)) {
        return validateApplyTokenRefreshTokenRequest(value as ApplyTokenRefreshTokenRequest);
    }

    return [];
}
