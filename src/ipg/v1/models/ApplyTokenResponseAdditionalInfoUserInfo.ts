/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * User information
 * @export
 * @interface ApplyTokenResponseAdditionalInfoUserInfo
 */
export interface ApplyTokenResponseAdditionalInfoUserInfo {
    /**
     * Static unique identifier for one user
     * @type {string}
     * @memberof ApplyTokenResponseAdditionalInfoUserInfo
     */
    publicUserId?: string;
}

/**
 * Check if a given object implements the ApplyTokenResponseAdditionalInfoUserInfo interface.
 */
export function instanceOfApplyTokenResponseAdditionalInfoUserInfo(value: object): value is ApplyTokenResponseAdditionalInfoUserInfo {
    return true;
}

export function ApplyTokenResponseAdditionalInfoUserInfoFromJSON(json: any): ApplyTokenResponseAdditionalInfoUserInfo {
    return ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped(json, false);
}

export function ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyTokenResponseAdditionalInfoUserInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'publicUserId': json['publicUserId'] == null ? undefined : json['publicUserId'],
    };
}

export function ApplyTokenResponseAdditionalInfoUserInfoToJSON(json: any): ApplyTokenResponseAdditionalInfoUserInfo {
    return ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped(json, false);
}

export function ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped(value?: ApplyTokenResponseAdditionalInfoUserInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'publicUserId': value['publicUserId'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    publicUserId: {
        maxLength: 64,
    },
}

export function validateApplyTokenResponseAdditionalInfoUserInfo(value: ApplyTokenResponseAdditionalInfoUserInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('publicUserId', value.publicUserId, propertyValidationAttributesMap['publicUserId']));

    return validationErrorContexts;
}
