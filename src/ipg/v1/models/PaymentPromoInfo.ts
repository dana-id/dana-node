/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * Information about the payment promotion that was applied
 * @export
 * @interface PaymentPromoInfo
 */
export interface PaymentPromoInfo {
    /**
     * Promotion identifier
     * @type {string}
     * @memberof PaymentPromoInfo
     */
    promoId: string;
    /**
     * Promotion name
     * @type {string}
     * @memberof PaymentPromoInfo
     */
    promoName: string;
    /**
     * Type of promotion
     * @type {string}
     * @memberof PaymentPromoInfo
     */
    promoType: PaymentPromoInfoPromoTypeEnum;
    /**
     * Savings amount from this promotion. Contains value (amount including cents) and currency (code based on ISO)
     * @type {Money}
     * @memberof PaymentPromoInfo
     */
    savingsAmount: Money;
}


/**
 * @export
 */
export const PaymentPromoInfoPromoTypeEnum = {
    CashBack: 'CASH_BACK',
    Discount: 'DISCOUNT',
    Voucher: 'VOUCHER',
    Point: 'POINT'
} as const;
export type PaymentPromoInfoPromoTypeEnum = typeof PaymentPromoInfoPromoTypeEnum[keyof typeof PaymentPromoInfoPromoTypeEnum];


/**
 * Check if a given object implements the PaymentPromoInfo interface.
 */
export function instanceOfPaymentPromoInfo(value: object): value is PaymentPromoInfo {
    if (!('promoId' in value) || value['promoId'] === undefined) return false;
    if (!('promoName' in value) || value['promoName'] === undefined) return false;
    if (!('promoType' in value) || value['promoType'] === undefined) return false;
    if (!('savingsAmount' in value) || value['savingsAmount'] === undefined) return false;
    return true;
}

export function PaymentPromoInfoFromJSON(json: any): PaymentPromoInfo {
    return PaymentPromoInfoFromJSONTyped(json, false);
}

export function PaymentPromoInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentPromoInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'promoId': json['promoId'],
        'promoName': json['promoName'],
        'promoType': json['promoType'],
        'savingsAmount': MoneyFromJSON(json['savingsAmount']),
    };
}

export function PaymentPromoInfoToJSON(json: any): PaymentPromoInfo {
    return PaymentPromoInfoToJSONTyped(json, false);
}

export function PaymentPromoInfoToJSONTyped(value?: PaymentPromoInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'promoId': value['promoId'],
        'promoName': value['promoName'],
        'promoType': value['promoType'],
        'savingsAmount': MoneyToJSON(value['savingsAmount']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    promoId: {
        maxLength: 128,
    },
    promoName: {
        maxLength: 128,
    },
}

export function validatePaymentPromoInfo(value: PaymentPromoInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoId', value.promoId, propertyValidationAttributesMap['promoId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoName', value.promoName, propertyValidationAttributesMap['promoName']));

    validationErrorContexts.push(...validateMoney(value.savingsAmount));

    return validationErrorContexts;
}
