/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Schema that documents the fields that can be included in the seamlessData JSON object (which is sent as a URL-encoded string)
 * @export
 * @interface SeamlessData
 */
export interface SeamlessData {
    /**
     * External user identifier
     * @type {string}
     * @memberof SeamlessData
     */
    externalUid?: string;
    /**
     * User mobile number
     * @type {string}
     * @memberof SeamlessData
     */
    mobile?: string;
    /**
     * Alternative field name for mobile number
     * @type {string}
     * @memberof SeamlessData
     */
    mobileNumber?: string;
    /**
     * Request timestamp
     * @type {Date}
     * @memberof SeamlessData
     */
    reqTime?: Date;
    /**
     * Verification timestamp
     * @type {string}
     * @memberof SeamlessData
     */
    verifiedTime?: string;
    /**
     * Request message ID
     * @type {string}
     * @memberof SeamlessData
     */
    reqMsgId?: string;
    /**
     * Whether to skip consultation registration
     * @type {boolean}
     * @memberof SeamlessData
     */
    skipConsultRegister?: boolean;
    /**
     * Business scenario
     * @type {string}
     * @memberof SeamlessData
     */
    bizScenario?: string;
}

/**
 * Check if a given object implements the SeamlessData interface.
 */
export function instanceOfSeamlessData(value: object): value is SeamlessData {
    return true;
}

export function SeamlessDataFromJSON(json: any): SeamlessData {
    return SeamlessDataFromJSONTyped(json, false);
}

export function SeamlessDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeamlessData {
    if (json == null) {
        return json;
    }
    return {
        
        'externalUid': json['externalUid'] == null ? undefined : json['externalUid'],
        'mobile': json['mobile'] == null ? undefined : json['mobile'],
        'mobileNumber': json['mobileNumber'] == null ? undefined : json['mobileNumber'],
        'reqTime': json['reqTime'] == null ? undefined : (new Date(json['reqTime'])),
        'verifiedTime': json['verifiedTime'] == null ? undefined : json['verifiedTime'],
        'reqMsgId': json['reqMsgId'] == null ? undefined : json['reqMsgId'],
        'skipConsultRegister': json['skipConsultRegister'] == null ? undefined : json['skipConsultRegister'],
        'bizScenario': json['bizScenario'] == null ? undefined : json['bizScenario'],
    };
}

export function SeamlessDataToJSON(json: any): SeamlessData {
    return SeamlessDataToJSONTyped(json, false);
}

export function SeamlessDataToJSONTyped(value?: SeamlessData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'externalUid': value['externalUid'],
        'mobile': value['mobile'],
        'mobileNumber': value['mobileNumber'],
        'reqTime': value['reqTime'] == null ? undefined : ((value['reqTime']).toISOString()),
        'verifiedTime': value['verifiedTime'],
        'reqMsgId': value['reqMsgId'],
        'skipConsultRegister': value['skipConsultRegister'],
        'bizScenario': value['bizScenario'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateSeamlessData(value: SeamlessData): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
