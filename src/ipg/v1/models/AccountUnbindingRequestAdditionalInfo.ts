/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface AccountUnbindingRequestAdditionalInfo
 */
export interface AccountUnbindingRequestAdditionalInfo {
    /**
     * Contains customer token, which has been obtained from binding process
     * @type {string}
     * @memberof AccountUnbindingRequestAdditionalInfo
     */
    accessToken: string;
}

/**
 * Check if a given object implements the AccountUnbindingRequestAdditionalInfo interface.
 */
export function instanceOfAccountUnbindingRequestAdditionalInfo(value: object): value is AccountUnbindingRequestAdditionalInfo {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    return true;
}

export function AccountUnbindingRequestAdditionalInfoFromJSON(json: any): AccountUnbindingRequestAdditionalInfo {
    return AccountUnbindingRequestAdditionalInfoFromJSONTyped(json, false);
}

export function AccountUnbindingRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountUnbindingRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['accessToken'],
    };
}

export function AccountUnbindingRequestAdditionalInfoToJSON(json: any): AccountUnbindingRequestAdditionalInfo {
    return AccountUnbindingRequestAdditionalInfoToJSONTyped(json, false);
}

export function AccountUnbindingRequestAdditionalInfoToJSONTyped(value?: AccountUnbindingRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    accessToken: {
        maxLength: 512,
    },
}

export function validateAccountUnbindingRequestAdditionalInfo(value: AccountUnbindingRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));

    return validationErrorContexts;
}
