/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Response object for OAuth 2.0 URL generation
 * @export
 * @interface GetOAuthUrlResponse
 */
export interface GetOAuthUrlResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof GetOAuthUrlResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof GetOAuthUrlResponse
     */
    responseMessage: string;
    /**
     * Random string for CSRF protection purposes
     * @type {string}
     * @memberof GetOAuthUrlResponse
     */
    state: string;
    /**
     * An authorization code which the caller can use to obtain an access token
     * @type {string}
     * @memberof GetOAuthUrlResponse
     */
    authCode: string;
}

/**
 * Check if a given object implements the GetOAuthUrlResponse interface.
 */
export function instanceOfGetOAuthUrlResponse(value: object): value is GetOAuthUrlResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('authCode' in value) || value['authCode'] === undefined) return false;
    return true;
}

export function GetOAuthUrlResponseFromJSON(json: any): GetOAuthUrlResponse {
    return GetOAuthUrlResponseFromJSONTyped(json, false);
}

export function GetOAuthUrlResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetOAuthUrlResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'state': json['state'],
        'authCode': json['authCode'],
    };
}

export function GetOAuthUrlResponseToJSON(json: any): GetOAuthUrlResponse {
    return GetOAuthUrlResponseToJSONTyped(json, false);
}

export function GetOAuthUrlResponseToJSONTyped(value?: GetOAuthUrlResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'state': value['state'],
        'authCode': value['authCode'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    state: {
        maxLength: 32,
    },
    authCode: {
        maxLength: 256,
    },
}

export function validateGetOAuthUrlResponse(value: GetOAuthUrlResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('state', value.state, propertyValidationAttributesMap['state']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('authCode', value.authCode, propertyValidationAttributesMap['authCode']));

    return validationErrorContexts;
}
