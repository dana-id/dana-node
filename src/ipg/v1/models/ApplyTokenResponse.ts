/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { ApplyTokenResponseAdditionalInfo } from './ApplyTokenResponseAdditionalInfo';
import {
    validateApplyTokenResponseAdditionalInfo,
    ApplyTokenResponseAdditionalInfoFromJSON,
    ApplyTokenResponseAdditionalInfoFromJSONTyped,
    ApplyTokenResponseAdditionalInfoToJSON,
    ApplyTokenResponseAdditionalInfoToJSONTyped,
} from './ApplyTokenResponseAdditionalInfo';

/**
 * 
 * @export
 * @interface ApplyTokenResponse
 */
export interface ApplyTokenResponse {
    /**
     * Response code. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    responseCode: string;
    /**
     * Response message. Refer to https://dashboard.dana.id/api-docs/read/110#HTML-ApplyToken-ResponseCodeandMessage
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    responseMessage: string;
    /**
     * Token type. Present if successfully processed
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    tokenType?: string;
    /**
     * This token is called Customer Token that will be used as a parameter on header in other API “Authorization-Customer”. Present if successfully processed
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    accessToken: string;
    /**
     * Expiry time for access token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    accessTokenExpiryTime?: string;
    /**
     * This token is used for refresh session if existing token has been expired. Present if successfully processed
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    refreshToken?: string;
    /**
     * Expiry time for refresh token was given to user, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time). Present if successfully processed
     * @type {string}
     * @memberof ApplyTokenResponse
     */
    refreshTokenExpiryTime?: string;
    /**
     * Additional information
     * @type {ApplyTokenResponseAdditionalInfo}
     * @memberof ApplyTokenResponse
     */
    additionalInfo?: ApplyTokenResponseAdditionalInfo;
}

/**
 * Check if a given object implements the ApplyTokenResponse interface.
 */
export function instanceOfApplyTokenResponse(value: object): value is ApplyTokenResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    return true;
}

export function ApplyTokenResponseFromJSON(json: any): ApplyTokenResponse {
    return ApplyTokenResponseFromJSONTyped(json, false);
}

export function ApplyTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyTokenResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'accessToken': json['accessToken'],
        'accessTokenExpiryTime': json['accessTokenExpiryTime'] == null ? undefined : json['accessTokenExpiryTime'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'refreshTokenExpiryTime': json['refreshTokenExpiryTime'] == null ? undefined : json['refreshTokenExpiryTime'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : ApplyTokenResponseAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function ApplyTokenResponseToJSON(json: any): ApplyTokenResponse {
    return ApplyTokenResponseToJSONTyped(json, false);
}

export function ApplyTokenResponseToJSONTyped(value?: ApplyTokenResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'tokenType': value['tokenType'],
        'accessToken': value['accessToken'],
        'accessTokenExpiryTime': value['accessTokenExpiryTime'],
        'refreshToken': value['refreshToken'],
        'refreshTokenExpiryTime': value['refreshTokenExpiryTime'],
        'additionalInfo': ApplyTokenResponseAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    tokenType: {
        maxLength: 7,
    },
    accessToken: {
        maxLength: 512,
    },
    accessTokenExpiryTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    refreshToken: {
        maxLength: 512,
    },
    refreshTokenExpiryTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
}

export function validateApplyTokenResponse(value: ApplyTokenResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('tokenType', value.tokenType, propertyValidationAttributesMap['tokenType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessTokenExpiryTime', value.accessTokenExpiryTime, propertyValidationAttributesMap['accessTokenExpiryTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refreshToken', value.refreshToken, propertyValidationAttributesMap['refreshToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refreshTokenExpiryTime', value.refreshTokenExpiryTime, propertyValidationAttributesMap['refreshTokenExpiryTime']));

    validationErrorContexts.push(...validateApplyTokenResponseAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
