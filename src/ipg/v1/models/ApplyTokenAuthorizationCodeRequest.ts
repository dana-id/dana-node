/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface ApplyTokenAuthorizationCodeRequest
 */
export interface ApplyTokenAuthorizationCodeRequest {
    /**
     * Additional information
     * @type {{ [key: string]: any; }}
     * @memberof ApplyTokenAuthorizationCodeRequest
     */
    additionalInfo?: { [key: string]: any; };
}

/**
 * Check if a given object implements the ApplyTokenAuthorizationCodeRequest interface.
 */
export function instanceOfApplyTokenAuthorizationCodeRequest(value: object): value is ApplyTokenAuthorizationCodeRequest {
    return true;
}

export function ApplyTokenAuthorizationCodeRequestFromJSON(json: any): ApplyTokenAuthorizationCodeRequest {
    return ApplyTokenAuthorizationCodeRequestFromJSONTyped(json, false);
}

export function ApplyTokenAuthorizationCodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyTokenAuthorizationCodeRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function ApplyTokenAuthorizationCodeRequestToJSON(json: any): ApplyTokenAuthorizationCodeRequest {
    return ApplyTokenAuthorizationCodeRequestToJSONTyped(json, false);
}

export function ApplyTokenAuthorizationCodeRequestToJSONTyped(value?: ApplyTokenAuthorizationCodeRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateApplyTokenAuthorizationCodeRequest(value: ApplyTokenAuthorizationCodeRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
