/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface TimeDetail
 */
export interface TimeDetail {
    /**
     * Time of created order, format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {string}
     * @memberof TimeDetail
     */
    createdTime: string;
    /**
     * Time of expiry order, format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {string}
     * @memberof TimeDetail
     */
    expiryTime: string;
    /**
     * Array of paid order times in format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {Array<string>}
     * @memberof TimeDetail
     */
    paidTimes?: Array<string>;
    /**
     * Array of confirmed order times in format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {Array<string>}
     * @memberof TimeDetail
     */
    confirmedTimes?: Array<string>;
    /**
     * Time of cancelled order in format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {string}
     * @memberof TimeDetail
     */
    cancelledTime?: string;
}

/**
 * Check if a given object implements the TimeDetail interface.
 */
export function instanceOfTimeDetail(value: object): value is TimeDetail {
    if (!('createdTime' in value) || value['createdTime'] === undefined) return false;
    if (!('expiryTime' in value) || value['expiryTime'] === undefined) return false;
    return true;
}

export function TimeDetailFromJSON(json: any): TimeDetail {
    return TimeDetailFromJSONTyped(json, false);
}

export function TimeDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimeDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'createdTime': json['createdTime'],
        'expiryTime': json['expiryTime'],
        'paidTimes': json['paidTimes'] == null ? undefined : json['paidTimes'],
        'confirmedTimes': json['confirmedTimes'] == null ? undefined : json['confirmedTimes'],
        'cancelledTime': json['cancelledTime'] == null ? undefined : json['cancelledTime'],
    };
}

export function TimeDetailToJSON(json: any): TimeDetail {
    return TimeDetailToJSONTyped(json, false);
}

export function TimeDetailToJSONTyped(value?: TimeDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdTime': value['createdTime'],
        'expiryTime': value['expiryTime'],
        'paidTimes': value['paidTimes'],
        'confirmedTimes': value['confirmedTimes'],
        'cancelledTime': value['cancelledTime'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    createdTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    expiryTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    cancelledTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
}

export function validateTimeDetail(value: TimeDetail): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('createdTime', value.createdTime, propertyValidationAttributesMap['createdTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('expiryTime', value.expiryTime, propertyValidationAttributesMap['expiryTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cancelledTime', value.cancelledTime, propertyValidationAttributesMap['cancelledTime']));

    return validationErrorContexts;
}
