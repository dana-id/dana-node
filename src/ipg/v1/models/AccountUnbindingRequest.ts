/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { AccountUnbindingRequestAdditionalInfo } from './AccountUnbindingRequestAdditionalInfo';
import {
    validateAccountUnbindingRequestAdditionalInfo,
    AccountUnbindingRequestAdditionalInfoFromJSON,
    AccountUnbindingRequestAdditionalInfoFromJSONTyped,
    AccountUnbindingRequestAdditionalInfoToJSON,
    AccountUnbindingRequestAdditionalInfoToJSONTyped,
} from './AccountUnbindingRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface AccountUnbindingRequest
 */
export interface AccountUnbindingRequest {
    /**
     * Merchant identifier that is unique per each merchant
     * @type {string}
     * @memberof AccountUnbindingRequest
     */
    merchantId: string;
    /**
     * Information of sub merchant identifier
     * @type {string}
     * @memberof AccountUnbindingRequest
     */
    subMerchantId?: string;
    /**
     * Unique transaction identifier on partner system which assigned to each transaction
     * @type {string}
     * @memberof AccountUnbindingRequest
     */
    partnerReferenceNo?: string;
    /**
     * Information of link identifier
     * @type {string}
     * @memberof AccountUnbindingRequest
     */
    linkId?: string;
    /**
     * Information of token identifier
     * @type {string}
     * @memberof AccountUnbindingRequest
     */
    tokenId?: string;
    /**
     * 
     * @type {AccountUnbindingRequestAdditionalInfo}
     * @memberof AccountUnbindingRequest
     */
    additionalInfo?: AccountUnbindingRequestAdditionalInfo;
}

/**
 * Check if a given object implements the AccountUnbindingRequest interface.
 */
export function instanceOfAccountUnbindingRequest(value: object): value is AccountUnbindingRequest {
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    return true;
}

export function AccountUnbindingRequestFromJSON(json: any): AccountUnbindingRequest {
    return AccountUnbindingRequestFromJSONTyped(json, false);
}

export function AccountUnbindingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountUnbindingRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'linkId': json['linkId'] == null ? undefined : json['linkId'],
        'tokenId': json['tokenId'] == null ? undefined : json['tokenId'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : AccountUnbindingRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function AccountUnbindingRequestToJSON(json: any): AccountUnbindingRequest {
    return AccountUnbindingRequestToJSONTyped(json, false);
}

export function AccountUnbindingRequestToJSONTyped(value?: AccountUnbindingRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'linkId': value['linkId'],
        'tokenId': value['tokenId'],
        'additionalInfo': AccountUnbindingRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 32,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    linkId: {
        maxLength: 24,
    },
    tokenId: {
        maxLength: 128,
    },
}

export function validateAccountUnbindingRequest(value: AccountUnbindingRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('linkId', value.linkId, propertyValidationAttributesMap['linkId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('tokenId', value.tokenId, propertyValidationAttributesMap['tokenId']));

    validationErrorContexts.push(...validateAccountUnbindingRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
