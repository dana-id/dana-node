/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { QueryPaymentResponseAdditionalInfo } from './QueryPaymentResponseAdditionalInfo';
import {
    validateQueryPaymentResponseAdditionalInfo,
    QueryPaymentResponseAdditionalInfoFromJSON,
    QueryPaymentResponseAdditionalInfoFromJSONTyped,
    QueryPaymentResponseAdditionalInfoToJSON,
    QueryPaymentResponseAdditionalInfoToJSONTyped,
} from './QueryPaymentResponseAdditionalInfo';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface QueryPaymentResponse
 */
export interface QueryPaymentResponse {
    /**
     * Refer to response code list:<br>
     * * 2005500 - Successful<br>
     * * 4005500 - Bad Request - Retry request with proper parameter<br>
     * * 4005501 - Invalid Field Format - Retry request with proper parameter<br>
     * * 4005502 - Invalid Mandatory Field - Retry request with proper parameter<br>
     * * 4015500 - Unauthorized. [reason] - Retry request with proper parameter<br>
     * * 4015501 - Invalid Token (B2B) - Retry request with proper parameter<br>
     * * 4045501 - Transaction Not Found - Try to create a new order<br>
     * * 4295500 - Too Many Requests - Retry request periodically<br>
     * * 5005500 - General Error - Retry request periodically<br>
     * * 5005501 - Internal Server Error - Retry request periodically<br>
     * 
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * 
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    responseMessage: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    originalPartnerReferenceNo?: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    originalReferenceNo?: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    originalExternalId?: string;
    /**
     * Transaction type indicator:<br>
     * - IPG Cashier Pay - SNAP: 54<br>
     * - QRIS CPM (Acquirer) - SNAP: 60<br>
     * - QRIS MPM (Acquirer) - SNAP: 47<br>
     * - Payment Gateway: 54<br>
     * 
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    serviceCode: string;
    /**
     * Status code:<br>
     * - 00 = Success. Order has been successfully in final state and paid<br>
     * - 01 = Initiated. Waiting for payment. Mark Payment as Pending<br>
     * - 02 = Paying. The order is in process, not in final state, payment is success. Mark Payment as Success<br>
     * - 05 = Cancelled. Order has been cancelled. Mark Payment as Failed<br>
     * - 07 = Not found. Order is not found. Mark Payment as Failed<br>
     * 
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    latestTransactionStatus: string;
    /**
     * Description of transaction status
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    transactionStatusDesc?: string;
    /**
     * Original response code
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    originalResponseCode?: string;
    /**
     * Original response message
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    originalResponseMessage?: string;
    /**
     * Session identifier
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    sessionId?: string;
    /**
     * Transaction request identifier
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    requestID?: string;
    /**
     * 
     * @type {Money}
     * @memberof QueryPaymentResponse
     */
    transAmount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof QueryPaymentResponse
     */
    amount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof QueryPaymentResponse
     */
    feeAmount?: Money;
    /**
     * Payment timestamp in format YYYY-MM-DDTHH:mm:ss+07:00 (Jakarta time)
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    paidTime?: string;
    /**
     * Brief description of transaction
     * @type {string}
     * @memberof QueryPaymentResponse
     */
    title?: string;
    /**
     * 
     * @type {QueryPaymentResponseAdditionalInfo}
     * @memberof QueryPaymentResponse
     */
    additionalInfo?: QueryPaymentResponseAdditionalInfo;
}

/**
 * Check if a given object implements the QueryPaymentResponse interface.
 */
export function instanceOfQueryPaymentResponse(value: object): value is QueryPaymentResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('serviceCode' in value) || value['serviceCode'] === undefined) return false;
    if (!('latestTransactionStatus' in value) || value['latestTransactionStatus'] === undefined) return false;
    return true;
}

export function QueryPaymentResponseFromJSON(json: any): QueryPaymentResponse {
    return QueryPaymentResponseFromJSONTyped(json, false);
}

export function QueryPaymentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryPaymentResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'] == null ? undefined : json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'serviceCode': json['serviceCode'],
        'latestTransactionStatus': json['latestTransactionStatus'],
        'transactionStatusDesc': json['transactionStatusDesc'] == null ? undefined : json['transactionStatusDesc'],
        'originalResponseCode': json['originalResponseCode'] == null ? undefined : json['originalResponseCode'],
        'originalResponseMessage': json['originalResponseMessage'] == null ? undefined : json['originalResponseMessage'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'requestID': json['requestID'] == null ? undefined : json['requestID'],
        'transAmount': json['transAmount'] == null ? undefined : MoneyFromJSON(json['transAmount']),
        'amount': json['amount'] == null ? undefined : MoneyFromJSON(json['amount']),
        'feeAmount': json['feeAmount'] == null ? undefined : MoneyFromJSON(json['feeAmount']),
        'paidTime': json['paidTime'] == null ? undefined : json['paidTime'],
        'title': json['title'] == null ? undefined : json['title'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : QueryPaymentResponseAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function QueryPaymentResponseToJSON(json: any): QueryPaymentResponse {
    return QueryPaymentResponseToJSONTyped(json, false);
}

export function QueryPaymentResponseToJSONTyped(value?: QueryPaymentResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'serviceCode': value['serviceCode'],
        'latestTransactionStatus': value['latestTransactionStatus'],
        'transactionStatusDesc': value['transactionStatusDesc'],
        'originalResponseCode': value['originalResponseCode'],
        'originalResponseMessage': value['originalResponseMessage'],
        'sessionId': value['sessionId'],
        'requestID': value['requestID'],
        'transAmount': MoneyToJSON(value['transAmount']),
        'amount': MoneyToJSON(value['amount']),
        'feeAmount': MoneyToJSON(value['feeAmount']),
        'paidTime': value['paidTime'],
        'title': value['title'],
        'additionalInfo': QueryPaymentResponseAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 32,
    },
    serviceCode: {
        maxLength: 2,
    },
    latestTransactionStatus: {
        maxLength: 2,
    },
    transactionStatusDesc: {
        maxLength: 50,
    },
    originalResponseCode: {
        maxLength: 7,
    },
    originalResponseMessage: {
        maxLength: 150,
    },
    sessionId: {
        maxLength: 25,
    },
    requestID: {
        maxLength: 25,
    },
    paidTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    title: {
        maxLength: 256,
    },
}

export function validateQueryPaymentResponse(value: QueryPaymentResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('serviceCode', value.serviceCode, propertyValidationAttributesMap['serviceCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('latestTransactionStatus', value.latestTransactionStatus, propertyValidationAttributesMap['latestTransactionStatus']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionStatusDesc', value.transactionStatusDesc, propertyValidationAttributesMap['transactionStatusDesc']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalResponseCode', value.originalResponseCode, propertyValidationAttributesMap['originalResponseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalResponseMessage', value.originalResponseMessage, propertyValidationAttributesMap['originalResponseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('requestID', value.requestID, propertyValidationAttributesMap['requestID']));

    validationErrorContexts.push(...validateMoney(value.transAmount));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateMoney(value.feeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('paidTime', value.paidTime, propertyValidationAttributesMap['paidTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('title', value.title, propertyValidationAttributesMap['title']));

    validationErrorContexts.push(...validateQueryPaymentResponseAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
