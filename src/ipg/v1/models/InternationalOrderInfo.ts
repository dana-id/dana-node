/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { PaymentPromoInfo } from './PaymentPromoInfo';
import {
    validatePaymentPromoInfo,
    PaymentPromoInfoFromJSON,
    PaymentPromoInfoFromJSONTyped,
    PaymentPromoInfoToJSON,
    PaymentPromoInfoToJSONTyped,
} from './PaymentPromoInfo';
import type { InternationalOrderInfoExchangeRate } from './InternationalOrderInfoExchangeRate';
import {
    validateInternationalOrderInfoExchangeRate,
    InternationalOrderInfoExchangeRateFromJSON,
    InternationalOrderInfoExchangeRateFromJSONTyped,
    InternationalOrderInfoExchangeRateToJSON,
    InternationalOrderInfoExchangeRateToJSONTyped,
} from './InternationalOrderInfoExchangeRate';
import type { RefundPromoInfo } from './RefundPromoInfo';
import {
    validateRefundPromoInfo,
    RefundPromoInfoFromJSON,
    RefundPromoInfoFromJSONTyped,
    RefundPromoInfoToJSON,
    RefundPromoInfoToJSONTyped,
} from './RefundPromoInfo';

/**
 * Additional information for international orders (non-IDR currency transactions)
 * @export
 * @interface InternationalOrderInfo
 */
export interface InternationalOrderInfo {
    /**
     * Origin order amount in the original currency. Contains value (amount including cents) and currency (code based on ISO)
     * @type {Money}
     * @memberof InternationalOrderInfo
     */
    originOrderAmount?: Money;
    /**
     * 
     * @type {InternationalOrderInfoExchangeRate}
     * @memberof InternationalOrderInfo
     */
    exchangeRate?: InternationalOrderInfoExchangeRate;
    /**
     * Total amount after conversion. Contains value (amount including cents) and currency (code based on ISO)
     * @type {Money}
     * @memberof InternationalOrderInfo
     */
    totalAmount?: Money;
    /**
     * Define the detail of payment promo information, contains promotion that handled and set by merchant
     * @type {PaymentPromoInfo}
     * @memberof InternationalOrderInfo
     */
    paymentPromoInfo?: PaymentPromoInfo;
    /**
     * Define the detail of refund promo information
     * @type {RefundPromoInfo}
     * @memberof InternationalOrderInfo
     */
    refundPromoInfo?: RefundPromoInfo;
}

/**
 * Check if a given object implements the InternationalOrderInfo interface.
 */
export function instanceOfInternationalOrderInfo(value: object): value is InternationalOrderInfo {
    return true;
}

export function InternationalOrderInfoFromJSON(json: any): InternationalOrderInfo {
    return InternationalOrderInfoFromJSONTyped(json, false);
}

export function InternationalOrderInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternationalOrderInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'originOrderAmount': json['originOrderAmount'] == null ? undefined : MoneyFromJSON(json['originOrderAmount']),
        'exchangeRate': json['exchangeRate'] == null ? undefined : InternationalOrderInfoExchangeRateFromJSON(json['exchangeRate']),
        'totalAmount': json['totalAmount'] == null ? undefined : MoneyFromJSON(json['totalAmount']),
        'paymentPromoInfo': json['paymentPromoInfo'] == null ? undefined : PaymentPromoInfoFromJSON(json['paymentPromoInfo']),
        'refundPromoInfo': json['refundPromoInfo'] == null ? undefined : RefundPromoInfoFromJSON(json['refundPromoInfo']),
    };
}

export function InternationalOrderInfoToJSON(json: any): InternationalOrderInfo {
    return InternationalOrderInfoToJSONTyped(json, false);
}

export function InternationalOrderInfoToJSONTyped(value?: InternationalOrderInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'originOrderAmount': MoneyToJSON(value['originOrderAmount']),
        'exchangeRate': InternationalOrderInfoExchangeRateToJSON(value['exchangeRate']),
        'totalAmount': MoneyToJSON(value['totalAmount']),
        'paymentPromoInfo': PaymentPromoInfoToJSON(value['paymentPromoInfo']),
        'refundPromoInfo': RefundPromoInfoToJSON(value['refundPromoInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateInternationalOrderInfo(value: InternationalOrderInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateMoney(value.originOrderAmount));

    validationErrorContexts.push(...validateInternationalOrderInfoExchangeRate(value.exchangeRate));

    validationErrorContexts.push(...validateMoney(value.totalAmount));

    validationErrorContexts.push(...validatePaymentPromoInfo(value.paymentPromoInfo));

    validationErrorContexts.push(...validateRefundPromoInfo(value.refundPromoInfo));

    return validationErrorContexts;
}
