/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface Goods
 */
export interface Goods {
    /**
     * Goods unit
     * @type {string}
     * @memberof Goods
     */
    unit?: string;
    /**
     * Goods category
     * @type {string}
     * @memberof Goods
     */
    category: string;
    /**
     * 
     * @type {Money}
     * @memberof Goods
     */
    price: Money;
    /**
     * Shipment identifier provided by merchant
     * @type {string}
     * @memberof Goods
     */
    merchantShippingId?: string;
    /**
     * Goods identifier provided by merchant
     * @type {string}
     * @memberof Goods
     */
    merchantGoodsId: string;
    /**
     * Goods description
     * @type {string}
     * @memberof Goods
     */
    description: string;
    /**
     * The URL of good's snapshot web page
     * @type {string}
     * @memberof Goods
     */
    snapshotUrl?: string;
    /**
     * Count of items
     * @type {string}
     * @memberof Goods
     */
    quantity: string;
    /**
     * Extend information
     * @type {string}
     * @memberof Goods
     */
    extendInfo?: string;
}

/**
 * Check if a given object implements the Goods interface.
 */
export function instanceOfGoods(value: object): value is Goods {
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('merchantGoodsId' in value) || value['merchantGoodsId'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    return true;
}

export function GoodsFromJSON(json: any): Goods {
    return GoodsFromJSONTyped(json, false);
}

export function GoodsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Goods {
    if (json == null) {
        return json;
    }
    return {
        
        'unit': json['unit'] == null ? undefined : json['unit'],
        'category': json['category'],
        'price': MoneyFromJSON(json['price']),
        'merchantShippingId': json['merchantShippingId'] == null ? undefined : json['merchantShippingId'],
        'merchantGoodsId': json['merchantGoodsId'],
        'description': json['description'],
        'snapshotUrl': json['snapshotUrl'] == null ? undefined : json['snapshotUrl'],
        'quantity': json['quantity'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}

export function GoodsToJSON(json: any): Goods {
    return GoodsToJSONTyped(json, false);
}

export function GoodsToJSONTyped(value?: Goods | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'unit': value['unit'],
        'category': value['category'],
        'price': MoneyToJSON(value['price']),
        'merchantShippingId': value['merchantShippingId'],
        'merchantGoodsId': value['merchantGoodsId'],
        'description': value['description'],
        'snapshotUrl': value['snapshotUrl'],
        'quantity': value['quantity'],
        'extendInfo': value['extendInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    unit: {
        maxLength: 64,
    },
    category: {
        maxLength: 64,
    },
    merchantShippingId: {
        maxLength: 64,
    },
    merchantGoodsId: {
        maxLength: 64,
    },
    description: {
        maxLength: 1024,
    },
    snapshotUrl: {
        maxLength: 512,
    },
    quantity: {
        maxLength: 16,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validateGoods(value: Goods): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('unit', value.unit, propertyValidationAttributesMap['unit']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('category', value.category, propertyValidationAttributesMap['category']));

    validationErrorContexts.push(...validateMoney(value.price));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantShippingId', value.merchantShippingId, propertyValidationAttributesMap['merchantShippingId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantGoodsId', value.merchantGoodsId, propertyValidationAttributesMap['merchantGoodsId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('description', value.description, propertyValidationAttributesMap['description']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('snapshotUrl', value.snapshotUrl, propertyValidationAttributesMap['snapshotUrl']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('quantity', value.quantity, propertyValidationAttributesMap['quantity']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
