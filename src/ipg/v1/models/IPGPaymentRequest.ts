/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { IPGPaymentRequestAdditionalInfo } from './IPGPaymentRequestAdditionalInfo';
import {
    validateIPGPaymentRequestAdditionalInfo,
    IPGPaymentRequestAdditionalInfoFromJSON,
    IPGPaymentRequestAdditionalInfoFromJSONTyped,
    IPGPaymentRequestAdditionalInfoToJSON,
    IPGPaymentRequestAdditionalInfoToJSONTyped,
} from './IPGPaymentRequestAdditionalInfo';
import type { UrlParam } from './UrlParam';
import {
    validateUrlParam,
    UrlParamFromJSON,
    UrlParamFromJSONTyped,
    UrlParamToJSON,
    UrlParamToJSONTyped,
} from './UrlParam';
import type { PayOptionDetail } from './PayOptionDetail';
import {
    validatePayOptionDetail,
    PayOptionDetailFromJSON,
    PayOptionDetailFromJSONTyped,
    PayOptionDetailToJSON,
    PayOptionDetailToJSONTyped,
} from './PayOptionDetail';

/**
 * 
 * @export
 * @interface IPGPaymentRequest
 */
export interface IPGPaymentRequest {
    /**
     * Unique transaction identifier on partner system which assigned to each transaction
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    partnerReferenceNo: string;
    /**
     * Merchant identifier that is unique per each merchant
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    merchantId: string;
    /**
     * 
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    subMerchantId?: string;
    /**
     * 
     * @type {Money}
     * @memberof IPGPaymentRequest
     */
    amount: Money;
    /**
     * Store identifier to indicate to which store this payment belongs to
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    externalStoreId?: string;
    /**
     * The time when the payment will be automatically expired, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    validUpTo?: string;
    /**
     * Used for getting more info regarding source of request of the user
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    pointOfInitiation?: string;
    /**
     * Payment method(s) that cannot be used for this payment
     * @type {string}
     * @memberof IPGPaymentRequest
     */
    disabledPayMethods?: string;
    /**
     * Payment option that will be used for this payment
     * @type {Array<PayOptionDetail>}
     * @memberof IPGPaymentRequest
     */
    payOptionDetails?: Array<PayOptionDetail>;
    /**
     * 
     * @type {IPGPaymentRequestAdditionalInfo}
     * @memberof IPGPaymentRequest
     */
    additionalInfo: IPGPaymentRequestAdditionalInfo;
    /**
     * Notify URL that DANA must send the payment notification to
     * @type {Array<UrlParam>}
     * @memberof IPGPaymentRequest
     */
    urlParams?: Array<UrlParam>;
}

/**
 * Check if a given object implements the IPGPaymentRequest interface.
 */
export function instanceOfIPGPaymentRequest(value: object): value is IPGPaymentRequest {
    if (!('partnerReferenceNo' in value) || value['partnerReferenceNo'] === undefined) return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function IPGPaymentRequestFromJSON(json: any): IPGPaymentRequest {
    return IPGPaymentRequestFromJSONTyped(json, false);
}

export function IPGPaymentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IPGPaymentRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'partnerReferenceNo': json['partnerReferenceNo'],
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'amount': MoneyFromJSON(json['amount']),
        'externalStoreId': json['externalStoreId'] == null ? undefined : json['externalStoreId'],
        'validUpTo': json['validUpTo'] == null ? undefined : json['validUpTo'],
        'pointOfInitiation': json['pointOfInitiation'] == null ? undefined : json['pointOfInitiation'],
        'disabledPayMethods': json['disabledPayMethods'] == null ? undefined : json['disabledPayMethods'],
        'payOptionDetails': json['payOptionDetails'] == null ? undefined : ((json['payOptionDetails'] as Array<any>).map(PayOptionDetailFromJSON)),
        'additionalInfo': IPGPaymentRequestAdditionalInfoFromJSON(json['additionalInfo']),
        'urlParams': json['urlParams'] == null ? undefined : ((json['urlParams'] as Array<any>).map(UrlParamFromJSON)),
    };
}

export function IPGPaymentRequestToJSON(json: any): IPGPaymentRequest {
    return IPGPaymentRequestToJSONTyped(json, false);
}

export function IPGPaymentRequestToJSONTyped(value?: IPGPaymentRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'partnerReferenceNo': value['partnerReferenceNo'],
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'amount': MoneyToJSON(value['amount']),
        'externalStoreId': value['externalStoreId'],
        'validUpTo': value['validUpTo'],
        'pointOfInitiation': value['pointOfInitiation'],
        'disabledPayMethods': value['disabledPayMethods'],
        'payOptionDetails': value['payOptionDetails'] == null ? undefined : ((value['payOptionDetails'] as Array<any>).map(PayOptionDetailToJSON)),
        'additionalInfo': IPGPaymentRequestAdditionalInfoToJSON(value['additionalInfo']),
        'urlParams': value['urlParams'] == null ? undefined : ((value['urlParams'] as Array<any>).map(UrlParamToJSON)),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 32,
    },
    externalStoreId: {
        maxLength: 64,
    },
    validUpTo: {
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    pointOfInitiation: {
        maxLength: 20,
    },
    disabledPayMethods: {
        maxLength: 64,
    },
}

export function validateIPGPaymentRequest(value: IPGPaymentRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalStoreId', value.externalStoreId, propertyValidationAttributesMap['externalStoreId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('validUpTo', value.validUpTo, propertyValidationAttributesMap['validUpTo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('pointOfInitiation', value.pointOfInitiation, propertyValidationAttributesMap['pointOfInitiation']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('disabledPayMethods', value.disabledPayMethods, propertyValidationAttributesMap['disabledPayMethods']));

    validationErrorContexts.push(...validateIPGPaymentRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
