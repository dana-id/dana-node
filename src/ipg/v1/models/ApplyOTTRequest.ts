/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { ApplyOTTRequestAdditionalInfo } from './ApplyOTTRequestAdditionalInfo';
import {
    validateApplyOTTRequestAdditionalInfo,
    ApplyOTTRequestAdditionalInfoFromJSON,
    ApplyOTTRequestAdditionalInfoFromJSONTyped,
    ApplyOTTRequestAdditionalInfoToJSON,
    ApplyOTTRequestAdditionalInfoToJSONTyped,
} from './ApplyOTTRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface ApplyOTTRequest
 */
export interface ApplyOTTRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplyOTTRequest
     */
    userResources: Array<ApplyOTTRequestUserResourcesEnum>;
    /**
     * 
     * @type {ApplyOTTRequestAdditionalInfo}
     * @memberof ApplyOTTRequest
     */
    additionalInfo: ApplyOTTRequestAdditionalInfo;
}


/**
 * @export
 */
export const ApplyOTTRequestUserResourcesEnum = {
    Ott: 'OTT'
} as const;
export type ApplyOTTRequestUserResourcesEnum = typeof ApplyOTTRequestUserResourcesEnum[keyof typeof ApplyOTTRequestUserResourcesEnum];


/**
 * Check if a given object implements the ApplyOTTRequest interface.
 */
export function instanceOfApplyOTTRequest(value: object): value is ApplyOTTRequest {
    if (!('userResources' in value) || value['userResources'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function ApplyOTTRequestFromJSON(json: any): ApplyOTTRequest {
    return ApplyOTTRequestFromJSONTyped(json, false);
}

export function ApplyOTTRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyOTTRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'userResources': json['userResources'],
        'additionalInfo': ApplyOTTRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function ApplyOTTRequestToJSON(json: any): ApplyOTTRequest {
    return ApplyOTTRequestToJSONTyped(json, false);
}

export function ApplyOTTRequestToJSONTyped(value?: ApplyOTTRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userResources': value['userResources'],
        'additionalInfo': ApplyOTTRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateApplyOTTRequest(value: ApplyOTTRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateApplyOTTRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
