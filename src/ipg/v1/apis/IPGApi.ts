/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import * as runtime from '../../../runtime';
import type {
  AccountUnbindingRequest,
  AccountUnbindingResponse,
  ApplyOTTRequest,
  ApplyOTTResponse,
  ApplyTokenRequest,
  ApplyTokenResponse,
  CancelOrderRequest,
  CancelOrderResponse,
  GetOAuthUrlResponse,
  IPGPaymentRequest,
  IPGPaymentResponse,
  QueryPaymentRequest,
  QueryPaymentResponse,
  RefundOrderRequest,
  RefundOrderResponse,
  SeamlessData,
} from '../models/index';
import {
    validateAccountUnbindingRequest,
    AccountUnbindingRequestFromJSON,
    AccountUnbindingRequestToJSON,
    validateAccountUnbindingResponse,
    AccountUnbindingResponseFromJSON,
    AccountUnbindingResponseToJSON,
    validateApplyOTTRequest,
    ApplyOTTRequestFromJSON,
    ApplyOTTRequestToJSON,
    validateApplyOTTResponse,
    ApplyOTTResponseFromJSON,
    ApplyOTTResponseToJSON,
    validateApplyTokenRequest,
    ApplyTokenRequestFromJSON,
    ApplyTokenRequestToJSON,
    validateApplyTokenResponse,
    ApplyTokenResponseFromJSON,
    ApplyTokenResponseToJSON,
    validateCancelOrderRequest,
    CancelOrderRequestFromJSON,
    CancelOrderRequestToJSON,
    validateCancelOrderResponse,
    CancelOrderResponseFromJSON,
    CancelOrderResponseToJSON,
    validateGetOAuthUrlResponse,
    GetOAuthUrlResponseFromJSON,
    GetOAuthUrlResponseToJSON,
    validateIPGPaymentRequest,
    IPGPaymentRequestFromJSON,
    IPGPaymentRequestToJSON,
    validateIPGPaymentResponse,
    IPGPaymentResponseFromJSON,
    IPGPaymentResponseToJSON,
    validateQueryPaymentRequest,
    QueryPaymentRequestFromJSON,
    QueryPaymentRequestToJSON,
    validateQueryPaymentResponse,
    QueryPaymentResponseFromJSON,
    QueryPaymentResponseToJSON,
    validateRefundOrderRequest,
    RefundOrderRequestFromJSON,
    RefundOrderRequestToJSON,
    validateRefundOrderResponse,
    RefundOrderResponseFromJSON,
    RefundOrderResponseToJSON,
    validateSeamlessData,
    SeamlessDataFromJSON,
    SeamlessDataToJSON,
} from '../models/index';

/**
 * 
 */
export class IPGApi extends runtime.BaseAPI {

    partnerId: string = "";
    privateKey: string = "";
    origin: string = "";
    env: string = "";

    constructor({ partnerId, privateKey, origin, env }: { partnerId?: string, privateKey?: string, origin?: string, env?: string }) {
        const basePath = runtime.getBasePathByEnv(env);

        const configuration = new runtime.Configuration({
            basePath: basePath,
        })

        super(configuration);

        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
    }

    /**
     * This API is used to reverses the account binding process by revoking the accessToken and refreshToken
     * Account unbinding process
     */
    async accountUnbinding(accountUnbindingRequest: AccountUnbindingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountUnbindingResponse> {
        if (accountUnbindingRequest == null) {
            throw new runtime.RequiredError(
                'accountUnbindingRequest',
                'Required parameter "accountUnbindingRequest" was null or undefined when calling accountUnbinding().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateAccountUnbindingRequest(accountUnbindingRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/registration-account-unbinding.htm`;

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountUnbindingRequestToJSON(accountUnbindingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUnbindingResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to get one time token that will be used as authorization parameter upon redirecting to DANA
     * Apply One Time Token
     */
    async applyOTT(applyOTTRequest: ApplyOTTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplyOTTResponse> {
        if (applyOTTRequest == null) {
            throw new runtime.RequiredError(
                'applyOTTRequest',
                'Required parameter "applyOTTRequest" was null or undefined when calling applyOTT().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateApplyOTTRequest(applyOTTRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/rest/v1.1/qr/apply-ott`;

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyOTTRequestToJSON(applyOTTRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplyOTTResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to finalized account binding process by exchanging the authCode into accessToken that can be used as user authorization
     * Account binding process to get user token
     */
    async applyToken(applyTokenRequest: ApplyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplyTokenResponse> {
        if (applyTokenRequest == null) {
            throw new runtime.RequiredError(
                'applyTokenRequest',
                'Required parameter "applyTokenRequest" was null or undefined when calling applyToken().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateApplyTokenRequest(applyTokenRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/access-token/b2b2c.htm`;

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyTokenRequestToJSON(applyTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplyTokenResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order API
     */
    async cancelOrder(cancelOrderRequest: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelOrderResponse> {
        if (cancelOrderRequest == null) {
            throw new runtime.RequiredError(
                'cancelOrderRequest',
                'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateCancelOrderRequest(cancelOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/debit/cancel.htm`;

        const requestBody: string = JSON.stringify(CancelOrderRequestToJSON(cancelOrderRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelOrderRequestToJSON(cancelOrderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelOrderResponseFromJSON(jsonValue)).value();
    }

    /**
     * TThis API is used to generate OAuth 2.0 redirect URL to DANA to initiate account binding process where the user will be able to register/login from DANA page
     * Get OAuth 2.0 URL for end user authentication
     */
    async getOAuthUrl(partnerId: string, timestamp: string, externalId: string, channelId: string, scopes: Array<string>, redirectUrl: string, state: string, merchantId?: string, subMerchantId?: string, seamlessData?: SeamlessData, lang?: string, allowRegistration?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOAuthUrlResponse> {
        if (partnerId == null) {
            throw new runtime.RequiredError(
                'partnerId',
                'Required parameter "partnerId" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (timestamp == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (externalId == null) {
            throw new runtime.RequiredError(
                'externalId',
                'Required parameter "externalId" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (channelId == null) {
            throw new runtime.RequiredError(
                'channelId',
                'Required parameter "channelId" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (scopes == null) {
            throw new runtime.RequiredError(
                'scopes',
                'Required parameter "scopes" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (redirectUrl == null) {
            throw new runtime.RequiredError(
                'redirectUrl',
                'Required parameter "redirectUrl" was null or undefined when calling getOAuthUrl().'
            );
        }

        if (state == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling getOAuthUrl().'
            );
        }

        const queryParameters: any = {};

        if (partnerId != null) {
            queryParameters['partnerId'] = partnerId;
        }

        if (timestamp != null) {
            queryParameters['timestamp'] = timestamp;
        }

        if (externalId != null) {
            queryParameters['externalId'] = externalId;
        }

        if (channelId != null) {
            queryParameters['channelId'] = channelId;
        }

        if (merchantId != null) {
            queryParameters['merchantId'] = merchantId;
        }

        if (subMerchantId != null) {
            queryParameters['subMerchantId'] = subMerchantId;
        }

        if (seamlessData != null) {
            queryParameters['seamlessData'] = seamlessData;
        }

        if (scopes != null) {
            queryParameters['scopes'] = scopes;
        }

        if (redirectUrl != null) {
            queryParameters['redirectUrl'] = redirectUrl;
        }

        if (state != null) {
            queryParameters['state'] = state;
        }

        if (lang != null) {
            queryParameters['lang'] = lang;
        }

        if (allowRegistration != null) {
            queryParameters['allowRegistration'] = allowRegistration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const endpointUrl: string = `/v1.0/get-auth-code`;

        const response = await this.request({
            path: endpointUrl,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOAuthUrlResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to initiate payment from merchant\'s platform to DANA
     * Process IPG payment
     */
    async ipgPayment(iPGPaymentRequest: IPGPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IPGPaymentResponse> {
        if (iPGPaymentRequest == null) {
            throw new runtime.RequiredError(
                'iPGPaymentRequest',
                'Required parameter "iPGPaymentRequest" was null or undefined when calling ipgPayment().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateIPGPaymentRequest(iPGPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/rest/redirection/v1.0/debit/payment-host-to-host`;

        const requestBody: string = JSON.stringify(IPGPaymentRequestToJSON(iPGPaymentRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IPGPaymentRequestToJSON(iPGPaymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IPGPaymentResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to inquiry payment status and information from merchant\'s platform to DANA
     * Query Payment API
     */
    async queryPayment(queryPaymentRequest: QueryPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryPaymentResponse> {
        if (queryPaymentRequest == null) {
            throw new runtime.RequiredError(
                'queryPaymentRequest',
                'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateQueryPaymentRequest(queryPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/rest/v1.1/debit/status`;

        const requestBody: string = JSON.stringify(QueryPaymentRequestToJSON(queryPaymentRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryPaymentRequestToJSON(queryPaymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryPaymentResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order API
     */
    async refundOrder(refundOrderRequest: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundOrderResponse> {
        if (refundOrderRequest == null) {
            throw new runtime.RequiredError(
                'refundOrderRequest',
                'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateRefundOrderRequest(refundOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/debit/refund.htm`;

        const requestBody: string = JSON.stringify(RefundOrderRequestToJSON(refundOrderRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);

        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundOrderRequestToJSON(refundOrderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundOrderResponseFromJSON(jsonValue)).value();
    }

}
