/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { BankAccountInquiryRequestAdditionalInfo } from './BankAccountInquiryRequestAdditionalInfo';
import {
    validateBankAccountInquiryRequestAdditionalInfo,
    BankAccountInquiryRequestAdditionalInfoFromJSON,
    BankAccountInquiryRequestAdditionalInfoFromJSONTyped,
    BankAccountInquiryRequestAdditionalInfoToJSON,
    BankAccountInquiryRequestAdditionalInfoToJSONTyped,
} from './BankAccountInquiryRequestAdditionalInfo';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface BankAccountInquiryRequest
 */
export interface BankAccountInquiryRequest {
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof BankAccountInquiryRequest
     */
    partnerReferenceNo?: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof BankAccountInquiryRequest
     */
    customerNumber: string;
    /**
     * Beneficiary account number
     * @type {string}
     * @memberof BankAccountInquiryRequest
     */
    beneficiaryAccountNumber: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof BankAccountInquiryRequest
     */
    amount: Money;
    /**
     * 
     * @type {BankAccountInquiryRequestAdditionalInfo}
     * @memberof BankAccountInquiryRequest
     */
    additionalInfo: BankAccountInquiryRequestAdditionalInfo;
}

/**
 * Check if a given object implements the BankAccountInquiryRequest interface.
 */
export function instanceOfBankAccountInquiryRequest(value: object): value is BankAccountInquiryRequest {
    if (!('customerNumber' in value) || value['customerNumber'] === undefined) return false;
    if (!('beneficiaryAccountNumber' in value) || value['beneficiaryAccountNumber'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function BankAccountInquiryRequestFromJSON(json: any): BankAccountInquiryRequest {
    return BankAccountInquiryRequestFromJSONTyped(json, false);
}

export function BankAccountInquiryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankAccountInquiryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'customerNumber': json['customerNumber'],
        'beneficiaryAccountNumber': json['beneficiaryAccountNumber'],
        'amount': MoneyFromJSON(json['amount']),
        'additionalInfo': BankAccountInquiryRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function BankAccountInquiryRequestToJSON(json: any): BankAccountInquiryRequest {
    return BankAccountInquiryRequestToJSONTyped(json, false);
}

export function BankAccountInquiryRequestToJSONTyped(value?: BankAccountInquiryRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'partnerReferenceNo': value['partnerReferenceNo'],
        'customerNumber': value['customerNumber'],
        'beneficiaryAccountNumber': value['beneficiaryAccountNumber'],
        'amount': MoneyToJSON(value['amount']),
        'additionalInfo': BankAccountInquiryRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    customerNumber: {
        maxLength: 32,
    },
    beneficiaryAccountNumber: {
        maxLength: 32,
    },
}

export function validateBankAccountInquiryRequest(value: BankAccountInquiryRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('beneficiaryAccountNumber', value.beneficiaryAccountNumber, propertyValidationAttributesMap['beneficiaryAccountNumber']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateBankAccountInquiryRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
