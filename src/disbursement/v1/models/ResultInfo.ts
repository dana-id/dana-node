/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface ResultInfo
 */
export interface ResultInfo {
    /**
     * Result status
     * @type {string}
     * @memberof ResultInfo
     */
    resultStatus: ResultInfoResultStatusEnum;
    /**
     * Result code ID
     * @type {string}
     * @memberof ResultInfo
     */
    resultCodeId: string;
    /**
     * Result code
     * @type {string}
     * @memberof ResultInfo
     */
    resultCode: string;
    /**
     * Result message
     * @type {string}
     * @memberof ResultInfo
     */
    resultMsg: string;
}


/**
 * @export
 */
export const ResultInfoResultStatusEnum = {
    S: 'S',
    F: 'F',
    U: 'U'
} as const;
export type ResultInfoResultStatusEnum = typeof ResultInfoResultStatusEnum[keyof typeof ResultInfoResultStatusEnum];


/**
 * Check if a given object implements the ResultInfo interface.
 */
export function instanceOfResultInfo(value: object): value is ResultInfo {
    if (!('resultStatus' in value) || value['resultStatus'] === undefined) return false;
    if (!('resultCodeId' in value) || value['resultCodeId'] === undefined) return false;
    if (!('resultCode' in value) || value['resultCode'] === undefined) return false;
    if (!('resultMsg' in value) || value['resultMsg'] === undefined) return false;
    return true;
}

export function ResultInfoFromJSON(json: any): ResultInfo {
    return ResultInfoFromJSONTyped(json, false);
}

export function ResultInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResultInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'resultStatus': json['resultStatus'],
        'resultCodeId': json['resultCodeId'],
        'resultCode': json['resultCode'],
        'resultMsg': json['resultMsg'],
    };
}

export function ResultInfoToJSON(json: any): ResultInfo {
    return ResultInfoToJSONTyped(json, false);
}

export function ResultInfoToJSONTyped(value?: ResultInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resultStatus': value['resultStatus'],
        'resultCodeId': value['resultCodeId'],
        'resultCode': value['resultCode'],
        'resultMsg': value['resultMsg'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    resultCodeId: {
        maxLength: 11,
    },
    resultCode: {
        maxLength: 50,
    },
    resultMsg: {
        maxLength: 255,
    },
}

export function validateResultInfo(value: ResultInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('resultCodeId', value.resultCodeId, propertyValidationAttributesMap['resultCodeId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('resultCode', value.resultCode, propertyValidationAttributesMap['resultCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('resultMsg', value.resultMsg, propertyValidationAttributesMap['resultMsg']));

    return validationErrorContexts;
}
