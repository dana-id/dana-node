/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface QueryMerchantResourceRequestRequestHead
 */
export interface QueryMerchantResourceRequestRequestHead {
    /**
     * API version
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    version: string;
    /**
     * API interface
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    _function: QueryMerchantResourceRequestRequestHeadFunctionEnum;
    /**
     * Client ID provided by DANA, used to identify partner and application system
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    clientId: string;
    /**
     * DateTime with timezone, which follows the ISO-8601 standard. Refer to RFC 3339 Section 5.6
     * @type {Date}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    reqTime: Date;
    /**
     * The sequence id of request - Each request will be assigned with a unique id (uuid)
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    reqMsgId: string;
    /**
     * Secret key of client - Assigned client secret during registration
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    clientSecret: string;
    /**
     * Reserved for future implementation
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestHead
     */
    reserve?: string;
}


/**
 * @export
 */
export const QueryMerchantResourceRequestRequestHeadFunctionEnum = {
    DanaMerchantQueryMerchantResource: 'dana.merchant.queryMerchantResource'
} as const;
export type QueryMerchantResourceRequestRequestHeadFunctionEnum = typeof QueryMerchantResourceRequestRequestHeadFunctionEnum[keyof typeof QueryMerchantResourceRequestRequestHeadFunctionEnum] | '';


/**
 * Check if a given object implements the QueryMerchantResourceRequestRequestHead interface.
 */
export function instanceOfQueryMerchantResourceRequestRequestHead(value: object): value is QueryMerchantResourceRequestRequestHead {
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('_function' in value) || value['_function'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('reqTime' in value) || value['reqTime'] === undefined) return false;
    if (!('reqMsgId' in value) || value['reqMsgId'] === undefined) return false;
    if (!('clientSecret' in value) || value['clientSecret'] === undefined) return false;
    return true;
}

export function QueryMerchantResourceRequestRequestHeadFromJSON(json: any): QueryMerchantResourceRequestRequestHead {
    return QueryMerchantResourceRequestRequestHeadFromJSONTyped(json, false);
}

export function QueryMerchantResourceRequestRequestHeadFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryMerchantResourceRequestRequestHead {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['version'],
        '_function': json['function'],
        'clientId': json['clientId'],
        'reqTime': (new Date(json['reqTime'])),
        'reqMsgId': json['reqMsgId'],
        'clientSecret': json['clientSecret'],
        'reserve': json['reserve'] == null ? undefined : json['reserve'],
    };
}

export function QueryMerchantResourceRequestRequestHeadToJSON(json: any): QueryMerchantResourceRequestRequestHead {
    return QueryMerchantResourceRequestRequestHeadToJSONTyped(json, false);
}

export function QueryMerchantResourceRequestRequestHeadToJSONTyped(value?: QueryMerchantResourceRequestRequestHead | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': value['version'],
        'function': value['_function'],
        'clientId': value['clientId'],
        'reqTime': ((value['reqTime']).toISOString()),
        'reqMsgId': value['reqMsgId'],
        'clientSecret': value['clientSecret'],
        'reserve': value['reserve'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    version: {
        maxLength: 8,
    },
    _function: {
        maxLength: 128,
    },
    clientId: {
        maxLength: 32,
    },
    reqMsgId: {
        maxLength: 64,
    },
    clientSecret: {
        maxLength: 64,
    },
    reserve: {
        maxLength: 256,
    },
}

export function validateQueryMerchantResourceRequestRequestHead(value: QueryMerchantResourceRequestRequestHead): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('version', value.version, propertyValidationAttributesMap['version']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('_function', value._function, propertyValidationAttributesMap['_function']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientId', value.clientId, propertyValidationAttributesMap['clientId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('reqMsgId', value.reqMsgId, propertyValidationAttributesMap['reqMsgId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientSecret', value.clientSecret, propertyValidationAttributesMap['clientSecret']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('reserve', value.reserve, propertyValidationAttributesMap['reserve']));

    return validationErrorContexts;
}
