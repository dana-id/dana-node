/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Additional information
 * @export
 * @interface TransferToDanaRequestAdditionalInfo
 */
export interface TransferToDanaRequestAdditionalInfo {
    /**
     * Additional information of extend
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    extendInfo?: string;
    /**
     * Additional information of account type
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    accountType?: string;
    /**
     * Additional information of transfer to DANA fund type, i.e.<br>
     * AGENT_TOPUP_FOR_USER_SETTLE
     * 
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    fundType: string;
    /**
     * Additional information of external division identifier. This parameter only used for Transfer to DANA subMerchant (fundType : AGENT_TOPUP_FOR_USER_SETTLE)<br>
     * Notes:<br>
     * The required of this parameter is Optional, but if "additionalInfo.chargeTarget" has value DIVISION then the required of this parameter will be changed to Mandatory
     * 
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    externalDivisionId?: string;
    /**
     * Additional information of charge target. This parameter only used for Transfer to DANA subMerchant. The value are:<br>
     * • null<br>
     * • DIVISION<br>
     * • MERCHANT<br>
     * if the value is DIVISION, externalDivisionId will be Mandatory
     * 
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    chargeTarget?: TransferToDanaRequestAdditionalInfoChargeTargetEnum;
    /**
     * Contains customer token, which has been obtained from binding process, refer to Account Binding & Unbinding documentation<br>
     * If request is coming from user interaction, this field is mandatory. If not, just filled customerNumber
     * 
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    accessToken?: string;
    /**
     * Public user identifier of DANA user.<br>
     * Notes: If used, requires customerNumber to be filled with default phone number literal "620000000000"
     * 
     * @type {string}
     * @memberof TransferToDanaRequestAdditionalInfo
     */
    customerId?: string;
}


/**
 * @export
 */
export const TransferToDanaRequestAdditionalInfoChargeTargetEnum = {
    Division: 'DIVISION',
    Merchant: 'MERCHANT'
} as const;
export type TransferToDanaRequestAdditionalInfoChargeTargetEnum = typeof TransferToDanaRequestAdditionalInfoChargeTargetEnum[keyof typeof TransferToDanaRequestAdditionalInfoChargeTargetEnum];


/**
 * Check if a given object implements the TransferToDanaRequestAdditionalInfo interface.
 */
export function instanceOfTransferToDanaRequestAdditionalInfo(value: object): value is TransferToDanaRequestAdditionalInfo {
    if (!('fundType' in value) || value['fundType'] === undefined) return false;
    return true;
}

export function TransferToDanaRequestAdditionalInfoFromJSON(json: any): TransferToDanaRequestAdditionalInfo {
    return TransferToDanaRequestAdditionalInfoFromJSONTyped(json, false);
}

export function TransferToDanaRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToDanaRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'accountType': json['accountType'] == null ? undefined : json['accountType'],
        'fundType': json['fundType'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'chargeTarget': json['chargeTarget'] == null ? undefined : json['chargeTarget'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'customerId': json['customerId'] == null ? undefined : json['customerId'],
    };
}

export function TransferToDanaRequestAdditionalInfoToJSON(json: any): TransferToDanaRequestAdditionalInfo {
    return TransferToDanaRequestAdditionalInfoToJSONTyped(json, false);
}

export function TransferToDanaRequestAdditionalInfoToJSONTyped(value?: TransferToDanaRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'extendInfo': value['extendInfo'],
        'accountType': value['accountType'],
        'fundType': value['fundType'],
        'externalDivisionId': value['externalDivisionId'],
        'chargeTarget': value['chargeTarget'],
        'accessToken': value['accessToken'],
        'customerId': value['customerId'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    extendInfo: {
        maxLength: 4096,
    },
    accountType: {
        maxLength: 64,
    },
    fundType: {
        maxLength: 64,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    chargeTarget: {
        maxLength: 64,
    },
    accessToken: {
        maxLength: 512,
    },
    customerId: {
        maxLength: 32,
    },
}

export function validateTransferToDanaRequestAdditionalInfo(value: TransferToDanaRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accountType', value.accountType, propertyValidationAttributesMap['accountType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('fundType', value.fundType, propertyValidationAttributesMap['fundType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('chargeTarget', value.chargeTarget, propertyValidationAttributesMap['chargeTarget']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerId', value.customerId, propertyValidationAttributesMap['customerId']));

    return validationErrorContexts;
}
