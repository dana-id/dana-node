/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface TransferToBankInquiryStatusResponse
 */
export interface TransferToBankInquiryStatusResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    responseMessage: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    originalPartnerReferenceNo?: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    originalReferenceNo?: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    originalExternalId?: string;
    /**
     * Transaction type indicator is based on the service code of the original transaction request, value always 00
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    serviceCode: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof TransferToBankInquiryStatusResponse
     */
    amount?: Money;
    /**
     * Status of latest transaction:<br>
     * 00 - Success<br>
     * 01 - Initiated<br>
     * 02 - Paying<br>
     * 03 - Pending<br>
     * 04 - Refunded<br>
     * 05 - Canceled<br>
     * 06 - Failed<br>
     * 07 - Not found
     * 
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    latestTransactionStatus: TransferToBankInquiryStatusResponseLatestTransactionStatusEnum;
    /**
     * Description of transaction status
     * @type {string}
     * @memberof TransferToBankInquiryStatusResponse
     */
    transactionStatusDesc?: string;
    /**
     * Additional information
     * @type {object}
     * @memberof TransferToBankInquiryStatusResponse
     */
    additionalInfo?: object;
}


/**
 * @export
 */
export const TransferToBankInquiryStatusResponseLatestTransactionStatusEnum = {
    _00: '00',
    _01: '01',
    _02: '02',
    _03: '03',
    _04: '04',
    _05: '05',
    _06: '06',
    _07: '07'
} as const;
export type TransferToBankInquiryStatusResponseLatestTransactionStatusEnum = typeof TransferToBankInquiryStatusResponseLatestTransactionStatusEnum[keyof typeof TransferToBankInquiryStatusResponseLatestTransactionStatusEnum];


/**
 * Check if a given object implements the TransferToBankInquiryStatusResponse interface.
 */
export function instanceOfTransferToBankInquiryStatusResponse(value: object): value is TransferToBankInquiryStatusResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('serviceCode' in value) || value['serviceCode'] === undefined) return false;
    if (!('latestTransactionStatus' in value) || value['latestTransactionStatus'] === undefined) return false;
    return true;
}

export function TransferToBankInquiryStatusResponseFromJSON(json: any): TransferToBankInquiryStatusResponse {
    return TransferToBankInquiryStatusResponseFromJSONTyped(json, false);
}

export function TransferToBankInquiryStatusResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToBankInquiryStatusResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'] == null ? undefined : json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'serviceCode': json['serviceCode'],
        'amount': json['amount'] == null ? undefined : MoneyFromJSON(json['amount']),
        'latestTransactionStatus': json['latestTransactionStatus'],
        'transactionStatusDesc': json['transactionStatusDesc'] == null ? undefined : json['transactionStatusDesc'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function TransferToBankInquiryStatusResponseToJSON(json: any): TransferToBankInquiryStatusResponse {
    return TransferToBankInquiryStatusResponseToJSONTyped(json, false);
}

export function TransferToBankInquiryStatusResponseToJSONTyped(value?: TransferToBankInquiryStatusResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'serviceCode': value['serviceCode'],
        'amount': MoneyToJSON(value['amount']),
        'latestTransactionStatus': value['latestTransactionStatus'],
        'transactionStatusDesc': value['transactionStatusDesc'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    serviceCode: {
        maxLength: 2,
    },
    latestTransactionStatus: {
        maxLength: 2,
    },
    transactionStatusDesc: {
        maxLength: 50,
    },
}

export function validateTransferToBankInquiryStatusResponse(value: TransferToBankInquiryStatusResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('serviceCode', value.serviceCode, propertyValidationAttributesMap['serviceCode']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('latestTransactionStatus', value.latestTransactionStatus, propertyValidationAttributesMap['latestTransactionStatus']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionStatusDesc', value.transactionStatusDesc, propertyValidationAttributesMap['transactionStatusDesc']));

    return validationErrorContexts;
}
