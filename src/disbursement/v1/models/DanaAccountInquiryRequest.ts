/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { DanaAccountInquiryRequestAdditionalInfo } from './DanaAccountInquiryRequestAdditionalInfo';
import {
    validateDanaAccountInquiryRequestAdditionalInfo,
    DanaAccountInquiryRequestAdditionalInfoFromJSON,
    DanaAccountInquiryRequestAdditionalInfoFromJSONTyped,
    DanaAccountInquiryRequestAdditionalInfoToJSON,
    DanaAccountInquiryRequestAdditionalInfoToJSONTyped,
} from './DanaAccountInquiryRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface DanaAccountInquiryRequest
 */
export interface DanaAccountInquiryRequest {
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof DanaAccountInquiryRequest
     */
    partnerReferenceNo?: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof DanaAccountInquiryRequest
     */
    customerNumber?: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof DanaAccountInquiryRequest
     */
    amount: Money;
    /**
     * Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof DanaAccountInquiryRequest
     */
    transactionDate?: string;
    /**
     * 
     * @type {DanaAccountInquiryRequestAdditionalInfo}
     * @memberof DanaAccountInquiryRequest
     */
    additionalInfo: DanaAccountInquiryRequestAdditionalInfo;
}

/**
 * Check if a given object implements the DanaAccountInquiryRequest interface.
 */
export function instanceOfDanaAccountInquiryRequest(value: object): value is DanaAccountInquiryRequest {
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function DanaAccountInquiryRequestFromJSON(json: any): DanaAccountInquiryRequest {
    return DanaAccountInquiryRequestFromJSONTyped(json, false);
}

export function DanaAccountInquiryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DanaAccountInquiryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'amount': MoneyFromJSON(json['amount']),
        'transactionDate': json['transactionDate'] == null ? undefined : json['transactionDate'],
        'additionalInfo': DanaAccountInquiryRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function DanaAccountInquiryRequestToJSON(json: any): DanaAccountInquiryRequest {
    return DanaAccountInquiryRequestToJSONTyped(json, false);
}

export function DanaAccountInquiryRequestToJSONTyped(value?: DanaAccountInquiryRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'partnerReferenceNo': value['partnerReferenceNo'],
        'customerNumber': value['customerNumber'],
        'amount': MoneyToJSON(value['amount']),
        'transactionDate': value['transactionDate'],
        'additionalInfo': DanaAccountInquiryRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    customerNumber: {
        maxLength: 32,
    },
    transactionDate: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
}

export function validateDanaAccountInquiryRequest(value: DanaAccountInquiryRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionDate', value.transactionDate, propertyValidationAttributesMap['transactionDate']));

    validationErrorContexts.push(...validateDanaAccountInquiryRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
