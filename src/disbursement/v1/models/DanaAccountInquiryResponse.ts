/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface DanaAccountInquiryResponse
 */
export interface DanaAccountInquiryResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    responseMessage: string;
    /**
     * Transaction identifier on DANA system
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    referenceNo?: string;
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    partnerReferenceNo?: string;
    /**
     * Session identifier
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    sessionId?: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    customerNumber?: string;
    /**
     * Customer account name
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    customerName: string;
    /**
     * Limitation of transfer to DANA balance for customer per month
     * @type {number}
     * @memberof DanaAccountInquiryResponse
     */
    customerMonthlyLimit?: number;
    /**
     * Minimal amount. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof DanaAccountInquiryResponse
     */
    minAmount: Money;
    /**
     * Maximal amount. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof DanaAccountInquiryResponse
     */
    maxAmount: Money;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof DanaAccountInquiryResponse
     */
    amount: Money;
    /**
     * Fee amount. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof DanaAccountInquiryResponse
     */
    feeAmount: Money;
    /**
     * Type of fee for each transfer to DANA transaction. Such as admin fee
     * @type {string}
     * @memberof DanaAccountInquiryResponse
     */
    feeType?: string;
    /**
     * Additional information
     * @type {object}
     * @memberof DanaAccountInquiryResponse
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the DanaAccountInquiryResponse interface.
 */
export function instanceOfDanaAccountInquiryResponse(value: object): value is DanaAccountInquiryResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('customerName' in value) || value['customerName'] === undefined) return false;
    if (!('minAmount' in value) || value['minAmount'] === undefined) return false;
    if (!('maxAmount' in value) || value['maxAmount'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('feeAmount' in value) || value['feeAmount'] === undefined) return false;
    return true;
}

export function DanaAccountInquiryResponseFromJSON(json: any): DanaAccountInquiryResponse {
    return DanaAccountInquiryResponseFromJSONTyped(json, false);
}

export function DanaAccountInquiryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DanaAccountInquiryResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'referenceNo': json['referenceNo'] == null ? undefined : json['referenceNo'],
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'customerName': json['customerName'],
        'customerMonthlyLimit': json['customerMonthlyLimit'] == null ? undefined : json['customerMonthlyLimit'],
        'minAmount': MoneyFromJSON(json['minAmount']),
        'maxAmount': MoneyFromJSON(json['maxAmount']),
        'amount': MoneyFromJSON(json['amount']),
        'feeAmount': MoneyFromJSON(json['feeAmount']),
        'feeType': json['feeType'] == null ? undefined : json['feeType'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function DanaAccountInquiryResponseToJSON(json: any): DanaAccountInquiryResponse {
    return DanaAccountInquiryResponseToJSONTyped(json, false);
}

export function DanaAccountInquiryResponseToJSONTyped(value?: DanaAccountInquiryResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'referenceNo': value['referenceNo'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'sessionId': value['sessionId'],
        'customerNumber': value['customerNumber'],
        'customerName': value['customerName'],
        'customerMonthlyLimit': value['customerMonthlyLimit'],
        'minAmount': MoneyToJSON(value['minAmount']),
        'maxAmount': MoneyToJSON(value['maxAmount']),
        'amount': MoneyToJSON(value['amount']),
        'feeAmount': MoneyToJSON(value['feeAmount']),
        'feeType': value['feeType'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    referenceNo: {
        maxLength: 64,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    sessionId: {
        maxLength: 25,
    },
    customerNumber: {
        maxLength: 32,
    },
    customerName: {
        maxLength: 255,
    },
    customerMonthlyLimit: {
        maximum: 100000000000000000,
        exclusiveMaximum: false,
    },
    feeType: {
        maxLength: 25,
    },
}

export function validateDanaAccountInquiryResponse(value: DanaAccountInquiryResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('referenceNo', value.referenceNo, propertyValidationAttributesMap['referenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerName', value.customerName, propertyValidationAttributesMap['customerName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerMonthlyLimit', value.customerMonthlyLimit, propertyValidationAttributesMap['customerMonthlyLimit']));

    validationErrorContexts.push(...validateMoney(value.minAmount));

    validationErrorContexts.push(...validateMoney(value.maxAmount));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateMoney(value.feeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('feeType', value.feeType, propertyValidationAttributesMap['feeType']));

    return validationErrorContexts;
}
