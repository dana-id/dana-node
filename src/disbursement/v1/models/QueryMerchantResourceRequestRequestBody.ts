/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface QueryMerchantResourceRequestRequestBody
 */
export interface QueryMerchantResourceRequestRequestBody {
    /**
     * This is a merchantId of DANA
     * @type {string}
     * @memberof QueryMerchantResourceRequestRequestBody
     */
    requestMerchantId: string;
    /**
     * This is a constant merchant resource info request, currently available for value of constant these:<br>
     * MERCHANT_DEPOSIT_BALANCE<br>
     * MERCHANT_AVAILABLE_BALANCE<br>
     * MERCHANT_TOTAL_BALANCE<br>
     * value for this request can't be empty or wrong constant info
     * 
     * @type {Array<string>}
     * @memberof QueryMerchantResourceRequestRequestBody
     */
    merchantResourceInfoList: Array<QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum>;
}


/**
 * @export
 */
export const QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum = {
    MerchantDepositBalance: 'MERCHANT_DEPOSIT_BALANCE',
    MerchantAvailableBalance: 'MERCHANT_AVAILABLE_BALANCE',
    MerchantTotalBalance: 'MERCHANT_TOTAL_BALANCE'
} as const;
export type QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum = typeof QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum[keyof typeof QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum];


/**
 * Check if a given object implements the QueryMerchantResourceRequestRequestBody interface.
 */
export function instanceOfQueryMerchantResourceRequestRequestBody(value: object): value is QueryMerchantResourceRequestRequestBody {
    if (!('requestMerchantId' in value) || value['requestMerchantId'] === undefined) return false;
    if (!('merchantResourceInfoList' in value) || value['merchantResourceInfoList'] === undefined) return false;
    return true;
}

export function QueryMerchantResourceRequestRequestBodyFromJSON(json: any): QueryMerchantResourceRequestRequestBody {
    return QueryMerchantResourceRequestRequestBodyFromJSONTyped(json, false);
}

export function QueryMerchantResourceRequestRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryMerchantResourceRequestRequestBody {
    if (json == null) {
        return json;
    }
    return {
        
        'requestMerchantId': json['requestMerchantId'],
        'merchantResourceInfoList': json['merchantResourceInfoList'],
    };
}

export function QueryMerchantResourceRequestRequestBodyToJSON(json: any): QueryMerchantResourceRequestRequestBody {
    return QueryMerchantResourceRequestRequestBodyToJSONTyped(json, false);
}

export function QueryMerchantResourceRequestRequestBodyToJSONTyped(value?: QueryMerchantResourceRequestRequestBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'requestMerchantId': value['requestMerchantId'],
        'merchantResourceInfoList': value['merchantResourceInfoList'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantResourceInfoList: {
        minItems: 1,
        uniqueItems: false,
    },
}

export function validateQueryMerchantResourceRequestRequestBody(value: QueryMerchantResourceRequestRequestBody): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantResourceInfoList', value.merchantResourceInfoList, propertyValidationAttributesMap['merchantResourceInfoList']));

    return validationErrorContexts;
}
