/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { TransferToBankRequestAdditionalInfo } from './TransferToBankRequestAdditionalInfo';
import {
    validateTransferToBankRequestAdditionalInfo,
    TransferToBankRequestAdditionalInfoFromJSON,
    TransferToBankRequestAdditionalInfoFromJSONTyped,
    TransferToBankRequestAdditionalInfoToJSON,
    TransferToBankRequestAdditionalInfoToJSONTyped,
} from './TransferToBankRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface TransferToBankRequest
 */
export interface TransferToBankRequest {
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof TransferToBankRequest
     */
    partnerReferenceNo?: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof TransferToBankRequest
     */
    customerNumber: string;
    /**
     * Customer account type
     * @type {string}
     * @memberof TransferToBankRequest
     */
    accountType?: string;
    /**
     * Beneficiary account number
     * @type {string}
     * @memberof TransferToBankRequest
     */
    beneficiaryAccountNumber: string;
    /**
     * Beneficiary Bank code
     * @type {string}
     * @memberof TransferToBankRequest
     */
    beneficiaryBankCode: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof TransferToBankRequest
     */
    amount: Money;
    /**
     * 
     * @type {TransferToBankRequestAdditionalInfo}
     * @memberof TransferToBankRequest
     */
    additionalInfo: TransferToBankRequestAdditionalInfo;
}

/**
 * Check if a given object implements the TransferToBankRequest interface.
 */
export function instanceOfTransferToBankRequest(value: object): value is TransferToBankRequest {
    if (!('customerNumber' in value) || value['customerNumber'] === undefined) return false;
    if (!('beneficiaryAccountNumber' in value) || value['beneficiaryAccountNumber'] === undefined) return false;
    if (!('beneficiaryBankCode' in value) || value['beneficiaryBankCode'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function TransferToBankRequestFromJSON(json: any): TransferToBankRequest {
    return TransferToBankRequestFromJSONTyped(json, false);
}

export function TransferToBankRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToBankRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'customerNumber': json['customerNumber'],
        'accountType': json['accountType'] == null ? undefined : json['accountType'],
        'beneficiaryAccountNumber': json['beneficiaryAccountNumber'],
        'beneficiaryBankCode': json['beneficiaryBankCode'],
        'amount': MoneyFromJSON(json['amount']),
        'additionalInfo': TransferToBankRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function TransferToBankRequestToJSON(json: any): TransferToBankRequest {
    return TransferToBankRequestToJSONTyped(json, false);
}

export function TransferToBankRequestToJSONTyped(value?: TransferToBankRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'partnerReferenceNo': value['partnerReferenceNo'],
        'customerNumber': value['customerNumber'],
        'accountType': value['accountType'],
        'beneficiaryAccountNumber': value['beneficiaryAccountNumber'],
        'beneficiaryBankCode': value['beneficiaryBankCode'],
        'amount': MoneyToJSON(value['amount']),
        'additionalInfo': TransferToBankRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    customerNumber: {
        maxLength: 32,
    },
    accountType: {
        maxLength: 25,
    },
    beneficiaryAccountNumber: {
        maxLength: 32,
    },
    beneficiaryBankCode: {
        maxLength: 8,
    },
}

export function validateTransferToBankRequest(value: TransferToBankRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accountType', value.accountType, propertyValidationAttributesMap['accountType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('beneficiaryAccountNumber', value.beneficiaryAccountNumber, propertyValidationAttributesMap['beneficiaryAccountNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('beneficiaryBankCode', value.beneficiaryBankCode, propertyValidationAttributesMap['beneficiaryBankCode']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateTransferToBankRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
