/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface TransferToDanaResponse
 */
export interface TransferToDanaResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    responseMessage: string;
    /**
     * Transaction identifier on DANA system
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    referenceNo?: string;
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    partnerReferenceNo: string;
    /**
     * Session identifier
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    sessionId?: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    customerNumber?: string;
    /**
     * Customer account name
     * @type {string}
     * @memberof TransferToDanaResponse
     */
    customerName?: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof TransferToDanaResponse
     */
    amount: Money;
    /**
     * Additional information
     * @type {object}
     * @memberof TransferToDanaResponse
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the TransferToDanaResponse interface.
 */
export function instanceOfTransferToDanaResponse(value: object): value is TransferToDanaResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('partnerReferenceNo' in value) || value['partnerReferenceNo'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    return true;
}

export function TransferToDanaResponseFromJSON(json: any): TransferToDanaResponse {
    return TransferToDanaResponseFromJSONTyped(json, false);
}

export function TransferToDanaResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToDanaResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'referenceNo': json['referenceNo'] == null ? undefined : json['referenceNo'],
        'partnerReferenceNo': json['partnerReferenceNo'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'customerName': json['customerName'] == null ? undefined : json['customerName'],
        'amount': MoneyFromJSON(json['amount']),
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function TransferToDanaResponseToJSON(json: any): TransferToDanaResponse {
    return TransferToDanaResponseToJSONTyped(json, false);
}

export function TransferToDanaResponseToJSONTyped(value?: TransferToDanaResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'referenceNo': value['referenceNo'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'sessionId': value['sessionId'],
        'customerNumber': value['customerNumber'],
        'customerName': value['customerName'],
        'amount': MoneyToJSON(value['amount']),
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    referenceNo: {
        maxLength: 64,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    sessionId: {
        maxLength: 25,
    },
    customerNumber: {
        maxLength: 32,
    },
    customerName: {
        maxLength: 255,
    },
}

export function validateTransferToDanaResponse(value: TransferToDanaResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('referenceNo', value.referenceNo, propertyValidationAttributesMap['referenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerName', value.customerName, propertyValidationAttributesMap['customerName']));

    validationErrorContexts.push(...validateMoney(value.amount));

    return validationErrorContexts;
}
