/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface TransferToDanaInquiryStatusRequest
 */
export interface TransferToDanaInquiryStatusRequest {
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof TransferToDanaInquiryStatusRequest
     */
    originalPartnerReferenceNo: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof TransferToDanaInquiryStatusRequest
     */
    originalReferenceNo?: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof TransferToDanaInquiryStatusRequest
     */
    originalExternalId?: string;
    /**
     * Transaction type indicator is based on the service code of the original transaction request, value always 38
     * @type {string}
     * @memberof TransferToDanaInquiryStatusRequest
     */
    serviceCode: string;
    /**
     * Additional information
     * @type {object}
     * @memberof TransferToDanaInquiryStatusRequest
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the TransferToDanaInquiryStatusRequest interface.
 */
export function instanceOfTransferToDanaInquiryStatusRequest(value: object): value is TransferToDanaInquiryStatusRequest {
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined) return false;
    if (!('serviceCode' in value) || value['serviceCode'] === undefined) return false;
    return true;
}

export function TransferToDanaInquiryStatusRequestFromJSON(json: any): TransferToDanaInquiryStatusRequest {
    return TransferToDanaInquiryStatusRequestFromJSONTyped(json, false);
}

export function TransferToDanaInquiryStatusRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToDanaInquiryStatusRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'serviceCode': json['serviceCode'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function TransferToDanaInquiryStatusRequestToJSON(json: any): TransferToDanaInquiryStatusRequest {
    return TransferToDanaInquiryStatusRequestToJSONTyped(json, false);
}

export function TransferToDanaInquiryStatusRequestToJSONTyped(value?: TransferToDanaInquiryStatusRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'serviceCode': value['serviceCode'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    serviceCode: {
        maxLength: 2,
    },
}

export function validateTransferToDanaInquiryStatusRequest(value: TransferToDanaInquiryStatusRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('serviceCode', value.serviceCode, propertyValidationAttributesMap['serviceCode']));

    return validationErrorContexts;
}
