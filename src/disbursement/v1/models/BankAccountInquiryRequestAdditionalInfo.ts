/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Additional information
 * @export
 * @interface BankAccountInquiryRequestAdditionalInfo
 */
export interface BankAccountInquiryRequestAdditionalInfo {
    /**
     * Additional information of withdraw fund type, i.e.<br>
     * MERCHANT_WITHDRAW_FOR_CORPORATE
     * 
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    fundType: string;
    /**
     * Additional information of external division identifier. (fundType: MERCHANT_WITHDRAW_FOR_CORPORATE)<br>
     * Notes: The required of this parameter is Optional, but if "additionalInfo.chargeTarget" has value DIVISION then the required of this parameter will be changed to Mandatory
     * 
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    externalDivisionId?: string;
    /**
     * Additional information of charge target. The values are:<br>
     * • null<br>
     * • DIVISION<br>
     * • MERCHANT<br>
     * Notes: If the value is DIVISION, externalDivisionId will be Mandatory
     * 
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    chargeTarget?: BankAccountInquiryRequestAdditionalInfoChargeTargetEnum;
    /**
     * Additional information of beneficiary Bank code
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    beneficiaryBankCode: string;
    /**
     * Additional information of beneficiary account name for validation purpose
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    beneficiaryAccountName?: string;
    /**
     * Additional information of account type
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    accountType?: string;
    /**
     * Contains customer token, which has been obtained from binding process, refer to Account Binding & Unbinding documentation<br>
     * If request is coming from user interaction, this field is mandatory. If not, just filled customerNumber
     * 
     * @type {string}
     * @memberof BankAccountInquiryRequestAdditionalInfo
     */
    accessToken?: string;
}


/**
 * @export
 */
export const BankAccountInquiryRequestAdditionalInfoChargeTargetEnum = {
    Division: 'DIVISION',
    Merchant: 'MERCHANT'
} as const;
export type BankAccountInquiryRequestAdditionalInfoChargeTargetEnum = typeof BankAccountInquiryRequestAdditionalInfoChargeTargetEnum[keyof typeof BankAccountInquiryRequestAdditionalInfoChargeTargetEnum] | '';


/**
 * Check if a given object implements the BankAccountInquiryRequestAdditionalInfo interface.
 */
export function instanceOfBankAccountInquiryRequestAdditionalInfo(value: object): value is BankAccountInquiryRequestAdditionalInfo {
    if (!('fundType' in value) || value['fundType'] === undefined) return false;
    if (!('beneficiaryBankCode' in value) || value['beneficiaryBankCode'] === undefined) return false;
    return true;
}

export function BankAccountInquiryRequestAdditionalInfoFromJSON(json: any): BankAccountInquiryRequestAdditionalInfo {
    return BankAccountInquiryRequestAdditionalInfoFromJSONTyped(json, false);
}

export function BankAccountInquiryRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BankAccountInquiryRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'fundType': json['fundType'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'chargeTarget': json['chargeTarget'] == null ? undefined : json['chargeTarget'],
        'beneficiaryBankCode': json['beneficiaryBankCode'],
        'beneficiaryAccountName': json['beneficiaryAccountName'] == null ? undefined : json['beneficiaryAccountName'],
        'accountType': json['accountType'] == null ? undefined : json['accountType'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
    };
}

export function BankAccountInquiryRequestAdditionalInfoToJSON(json: any): BankAccountInquiryRequestAdditionalInfo {
    return BankAccountInquiryRequestAdditionalInfoToJSONTyped(json, false);
}

export function BankAccountInquiryRequestAdditionalInfoToJSONTyped(value?: BankAccountInquiryRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fundType': value['fundType'],
        'externalDivisionId': value['externalDivisionId'],
        'chargeTarget': value['chargeTarget'],
        'beneficiaryBankCode': value['beneficiaryBankCode'],
        'beneficiaryAccountName': value['beneficiaryAccountName'],
        'accountType': value['accountType'],
        'accessToken': value['accessToken'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    fundType: {
        maxLength: 64,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    chargeTarget: {
        maxLength: 64,
    },
    beneficiaryBankCode: {
        maxLength: 8,
    },
    beneficiaryAccountName: {
        maxLength: 64,
    },
    accountType: {
        maxLength: 64,
    },
    accessToken: {
        maxLength: 512,
    },
}

export function validateBankAccountInquiryRequestAdditionalInfo(value: BankAccountInquiryRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('fundType', value.fundType, propertyValidationAttributesMap['fundType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('chargeTarget', value.chargeTarget, propertyValidationAttributesMap['chargeTarget']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('beneficiaryBankCode', value.beneficiaryBankCode, propertyValidationAttributesMap['beneficiaryBankCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('beneficiaryAccountName', value.beneficiaryAccountName, propertyValidationAttributesMap['beneficiaryAccountName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accountType', value.accountType, propertyValidationAttributesMap['accountType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));

    return validationErrorContexts;
}
