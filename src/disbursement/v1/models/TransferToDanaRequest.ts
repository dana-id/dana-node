/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { TransferToDanaRequestAdditionalInfo } from './TransferToDanaRequestAdditionalInfo';
import {
    validateTransferToDanaRequestAdditionalInfo,
    TransferToDanaRequestAdditionalInfoFromJSON,
    TransferToDanaRequestAdditionalInfoFromJSONTyped,
    TransferToDanaRequestAdditionalInfoToJSON,
    TransferToDanaRequestAdditionalInfoToJSONTyped,
} from './TransferToDanaRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface TransferToDanaRequest
 */
export interface TransferToDanaRequest {
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof TransferToDanaRequest
     */
    partnerReferenceNo: string;
    /**
     * Customer account number, in format 628xxx
     * @type {string}
     * @memberof TransferToDanaRequest
     */
    customerNumber?: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof TransferToDanaRequest
     */
    amount: Money;
    /**
     * Fee amount. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof TransferToDanaRequest
     */
    feeAmount: Money;
    /**
     * Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof TransferToDanaRequest
     */
    transactionDate?: string;
    /**
     * Session identifier
     * @type {string}
     * @memberof TransferToDanaRequest
     */
    sessionId?: string;
    /**
     * Category identifier
     * @type {number}
     * @memberof TransferToDanaRequest
     */
    categoryId?: number;
    /**
     * Transaction notes
     * @type {string}
     * @memberof TransferToDanaRequest
     */
    notes?: string;
    /**
     * 
     * @type {TransferToDanaRequestAdditionalInfo}
     * @memberof TransferToDanaRequest
     */
    additionalInfo: TransferToDanaRequestAdditionalInfo;
}

/**
 * Check if a given object implements the TransferToDanaRequest interface.
 */
export function instanceOfTransferToDanaRequest(value: object): value is TransferToDanaRequest {
    if (!('partnerReferenceNo' in value) || value['partnerReferenceNo'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('feeAmount' in value) || value['feeAmount'] === undefined) return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined) return false;
    return true;
}

export function TransferToDanaRequestFromJSON(json: any): TransferToDanaRequest {
    return TransferToDanaRequestFromJSONTyped(json, false);
}

export function TransferToDanaRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferToDanaRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'partnerReferenceNo': json['partnerReferenceNo'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'amount': MoneyFromJSON(json['amount']),
        'feeAmount': MoneyFromJSON(json['feeAmount']),
        'transactionDate': json['transactionDate'] == null ? undefined : json['transactionDate'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'additionalInfo': TransferToDanaRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function TransferToDanaRequestToJSON(json: any): TransferToDanaRequest {
    return TransferToDanaRequestToJSONTyped(json, false);
}

export function TransferToDanaRequestToJSONTyped(value?: TransferToDanaRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'partnerReferenceNo': value['partnerReferenceNo'],
        'customerNumber': value['customerNumber'],
        'amount': MoneyToJSON(value['amount']),
        'feeAmount': MoneyToJSON(value['feeAmount']),
        'transactionDate': value['transactionDate'],
        'sessionId': value['sessionId'],
        'categoryId': value['categoryId'],
        'notes': value['notes'],
        'additionalInfo': TransferToDanaRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    customerNumber: {
        maxLength: 32,
    },
    transactionDate: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    sessionId: {
        maxLength: 25,
    },
    categoryId: {
        maximum: 9999999999,
        exclusiveMaximum: false,
    },
    notes: {
        maxLength: 255,
    },
}

export function validateTransferToDanaRequest(value: TransferToDanaRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateMoney(value.feeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionDate', value.transactionDate, propertyValidationAttributesMap['transactionDate']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('categoryId', value.categoryId, propertyValidationAttributesMap['categoryId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('notes', value.notes, propertyValidationAttributesMap['notes']));

    validationErrorContexts.push(...validateTransferToDanaRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
