/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import * as runtime from '../../../runtime';
import type {
  BankAccountInquiryRequest,
  BankAccountInquiryResponse,
  DanaAccountInquiryRequest,
  DanaAccountInquiryResponse,
  TransferToBankInquiryStatusRequest,
  TransferToBankInquiryStatusResponse,
  TransferToBankRequest,
  TransferToBankResponse,
  TransferToDanaInquiryStatusRequest,
  TransferToDanaInquiryStatusResponse,
  TransferToDanaRequest,
  TransferToDanaResponse,
} from '../models/index';
import {
    validateBankAccountInquiryRequest,
    BankAccountInquiryRequestFromJSON,
    BankAccountInquiryRequestToJSON,
    validateBankAccountInquiryResponse,
    BankAccountInquiryResponseFromJSON,
    BankAccountInquiryResponseToJSON,
    validateDanaAccountInquiryRequest,
    DanaAccountInquiryRequestFromJSON,
    DanaAccountInquiryRequestToJSON,
    validateDanaAccountInquiryResponse,
    DanaAccountInquiryResponseFromJSON,
    DanaAccountInquiryResponseToJSON,
    validateTransferToBankInquiryStatusRequest,
    TransferToBankInquiryStatusRequestFromJSON,
    TransferToBankInquiryStatusRequestToJSON,
    validateTransferToBankInquiryStatusResponse,
    TransferToBankInquiryStatusResponseFromJSON,
    TransferToBankInquiryStatusResponseToJSON,
    validateTransferToBankRequest,
    TransferToBankRequestFromJSON,
    TransferToBankRequestToJSON,
    validateTransferToBankResponse,
    TransferToBankResponseFromJSON,
    TransferToBankResponseToJSON,
    validateTransferToDanaInquiryStatusRequest,
    TransferToDanaInquiryStatusRequestFromJSON,
    TransferToDanaInquiryStatusRequestToJSON,
    validateTransferToDanaInquiryStatusResponse,
    TransferToDanaInquiryStatusResponseFromJSON,
    TransferToDanaInquiryStatusResponseToJSON,
    validateTransferToDanaRequest,
    TransferToDanaRequestFromJSON,
    TransferToDanaRequestToJSON,
    validateTransferToDanaResponse,
    TransferToDanaResponseFromJSON,
    TransferToDanaResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class DisbursementApi extends runtime.BaseAPI {

    partnerId: string = "";
    privateKey: string = "";
    origin: string = "";
    env: string = "";
    clientSecret: string = "";

    constructor({ partnerId, privateKey, origin, env, clientSecret }: { partnerId?: string, privateKey?: string, origin?: string, env?: string, clientSecret?: string }) {
        const basePath = runtime.getBasePathByEnv(env);

        const configuration = new runtime.Configuration({
            basePath: basePath,
        })

        super(configuration);

        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
        this.clientSecret = clientSecret;
    }

    /**
     * This API is used for merchant to do inquiry Bank account info via DANA
     * Transfer to Bank Account Inquiry
     */
    async bankAccountInquiry(bankAccountInquiryRequest: BankAccountInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountInquiryResponse> {
        if (bankAccountInquiryRequest == null) {
            throw new runtime.RequiredError(
                'bankAccountInquiryRequest',
                'Required parameter "bankAccountInquiryRequest" was null or undefined when calling bankAccountInquiry().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateBankAccountInquiryRequest(bankAccountInquiryRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/bank-account-inquiry.htm`;

        const requestBody: string = JSON.stringify(BankAccountInquiryRequestToJSON(bankAccountInquiryRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankAccountInquiryRequestToJSON(bankAccountInquiryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountInquiryResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to do account inquiry to DANA
     * DANA Account Inquiry
     */
    async danaAccountInquiry(danaAccountInquiryRequest: DanaAccountInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DanaAccountInquiryResponse> {
        if (danaAccountInquiryRequest == null) {
            throw new runtime.RequiredError(
                'danaAccountInquiryRequest',
                'Required parameter "danaAccountInquiryRequest" was null or undefined when calling danaAccountInquiry().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateDanaAccountInquiryRequest(danaAccountInquiryRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/account-inquiry.htm`;

        const requestBody: string = JSON.stringify(DanaAccountInquiryRequestToJSON(danaAccountInquiryRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DanaAccountInquiryRequestToJSON(danaAccountInquiryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DanaAccountInquiryResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to do transfer to Bank request via DANA
     * Transfer to Bank
     */
    async transferToBank(transferToBankRequest: TransferToBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferToBankResponse> {
        if (transferToBankRequest == null) {
            throw new runtime.RequiredError(
                'transferToBankRequest',
                'Required parameter "transferToBankRequest" was null or undefined when calling transferToBank().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateTransferToBankRequest(transferToBankRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/transfer-bank.htm`;

        const requestBody: string = JSON.stringify(TransferToBankRequestToJSON(transferToBankRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferToBankRequestToJSON(transferToBankRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferToBankResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to do inquiry status transfer to Bank transaction to DANA
     * Transfer to Bank Inquiry Status
     */
    async transferToBankInquiryStatus(transferToBankInquiryStatusRequest: TransferToBankInquiryStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferToBankInquiryStatusResponse> {
        if (transferToBankInquiryStatusRequest == null) {
            throw new runtime.RequiredError(
                'transferToBankInquiryStatusRequest',
                'Required parameter "transferToBankInquiryStatusRequest" was null or undefined when calling transferToBankInquiryStatus().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateTransferToBankInquiryStatusRequest(transferToBankInquiryStatusRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/transfer-bank-status.htm`;

        const requestBody: string = JSON.stringify(TransferToBankInquiryStatusRequestToJSON(transferToBankInquiryStatusRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferToBankInquiryStatusRequestToJSON(transferToBankInquiryStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferToBankInquiryStatusResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to do top up request to DANA
     * Transfer to DANA
     */
    async transferToDana(transferToDanaRequest: TransferToDanaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferToDanaResponse> {
        if (transferToDanaRequest == null) {
            throw new runtime.RequiredError(
                'transferToDanaRequest',
                'Required parameter "transferToDanaRequest" was null or undefined when calling transferToDana().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateTransferToDanaRequest(transferToDanaRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/topup.htm`;

        const requestBody: string = JSON.stringify(TransferToDanaRequestToJSON(transferToDanaRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferToDanaRequestToJSON(transferToDanaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferToDanaResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to do inquiry status top up transaction to DANA
     * Transfer to DANA Inquiry Status
     */
    async transferToDanaInquiryStatus(transferToDanaInquiryStatusRequest: TransferToDanaInquiryStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferToDanaInquiryStatusResponse> {
        if (transferToDanaInquiryStatusRequest == null) {
            throw new runtime.RequiredError(
                'transferToDanaInquiryStatusRequest',
                'Required parameter "transferToDanaInquiryStatusRequest" was null or undefined when calling transferToDanaInquiryStatus().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateTransferToDanaInquiryStatusRequest(transferToDanaInquiryStatusRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/emoney/topup-status.htm`;

        const requestBody: string = JSON.stringify(TransferToDanaInquiryStatusRequestToJSON(transferToDanaInquiryStatusRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferToDanaInquiryStatusRequestToJSON(transferToDanaInquiryStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferToDanaInquiryStatusResponseFromJSON(jsonValue)).value();
    }

}
