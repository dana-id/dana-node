/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface BusinessDocs
 */
export interface BusinessDocs {
    /**
     * Document type. "individu" entity can only use KTP and SIM. Other entities can use SIUP and NIB
     * @type {string}
     * @memberof BusinessDocs
     */
    docType?: BusinessDocsDocTypeEnum;
    /**
     * Document ID
     * @type {string}
     * @memberof BusinessDocs
     */
    docId?: string;
    /**
     * Document file encoded in base64
     * @type {string}
     * @memberof BusinessDocs
     */
    docFile?: string;
}


/**
 * @export
 */
export const BusinessDocsDocTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Siup: 'SIUP',
    Nib: 'NIB'
} as const;
export type BusinessDocsDocTypeEnum = typeof BusinessDocsDocTypeEnum[keyof typeof BusinessDocsDocTypeEnum] | '';


/**
 * Check if a given object implements the BusinessDocs interface.
 */
export function instanceOfBusinessDocs(value: object): value is BusinessDocs {
    return true;
}

export function BusinessDocsFromJSON(json: any): BusinessDocs {
    return BusinessDocsFromJSONTyped(json, false);
}

export function BusinessDocsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessDocs {
    if (json == null) {
        return json;
    }
    return {
        
        'docType': json['docType'] == null ? undefined : json['docType'],
        'docId': json['docId'] == null ? undefined : json['docId'],
        'docFile': json['docFile'] == null ? undefined : json['docFile'],
    };
}

export function BusinessDocsToJSON(json: any): BusinessDocs {
    return BusinessDocsToJSONTyped(json, false);
}

export function BusinessDocsToJSONTyped(value?: BusinessDocs | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'docType': value['docType'],
        'docId': value['docId'],
        'docFile': value['docFile'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateBusinessDocs(value: BusinessDocs): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
