/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { BusinessDocs } from './BusinessDocs';
import {
    validateBusinessDocs,
    BusinessDocsFromJSON,
    BusinessDocsFromJSONTyped,
    BusinessDocsToJSON,
    BusinessDocsToJSONTyped,
} from './BusinessDocs';
import type { UserName } from './UserName';
import {
    validateUserName,
    UserNameFromJSON,
    UserNameFromJSONTyped,
    UserNameToJSON,
    UserNameToJSONTyped,
} from './UserName';
import type { MobileNoInfo } from './MobileNoInfo';
import {
    validateMobileNoInfo,
    MobileNoInfoFromJSON,
    MobileNoInfoFromJSONTyped,
    MobileNoInfoToJSON,
    MobileNoInfoToJSONTyped,
} from './MobileNoInfo';
import type { PicInfo } from './PicInfo';
import {
    validatePicInfo,
    PicInfoFromJSON,
    PicInfoFromJSONTyped,
    PicInfoToJSON,
    PicInfoToJSONTyped,
} from './PicInfo';
import type { AddressInfo } from './AddressInfo';
import {
    validateAddressInfo,
    AddressInfoFromJSON,
    AddressInfoFromJSONTyped,
    AddressInfoToJSON,
    AddressInfoToJSONTyped,
} from './AddressInfo';

/**
 * 
 * @export
 * @interface CreateShopRequest
 */
export interface CreateShopRequest {
    /**
     * Merchant id
     * @type {string}
     * @memberof CreateShopRequest
     */
    merchantId: string;
    /**
     * Parent division ID. Required when shopParentType is DIVISION or EXTERNAL_DIVISION
     * @type {string}
     * @memberof CreateShopRequest
     */
    parentDivisionId?: string;
    /**
     * Parent type for the shop
     * @type {string}
     * @memberof CreateShopRequest
     */
    shopParentType: CreateShopRequestShopParentTypeEnum;
    /**
     * Shop name
     * @type {string}
     * @memberof CreateShopRequest
     */
    mainName: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof CreateShopRequest
     */
    shopAddress?: AddressInfo;
    /**
     * Shop description
     * @type {string}
     * @memberof CreateShopRequest
     */
    shopDesc?: string;
    /**
     * External shop identifier
     * @type {string}
     * @memberof CreateShopRequest
     */
    externalShopId: string;
    /**
     * Logo images encoded in base64. Keys can be LOGO, PC_LOGO, MOBILE_LOGO. Images must be PNG format.
     * @type {{ [key: string]: string; }}
     * @memberof CreateShopRequest
     */
    logoUrlMap?: { [key: string]: string; };
    /**
     * MCC codes
     * @type {Array<string>}
     * @memberof CreateShopRequest
     */
    mccCodes?: Array<string>;
    /**
     * Size type of the shop
     * @type {string}
     * @memberof CreateShopRequest
     */
    sizeType: CreateShopRequestSizeTypeEnum;
    /**
     * Longitude
     * @type {string}
     * @memberof CreateShopRequest
     */
    ln?: string;
    /**
     * Latitude
     * @type {string}
     * @memberof CreateShopRequest
     */
    lat?: string;
    /**
     * Tax number (NPWP). Must be 15 digits
     * @type {string}
     * @memberof CreateShopRequest
     */
    taxNo?: string;
    /**
     * Legal name/tax name
     * @type {string}
     * @memberof CreateShopRequest
     */
    brandName?: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof CreateShopRequest
     */
    taxAddress?: AddressInfo;
    /**
     * Flag for loyalty category
     * @type {string}
     * @memberof CreateShopRequest
     */
    loyalty?: CreateShopRequestLoyaltyEnum;
    /**
     * API version flag. Use > 2 for new attributes
     * @type {string}
     * @memberof CreateShopRequest
     */
    apiVersion?: string;
    /**
     * Business entity type. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    businessEntity?: CreateShopRequestBusinessEntityEnum;
    /**
     * Business documents. Required if apiVersion > 2
     * @type {Array<BusinessDocs>}
     * @memberof CreateShopRequest
     */
    businessDocs?: Array<BusinessDocs>;
    /**
     * 
     * @type {UserName}
     * @memberof CreateShopRequest
     */
    ownerName?: UserName;
    /**
     * Owner ID type. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    ownerIdType?: CreateShopRequestOwnerIdTypeEnum;
    /**
     * Owner ID number. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    ownerIdNo?: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof CreateShopRequest
     */
    ownerAddress?: AddressInfo;
    /**
     * 
     * @type {MobileNoInfo}
     * @memberof CreateShopRequest
     */
    ownerPhoneNumber?: MobileNoInfo;
    /**
     * Shop ownership type. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    shopOwning?: CreateShopRequestShopOwningEnum;
    /**
     * Device number. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    deviceNumber?: string;
    /**
     * POS number. Required if apiVersion > 2
     * @type {string}
     * @memberof CreateShopRequest
     */
    posNumber?: string;
    /**
     * Director PICs. Required if apiVersion > 2
     * @type {Array<PicInfo>}
     * @memberof CreateShopRequest
     */
    directorPics?: Array<PicInfo>;
    /**
     * Non-director PICs. Required if apiVersion > 2
     * @type {Array<PicInfo>}
     * @memberof CreateShopRequest
     */
    nonDirectorPics?: Array<PicInfo>;
    /**
     * Shop business type
     * @type {string}
     * @memberof CreateShopRequest
     */
    shopBizType?: string;
    /**
     * Extended information
     * @type {{ [key: string]: any; }}
     * @memberof CreateShopRequest
     */
    extInfo?: { [key: string]: any; };
}


/**
 * @export
 */
export const CreateShopRequestShopParentTypeEnum = {
    Merchant: 'MERCHANT',
    Division: 'DIVISION',
    ExternalDivision: 'EXTERNAL_DIVISION'
} as const;
export type CreateShopRequestShopParentTypeEnum = typeof CreateShopRequestShopParentTypeEnum[keyof typeof CreateShopRequestShopParentTypeEnum] | '';

/**
 * @export
 */
export const CreateShopRequestSizeTypeEnum = {
    Umi: 'UMI',
    Uke: 'UKE',
    Ume: 'UME',
    Ube: 'UBE'
} as const;
export type CreateShopRequestSizeTypeEnum = typeof CreateShopRequestSizeTypeEnum[keyof typeof CreateShopRequestSizeTypeEnum] | '';

/**
 * @export
 */
export const CreateShopRequestLoyaltyEnum = {
    True: 'true',
    False: 'false'
} as const;
export type CreateShopRequestLoyaltyEnum = typeof CreateShopRequestLoyaltyEnum[keyof typeof CreateShopRequestLoyaltyEnum] | '';

/**
 * @export
 */
export const CreateShopRequestBusinessEntityEnum = {
    Pt: 'pt',
    Cv: 'cv',
    Individu: 'individu',
    UsahaDagang: 'usaha_dagang',
    Yayasan: 'yayasan',
    Koperasi: 'koperasi'
} as const;
export type CreateShopRequestBusinessEntityEnum = typeof CreateShopRequestBusinessEntityEnum[keyof typeof CreateShopRequestBusinessEntityEnum] | '';

/**
 * @export
 */
export const CreateShopRequestOwnerIdTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Passport: 'PASSPORT',
    Siup: 'SIUP',
    Nib: 'NIB'
} as const;
export type CreateShopRequestOwnerIdTypeEnum = typeof CreateShopRequestOwnerIdTypeEnum[keyof typeof CreateShopRequestOwnerIdTypeEnum] | '';

/**
 * @export
 */
export const CreateShopRequestShopOwningEnum = {
    DirectOwned: 'DIRECT_OWNED',
    Franchised: 'FRANCHISED'
} as const;
export type CreateShopRequestShopOwningEnum = typeof CreateShopRequestShopOwningEnum[keyof typeof CreateShopRequestShopOwningEnum] | '';


/**
 * Check if a given object implements the CreateShopRequest interface.
 */
export function instanceOfCreateShopRequest(value: object): value is CreateShopRequest {
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('shopParentType' in value) || value['shopParentType'] === undefined) return false;
    if (!('mainName' in value) || value['mainName'] === undefined) return false;
    if (!('externalShopId' in value) || value['externalShopId'] === undefined) return false;
    if (!('sizeType' in value) || value['sizeType'] === undefined) return false;
    return true;
}

export function CreateShopRequestFromJSON(json: any): CreateShopRequest {
    return CreateShopRequestFromJSONTyped(json, false);
}

export function CreateShopRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateShopRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'merchantId': json['merchantId'],
        'parentDivisionId': json['parentDivisionId'] == null ? undefined : json['parentDivisionId'],
        'shopParentType': json['shopParentType'],
        'mainName': json['mainName'],
        'shopAddress': json['shopAddress'] == null ? undefined : AddressInfoFromJSON(json['shopAddress']),
        'shopDesc': json['shopDesc'] == null ? undefined : json['shopDesc'],
        'externalShopId': json['externalShopId'],
        'logoUrlMap': json['logoUrlMap'] == null ? undefined : json['logoUrlMap'],
        'mccCodes': json['mccCodes'] == null ? undefined : json['mccCodes'],
        'sizeType': json['sizeType'],
        'ln': json['ln'] == null ? undefined : json['ln'],
        'lat': json['lat'] == null ? undefined : json['lat'],
        'taxNo': json['taxNo'] == null ? undefined : json['taxNo'],
        'brandName': json['brandName'] == null ? undefined : json['brandName'],
        'taxAddress': json['taxAddress'] == null ? undefined : AddressInfoFromJSON(json['taxAddress']),
        'loyalty': json['loyalty'] == null ? undefined : json['loyalty'],
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'businessEntity': json['businessEntity'] == null ? undefined : json['businessEntity'],
        'businessDocs': json['businessDocs'] == null ? undefined : ((json['businessDocs'] as Array<any>).map(BusinessDocsFromJSON)),
        'ownerName': json['ownerName'] == null ? undefined : UserNameFromJSON(json['ownerName']),
        'ownerIdType': json['ownerIdType'] == null ? undefined : json['ownerIdType'],
        'ownerIdNo': json['ownerIdNo'] == null ? undefined : json['ownerIdNo'],
        'ownerAddress': json['ownerAddress'] == null ? undefined : AddressInfoFromJSON(json['ownerAddress']),
        'ownerPhoneNumber': json['ownerPhoneNumber'] == null ? undefined : MobileNoInfoFromJSON(json['ownerPhoneNumber']),
        'shopOwning': json['shopOwning'] == null ? undefined : json['shopOwning'],
        'deviceNumber': json['deviceNumber'] == null ? undefined : json['deviceNumber'],
        'posNumber': json['posNumber'] == null ? undefined : json['posNumber'],
        'directorPics': json['directorPics'] == null ? undefined : ((json['directorPics'] as Array<any>).map(PicInfoFromJSON)),
        'nonDirectorPics': json['nonDirectorPics'] == null ? undefined : ((json['nonDirectorPics'] as Array<any>).map(PicInfoFromJSON)),
        'shopBizType': json['shopBizType'] == null ? undefined : json['shopBizType'],
        'extInfo': json['extInfo'] == null ? undefined : json['extInfo'],
    };
}

export function CreateShopRequestToJSON(json: any): CreateShopRequest {
    return CreateShopRequestToJSONTyped(json, false);
}

export function CreateShopRequestToJSONTyped(value?: CreateShopRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'merchantId': value['merchantId'],
        'parentDivisionId': value['parentDivisionId'],
        'shopParentType': value['shopParentType'],
        'mainName': value['mainName'],
        'shopAddress': AddressInfoToJSON(value['shopAddress']),
        'shopDesc': value['shopDesc'],
        'externalShopId': value['externalShopId'],
        'logoUrlMap': value['logoUrlMap'],
        'mccCodes': value['mccCodes'],
        'sizeType': value['sizeType'],
        'ln': value['ln'],
        'lat': value['lat'],
        'taxNo': value['taxNo'],
        'brandName': value['brandName'],
        'taxAddress': AddressInfoToJSON(value['taxAddress']),
        'loyalty': value['loyalty'],
        'apiVersion': value['apiVersion'],
        'businessEntity': value['businessEntity'],
        'businessDocs': value['businessDocs'] == null ? undefined : ((value['businessDocs'] as Array<any>).map(BusinessDocsToJSON)),
        'ownerName': UserNameToJSON(value['ownerName']),
        'ownerIdType': value['ownerIdType'],
        'ownerIdNo': value['ownerIdNo'],
        'ownerAddress': AddressInfoToJSON(value['ownerAddress']),
        'ownerPhoneNumber': MobileNoInfoToJSON(value['ownerPhoneNumber']),
        'shopOwning': value['shopOwning'],
        'deviceNumber': value['deviceNumber'],
        'posNumber': value['posNumber'],
        'directorPics': value['directorPics'] == null ? undefined : ((value['directorPics'] as Array<any>).map(PicInfoToJSON)),
        'nonDirectorPics': value['nonDirectorPics'] == null ? undefined : ((value['nonDirectorPics'] as Array<any>).map(PicInfoToJSON)),
        'shopBizType': value['shopBizType'],
        'extInfo': value['extInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantId: {
        maxLength: 21,
    },
    mainName: {
        maxLength: 256,
    },
    externalShopId: {
        maxLength: 64,
    },
    taxNo: {
        pattern: new RegExp('/^[0-9]{15}$/'.slice(1, -1)),
    },
}

export function validateCreateShopRequest(value: CreateShopRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('mainName', value.mainName, propertyValidationAttributesMap['mainName']));

    validationErrorContexts.push(...validateAddressInfo(value.shopAddress));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalShopId', value.externalShopId, propertyValidationAttributesMap['externalShopId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('taxNo', value.taxNo, propertyValidationAttributesMap['taxNo']));

    validationErrorContexts.push(...validateAddressInfo(value.taxAddress));

    validationErrorContexts.push(...validateUserName(value.ownerName));

    validationErrorContexts.push(...validateAddressInfo(value.ownerAddress));

    validationErrorContexts.push(...validateMobileNoInfo(value.ownerPhoneNumber));

    return validationErrorContexts;
}
