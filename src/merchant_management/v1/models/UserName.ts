/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface UserName
 */
export interface UserName {
    /**
     * First name
     * @type {string}
     * @memberof UserName
     */
    firstName?: string;
    /**
     * Last name
     * @type {string}
     * @memberof UserName
     */
    lastName?: string;
}

/**
 * Check if a given object implements the UserName interface.
 */
export function instanceOfUserName(value: object): value is UserName {
    return true;
}

export function UserNameFromJSON(json: any): UserName {
    return UserNameFromJSONTyped(json, false);
}

export function UserNameFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserName {
    if (json == null) {
        return json;
    }
    return {
        
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
    };
}

export function UserNameToJSON(json: any): UserName {
    return UserNameToJSONTyped(json, false);
}

export function UserNameToJSONTyped(value?: UserName | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'firstName': value['firstName'],
        'lastName': value['lastName'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateUserName(value: UserName): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
