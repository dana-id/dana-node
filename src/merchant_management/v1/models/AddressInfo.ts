/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface AddressInfo
 */
export interface AddressInfo {
    /**
     * Country
     * @type {string}
     * @memberof AddressInfo
     */
    country?: string;
    /**
     * Province
     * @type {string}
     * @memberof AddressInfo
     */
    province?: string;
    /**
     * City
     * @type {string}
     * @memberof AddressInfo
     */
    city?: string;
    /**
     * Area
     * @type {string}
     * @memberof AddressInfo
     */
    area?: string;
    /**
     * Primary address line
     * @type {string}
     * @memberof AddressInfo
     */
    address1?: string;
    /**
     * Secondary address line
     * @type {string}
     * @memberof AddressInfo
     */
    address2?: string;
    /**
     * Postal code
     * @type {string}
     * @memberof AddressInfo
     */
    postcode?: string;
    /**
     * Sub district
     * @type {string}
     * @memberof AddressInfo
     */
    subDistrict?: string;
}

/**
 * Check if a given object implements the AddressInfo interface.
 */
export function instanceOfAddressInfo(value: object): value is AddressInfo {
    return true;
}

export function AddressInfoFromJSON(json: any): AddressInfo {
    return AddressInfoFromJSONTyped(json, false);
}

export function AddressInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'country': json['country'] == null ? undefined : json['country'],
        'province': json['province'] == null ? undefined : json['province'],
        'city': json['city'] == null ? undefined : json['city'],
        'area': json['area'] == null ? undefined : json['area'],
        'address1': json['address1'] == null ? undefined : json['address1'],
        'address2': json['address2'] == null ? undefined : json['address2'],
        'postcode': json['postcode'] == null ? undefined : json['postcode'],
        'subDistrict': json['subDistrict'] == null ? undefined : json['subDistrict'],
    };
}

export function AddressInfoToJSON(json: any): AddressInfo {
    return AddressInfoToJSONTyped(json, false);
}

export function AddressInfoToJSONTyped(value?: AddressInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'country': value['country'],
        'province': value['province'],
        'city': value['city'],
        'area': value['area'],
        'address1': value['address1'],
        'address2': value['address2'],
        'postcode': value['postcode'],
        'subDistrict': value['subDistrict'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateAddressInfo(value: AddressInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
