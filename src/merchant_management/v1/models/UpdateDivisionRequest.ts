/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { BusinessDocs } from './BusinessDocs';
import {
    validateBusinessDocs,
    BusinessDocsFromJSON,
    BusinessDocsFromJSONTyped,
    BusinessDocsToJSON,
    BusinessDocsToJSONTyped,
} from './BusinessDocs';
import type { UserName } from './UserName';
import {
    validateUserName,
    UserNameFromJSON,
    UserNameFromJSONTyped,
    UserNameToJSON,
    UserNameToJSONTyped,
} from './UserName';
import type { MobileNoInfo } from './MobileNoInfo';
import {
    validateMobileNoInfo,
    MobileNoInfoFromJSON,
    MobileNoInfoFromJSONTyped,
    MobileNoInfoToJSON,
    MobileNoInfoToJSONTyped,
} from './MobileNoInfo';
import type { PicInfo } from './PicInfo';
import {
    validatePicInfo,
    PicInfoFromJSON,
    PicInfoFromJSONTyped,
    PicInfoToJSON,
    PicInfoToJSONTyped,
} from './PicInfo';
import type { AddressInfo } from './AddressInfo';
import {
    validateAddressInfo,
    AddressInfoFromJSON,
    AddressInfoFromJSONTyped,
    AddressInfoToJSON,
    AddressInfoToJSONTyped,
} from './AddressInfo';

/**
 * 
 * @export
 * @interface UpdateDivisionRequest
 */
export interface UpdateDivisionRequest {
    /**
     * Merchant identifier
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    merchantId: string;
    /**
     * Division identifier. Required when divisionIdType is INNER_ID
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    divisionId?: string;
    /**
     * Division name
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    divisionName: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof UpdateDivisionRequest
     */
    divisionAddress: AddressInfo;
    /**
     * Division description
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    divisionDescription?: string;
    /**
     * Division type
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    divisionType: UpdateDivisionRequestDivisionTypeEnum;
    /**
     * Division identifier type
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    divisionIdType: UpdateDivisionRequestDivisionIdTypeEnum;
    /**
     * External division identifier. Required when divisionIdType is EXTERNAL_ID
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    externalDivisionId?: string;
    /**
     * New external division identifier
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    newExternalDivisionId: string;
    /**
     * Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
     * @type {{ [key: string]: string; }}
     * @memberof UpdateDivisionRequest
     */
    logoUrlMap?: { [key: string]: string; };
    /**
     * Merchant category codes
     * @type {Array<string>}
     * @memberof UpdateDivisionRequest
     */
    mccCodes: Array<string>;
    /**
     * Extended information
     * @type {{ [key: string]: any; }}
     * @memberof UpdateDivisionRequest
     */
    extInfo: { [key: string]: any; };
    /**
     * API version flag. Use > 2 for new attributes
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    apiVersion?: string;
    /**
     * Business documents. Required when apiVersion > 2. "individu" entity can only use KTP and SIM. Other entities can use SIUP and NIB
     * @type {Array<BusinessDocs>}
     * @memberof UpdateDivisionRequest
     */
    businessDocs?: Array<BusinessDocs>;
    /**
     * Business entity type. Required when apiVersion > 2
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    businessEntity?: UpdateDivisionRequestBusinessEntityEnum;
    /**
     * Business end date, in format YYYY-MM-DD. Required when apiVersion > 2
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    businessEndDate?: string;
    /**
     * 
     * @type {UserName}
     * @memberof UpdateDivisionRequest
     */
    ownerName?: UserName;
    /**
     * 
     * @type {MobileNoInfo}
     * @memberof UpdateDivisionRequest
     */
    ownerPhoneNumber?: MobileNoInfo;
    /**
     * Owner identifier type. Required when apiVersion > 2
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    ownerIdType?: UpdateDivisionRequestOwnerIdTypeEnum;
    /**
     * Owner identifier number. Required when apiVersion > 2. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    ownerIdNo?: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof UpdateDivisionRequest
     */
    ownerAddress?: AddressInfo;
    /**
     * Director as a PIC of sub merchant. Required when apiVersion > 2
     * @type {Array<PicInfo>}
     * @memberof UpdateDivisionRequest
     */
    directorPics?: Array<PicInfo>;
    /**
     * Non director which become a PIC of sub merchant. Required when apiVersion > 2
     * @type {Array<PicInfo>}
     * @memberof UpdateDivisionRequest
     */
    nonDirectorPics?: Array<PicInfo>;
    /**
     * Size type. Required when apiVersion > 2
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    sizeType?: UpdateDivisionRequestSizeTypeEnum;
    /**
     * Flag if division is type PG
     * @type {string}
     * @memberof UpdateDivisionRequest
     */
    pgDivisionFlag?: UpdateDivisionRequestPgDivisionFlagEnum;
}


/**
 * @export
 */
export const UpdateDivisionRequestDivisionTypeEnum = {
    Region: 'REGION',
    Area: 'AREA',
    Branch: 'BRANCH',
    Outlet: 'OUTLET',
    Store: 'STORE',
    Kiosk: 'KIOSK',
    Stall: 'STALL',
    Counter: 'COUNTER',
    Booth: 'BOOTH',
    PointOfSale: 'POINT_OF_SALE',
    VendingMachine: 'VENDING_MACHINE'
} as const;
export type UpdateDivisionRequestDivisionTypeEnum = typeof UpdateDivisionRequestDivisionTypeEnum[keyof typeof UpdateDivisionRequestDivisionTypeEnum] | '';

/**
 * @export
 */
export const UpdateDivisionRequestDivisionIdTypeEnum = {
    InnerId: 'INNER_ID',
    ExternalId: 'EXTERNAL_ID'
} as const;
export type UpdateDivisionRequestDivisionIdTypeEnum = typeof UpdateDivisionRequestDivisionIdTypeEnum[keyof typeof UpdateDivisionRequestDivisionIdTypeEnum] | '';

/**
 * @export
 */
export const UpdateDivisionRequestBusinessEntityEnum = {
    Pt: 'pt',
    Cv: 'cv',
    Individu: 'individu',
    UsahaDagang: 'usaha_dagang',
    Yayasan: 'yayasan',
    Koperasi: 'koperasi'
} as const;
export type UpdateDivisionRequestBusinessEntityEnum = typeof UpdateDivisionRequestBusinessEntityEnum[keyof typeof UpdateDivisionRequestBusinessEntityEnum] | '';

/**
 * @export
 */
export const UpdateDivisionRequestOwnerIdTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Passport: 'PASSPORT',
    Siup: 'SIUP',
    Nib: 'NIB'
} as const;
export type UpdateDivisionRequestOwnerIdTypeEnum = typeof UpdateDivisionRequestOwnerIdTypeEnum[keyof typeof UpdateDivisionRequestOwnerIdTypeEnum] | '';

/**
 * @export
 */
export const UpdateDivisionRequestSizeTypeEnum = {
    Umi: 'UMI',
    Uke: 'UKE',
    Ume: 'UME',
    Ube: 'UBE',
    Ure: 'URE'
} as const;
export type UpdateDivisionRequestSizeTypeEnum = typeof UpdateDivisionRequestSizeTypeEnum[keyof typeof UpdateDivisionRequestSizeTypeEnum] | '';

/**
 * @export
 */
export const UpdateDivisionRequestPgDivisionFlagEnum = {
    True: 'true',
    False: 'false'
} as const;
export type UpdateDivisionRequestPgDivisionFlagEnum = typeof UpdateDivisionRequestPgDivisionFlagEnum[keyof typeof UpdateDivisionRequestPgDivisionFlagEnum] | '';


/**
 * Check if a given object implements the UpdateDivisionRequest interface.
 */
export function instanceOfUpdateDivisionRequest(value: object): value is UpdateDivisionRequest {
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('divisionName' in value) || value['divisionName'] === undefined) return false;
    if (!('divisionAddress' in value) || value['divisionAddress'] === undefined) return false;
    if (!('divisionType' in value) || value['divisionType'] === undefined) return false;
    if (!('divisionIdType' in value) || value['divisionIdType'] === undefined) return false;
    if (!('newExternalDivisionId' in value) || value['newExternalDivisionId'] === undefined) return false;
    if (!('mccCodes' in value) || value['mccCodes'] === undefined) return false;
    if (!('extInfo' in value) || value['extInfo'] === undefined) return false;
    return true;
}

export function UpdateDivisionRequestFromJSON(json: any): UpdateDivisionRequest {
    return UpdateDivisionRequestFromJSONTyped(json, false);
}

export function UpdateDivisionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateDivisionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'merchantId': json['merchantId'],
        'divisionId': json['divisionId'] == null ? undefined : json['divisionId'],
        'divisionName': json['divisionName'],
        'divisionAddress': AddressInfoFromJSON(json['divisionAddress']),
        'divisionDescription': json['divisionDescription'] == null ? undefined : json['divisionDescription'],
        'divisionType': json['divisionType'],
        'divisionIdType': json['divisionIdType'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'newExternalDivisionId': json['newExternalDivisionId'],
        'logoUrlMap': json['logoUrlMap'] == null ? undefined : json['logoUrlMap'],
        'mccCodes': json['mccCodes'],
        'extInfo': json['extInfo'],
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'businessDocs': json['businessDocs'] == null ? undefined : ((json['businessDocs'] as Array<any>).map(BusinessDocsFromJSON)),
        'businessEntity': json['businessEntity'] == null ? undefined : json['businessEntity'],
        'businessEndDate': json['businessEndDate'] == null ? undefined : json['businessEndDate'],
        'ownerName': json['ownerName'] == null ? undefined : UserNameFromJSON(json['ownerName']),
        'ownerPhoneNumber': json['ownerPhoneNumber'] == null ? undefined : MobileNoInfoFromJSON(json['ownerPhoneNumber']),
        'ownerIdType': json['ownerIdType'] == null ? undefined : json['ownerIdType'],
        'ownerIdNo': json['ownerIdNo'] == null ? undefined : json['ownerIdNo'],
        'ownerAddress': json['ownerAddress'] == null ? undefined : AddressInfoFromJSON(json['ownerAddress']),
        'directorPics': json['directorPics'] == null ? undefined : ((json['directorPics'] as Array<any>).map(PicInfoFromJSON)),
        'nonDirectorPics': json['nonDirectorPics'] == null ? undefined : ((json['nonDirectorPics'] as Array<any>).map(PicInfoFromJSON)),
        'sizeType': json['sizeType'] == null ? undefined : json['sizeType'],
        'pgDivisionFlag': json['pgDivisionFlag'] == null ? undefined : json['pgDivisionFlag'],
    };
}

export function UpdateDivisionRequestToJSON(json: any): UpdateDivisionRequest {
    return UpdateDivisionRequestToJSONTyped(json, false);
}

export function UpdateDivisionRequestToJSONTyped(value?: UpdateDivisionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'merchantId': value['merchantId'],
        'divisionId': value['divisionId'],
        'divisionName': value['divisionName'],
        'divisionAddress': AddressInfoToJSON(value['divisionAddress']),
        'divisionDescription': value['divisionDescription'],
        'divisionType': value['divisionType'],
        'divisionIdType': value['divisionIdType'],
        'externalDivisionId': value['externalDivisionId'],
        'newExternalDivisionId': value['newExternalDivisionId'],
        'logoUrlMap': value['logoUrlMap'],
        'mccCodes': value['mccCodes'],
        'extInfo': value['extInfo'],
        'apiVersion': value['apiVersion'],
        'businessDocs': value['businessDocs'] == null ? undefined : ((value['businessDocs'] as Array<any>).map(BusinessDocsToJSON)),
        'businessEntity': value['businessEntity'],
        'businessEndDate': value['businessEndDate'],
        'ownerName': UserNameToJSON(value['ownerName']),
        'ownerPhoneNumber': MobileNoInfoToJSON(value['ownerPhoneNumber']),
        'ownerIdType': value['ownerIdType'],
        'ownerIdNo': value['ownerIdNo'],
        'ownerAddress': AddressInfoToJSON(value['ownerAddress']),
        'directorPics': value['directorPics'] == null ? undefined : ((value['directorPics'] as Array<any>).map(PicInfoToJSON)),
        'nonDirectorPics': value['nonDirectorPics'] == null ? undefined : ((value['nonDirectorPics'] as Array<any>).map(PicInfoToJSON)),
        'sizeType': value['sizeType'],
        'pgDivisionFlag': value['pgDivisionFlag'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantId: {
        maxLength: 21,
    },
    divisionId: {
        maxLength: 21,
    },
    divisionName: {
        maxLength: 256,
    },
    divisionDescription: {
        maxLength: 1024,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    newExternalDivisionId: {
        maxLength: 64,
    },
    extInfo: {
    },
    apiVersion: {
        maxLength: 8,
    },
    businessEndDate: {
        maxLength: 10,
    },
}

export function validateUpdateDivisionRequest(value: UpdateDivisionRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionId', value.divisionId, propertyValidationAttributesMap['divisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionName', value.divisionName, propertyValidationAttributesMap['divisionName']));

    validationErrorContexts.push(...validateAddressInfo(value.divisionAddress));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionDescription', value.divisionDescription, propertyValidationAttributesMap['divisionDescription']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('newExternalDivisionId', value.newExternalDivisionId, propertyValidationAttributesMap['newExternalDivisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extInfo', value.extInfo, propertyValidationAttributesMap['extInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('apiVersion', value.apiVersion, propertyValidationAttributesMap['apiVersion']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('businessEndDate', value.businessEndDate, propertyValidationAttributesMap['businessEndDate']));

    validationErrorContexts.push(...validateUserName(value.ownerName));

    validationErrorContexts.push(...validateMobileNoInfo(value.ownerPhoneNumber));

    validationErrorContexts.push(...validateAddressInfo(value.ownerAddress));

    return validationErrorContexts;
}
