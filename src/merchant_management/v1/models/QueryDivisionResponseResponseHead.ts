/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface QueryDivisionResponseResponseHead
 */
export interface QueryDivisionResponseResponseHead {
    /**
     * API version
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    version?: string;
    /**
     * API interface
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    _function?: QueryDivisionResponseResponseHeadFunctionEnum;
    /**
     * Client ID provided by DANA, used to identify partner and application system
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    clientId?: string;
    /**
     * As a secret key of client. Assigned client secret during registration
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    clientSecret?: string;
    /**
     * Response time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    respTime?: string;
    /**
     * Request message ID
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    reqMsgId?: string;
    /**
     * Reserved for future implementation (Key/Value)
     * @type {string}
     * @memberof QueryDivisionResponseResponseHead
     */
    reserve?: string;
}


/**
 * @export
 */
export const QueryDivisionResponseResponseHeadFunctionEnum = {
    DanaMerchantDivisionQueryDivision: 'dana.merchant.division.queryDivision'
} as const;
export type QueryDivisionResponseResponseHeadFunctionEnum = typeof QueryDivisionResponseResponseHeadFunctionEnum[keyof typeof QueryDivisionResponseResponseHeadFunctionEnum] | '';


/**
 * Check if a given object implements the QueryDivisionResponseResponseHead interface.
 */
export function instanceOfQueryDivisionResponseResponseHead(value: object): value is QueryDivisionResponseResponseHead {
    return true;
}

export function QueryDivisionResponseResponseHeadFromJSON(json: any): QueryDivisionResponseResponseHead {
    return QueryDivisionResponseResponseHeadFromJSONTyped(json, false);
}

export function QueryDivisionResponseResponseHeadFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryDivisionResponseResponseHead {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['version'] == null ? undefined : json['version'],
        '_function': json['function'] == null ? undefined : json['function'],
        'clientId': json['clientId'] == null ? undefined : json['clientId'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'respTime': json['respTime'] == null ? undefined : json['respTime'],
        'reqMsgId': json['reqMsgId'] == null ? undefined : json['reqMsgId'],
        'reserve': json['reserve'] == null ? undefined : json['reserve'],
    };
}

export function QueryDivisionResponseResponseHeadToJSON(json: any): QueryDivisionResponseResponseHead {
    return QueryDivisionResponseResponseHeadToJSONTyped(json, false);
}

export function QueryDivisionResponseResponseHeadToJSONTyped(value?: QueryDivisionResponseResponseHead | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': value['version'],
        'function': value['_function'],
        'clientId': value['clientId'],
        'clientSecret': value['clientSecret'],
        'respTime': value['respTime'],
        'reqMsgId': value['reqMsgId'],
        'reserve': value['reserve'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    version: {
        maxLength: 8,
    },
    _function: {
        maxLength: 128,
    },
    clientId: {
        maxLength: 36,
    },
    clientSecret: {
        maxLength: 64,
    },
    respTime: {
        maxLength: 25,
    },
    reqMsgId: {
        maxLength: 64,
    },
    reserve: {
        maxLength: 256,
    },
}

export function validateQueryDivisionResponseResponseHead(value: QueryDivisionResponseResponseHead): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('version', value.version, propertyValidationAttributesMap['version']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('_function', value._function, propertyValidationAttributesMap['_function']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientId', value.clientId, propertyValidationAttributesMap['clientId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientSecret', value.clientSecret, propertyValidationAttributesMap['clientSecret']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('respTime', value.respTime, propertyValidationAttributesMap['respTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('reqMsgId', value.reqMsgId, propertyValidationAttributesMap['reqMsgId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('reserve', value.reserve, propertyValidationAttributesMap['reserve']));

    return validationErrorContexts;
}
