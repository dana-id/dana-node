/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { QueryDivisionResponseResponseBody } from './QueryDivisionResponseResponseBody';
import {
    validateQueryDivisionResponseResponseBody,
    QueryDivisionResponseResponseBodyFromJSON,
    QueryDivisionResponseResponseBodyFromJSONTyped,
    QueryDivisionResponseResponseBodyToJSON,
    QueryDivisionResponseResponseBodyToJSONTyped,
} from './QueryDivisionResponseResponseBody';
import type { QueryDivisionResponseResponseHead } from './QueryDivisionResponseResponseHead';
import {
    validateQueryDivisionResponseResponseHead,
    QueryDivisionResponseResponseHeadFromJSON,
    QueryDivisionResponseResponseHeadFromJSONTyped,
    QueryDivisionResponseResponseHeadToJSON,
    QueryDivisionResponseResponseHeadToJSONTyped,
} from './QueryDivisionResponseResponseHead';

/**
 * 
 * @export
 * @interface QueryDivisionResponseResponse
 */
export interface QueryDivisionResponseResponse {
    /**
     * 
     * @type {QueryDivisionResponseResponseHead}
     * @memberof QueryDivisionResponseResponse
     */
    head: QueryDivisionResponseResponseHead;
    /**
     * 
     * @type {QueryDivisionResponseResponseBody}
     * @memberof QueryDivisionResponseResponse
     */
    body: QueryDivisionResponseResponseBody;
}

/**
 * Check if a given object implements the QueryDivisionResponseResponse interface.
 */
export function instanceOfQueryDivisionResponseResponse(value: object): value is QueryDivisionResponseResponse {
    if (!('head' in value) || value['head'] === undefined) return false;
    if (!('body' in value) || value['body'] === undefined) return false;
    return true;
}

export function QueryDivisionResponseResponseFromJSON(json: any): QueryDivisionResponseResponse {
    return QueryDivisionResponseResponseFromJSONTyped(json, false);
}

export function QueryDivisionResponseResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryDivisionResponseResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'head': QueryDivisionResponseResponseHeadFromJSON(json['head']),
        'body': QueryDivisionResponseResponseBodyFromJSON(json['body']),
    };
}

export function QueryDivisionResponseResponseToJSON(json: any): QueryDivisionResponseResponse {
    return QueryDivisionResponseResponseToJSONTyped(json, false);
}

export function QueryDivisionResponseResponseToJSONTyped(value?: QueryDivisionResponseResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'head': QueryDivisionResponseResponseHeadToJSON(value['head']),
        'body': QueryDivisionResponseResponseBodyToJSON(value['body']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateQueryDivisionResponseResponse(value: QueryDivisionResponseResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateQueryDivisionResponseResponseHead(value.head));

    validationErrorContexts.push(...validateQueryDivisionResponseResponseBody(value.body));

    return validationErrorContexts;
}
