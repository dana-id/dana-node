/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { AddressInfo } from './AddressInfo';
import {
    validateAddressInfo,
    AddressInfoFromJSON,
    AddressInfoFromJSONTyped,
    AddressInfoToJSON,
    AddressInfoToJSONTyped,
} from './AddressInfo';

/**
 * 
 * @export
 * @interface DivisionResourceInfo
 */
export interface DivisionResourceInfo {
    /**
     * Division identifier
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    divisionId?: string;
    /**
     * Merchant identifier
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    merchantId?: string;
    /**
     * Parent role type
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    parentRoleType?: DivisionResourceInfoParentRoleTypeEnum;
    /**
     * 
     * @type {AddressInfo}
     * @memberof DivisionResourceInfo
     */
    contactAddress?: AddressInfo;
    /**
     * Division description
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    divisionDescription?: string;
    /**
     * Division type
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    divisionType?: DivisionResourceInfoDivisionTypeEnum;
    /**
     * Division name
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    divisionName?: string;
    /**
     * External division identifier
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    externalDivisionId?: string;
    /**
     * Flag if division is type PG
     * @type {string}
     * @memberof DivisionResourceInfo
     */
    pgDivisionFlag?: DivisionResourceInfoPgDivisionFlagEnum;
}


/**
 * @export
 */
export const DivisionResourceInfoParentRoleTypeEnum = {
    Merchant: 'MERCHANT',
    Division: 'DIVISION',
    ExternalDivision: 'EXTERNAL_DIVISION'
} as const;
export type DivisionResourceInfoParentRoleTypeEnum = typeof DivisionResourceInfoParentRoleTypeEnum[keyof typeof DivisionResourceInfoParentRoleTypeEnum] | '';

/**
 * @export
 */
export const DivisionResourceInfoDivisionTypeEnum = {
    Region: 'REGION',
    Area: 'AREA',
    Branch: 'BRANCH',
    Outlet: 'OUTLET',
    Store: 'STORE',
    Kiosk: 'KIOSK',
    Stall: 'STALL',
    Counter: 'COUNTER',
    Booth: 'BOOTH',
    PointOfSale: 'POINT_OF_SALE',
    VendingMachine: 'VENDING_MACHINE'
} as const;
export type DivisionResourceInfoDivisionTypeEnum = typeof DivisionResourceInfoDivisionTypeEnum[keyof typeof DivisionResourceInfoDivisionTypeEnum] | '';

/**
 * @export
 */
export const DivisionResourceInfoPgDivisionFlagEnum = {
    True: 'true',
    False: 'false'
} as const;
export type DivisionResourceInfoPgDivisionFlagEnum = typeof DivisionResourceInfoPgDivisionFlagEnum[keyof typeof DivisionResourceInfoPgDivisionFlagEnum] | '';


/**
 * Check if a given object implements the DivisionResourceInfo interface.
 */
export function instanceOfDivisionResourceInfo(value: object): value is DivisionResourceInfo {
    return true;
}

export function DivisionResourceInfoFromJSON(json: any): DivisionResourceInfo {
    return DivisionResourceInfoFromJSONTyped(json, false);
}

export function DivisionResourceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DivisionResourceInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'divisionId': json['divisionId'] == null ? undefined : json['divisionId'],
        'merchantId': json['merchantId'] == null ? undefined : json['merchantId'],
        'parentRoleType': json['parentRoleType'] == null ? undefined : json['parentRoleType'],
        'contactAddress': json['contactAddress'] == null ? undefined : AddressInfoFromJSON(json['contactAddress']),
        'divisionDescription': json['divisionDescription'] == null ? undefined : json['divisionDescription'],
        'divisionType': json['divisionType'] == null ? undefined : json['divisionType'],
        'divisionName': json['divisionName'] == null ? undefined : json['divisionName'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'pgDivisionFlag': json['pgDivisionFlag'] == null ? undefined : json['pgDivisionFlag'],
    };
}

export function DivisionResourceInfoToJSON(json: any): DivisionResourceInfo {
    return DivisionResourceInfoToJSONTyped(json, false);
}

export function DivisionResourceInfoToJSONTyped(value?: DivisionResourceInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'divisionId': value['divisionId'],
        'merchantId': value['merchantId'],
        'parentRoleType': value['parentRoleType'],
        'contactAddress': AddressInfoToJSON(value['contactAddress']),
        'divisionDescription': value['divisionDescription'],
        'divisionType': value['divisionType'],
        'divisionName': value['divisionName'],
        'externalDivisionId': value['externalDivisionId'],
        'pgDivisionFlag': value['pgDivisionFlag'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateDivisionResourceInfo(value: DivisionResourceInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateAddressInfo(value.contactAddress));

    return validationErrorContexts;
}
