/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { BusinessDocs } from './BusinessDocs';
import {
    validateBusinessDocs,
    BusinessDocsFromJSON,
    BusinessDocsFromJSONTyped,
    BusinessDocsToJSON,
    BusinessDocsToJSONTyped,
} from './BusinessDocs';
import type { UserName } from './UserName';
import {
    validateUserName,
    UserNameFromJSON,
    UserNameFromJSONTyped,
    UserNameToJSON,
    UserNameToJSONTyped,
} from './UserName';
import type { CreateDivisionRequestExtInfo } from './CreateDivisionRequestExtInfo';
import {
    validateCreateDivisionRequestExtInfo,
    CreateDivisionRequestExtInfoFromJSON,
    CreateDivisionRequestExtInfoFromJSONTyped,
    CreateDivisionRequestExtInfoToJSON,
    CreateDivisionRequestExtInfoToJSONTyped,
} from './CreateDivisionRequestExtInfo';
import type { MobileNoInfo } from './MobileNoInfo';
import {
    validateMobileNoInfo,
    MobileNoInfoFromJSON,
    MobileNoInfoFromJSONTyped,
    MobileNoInfoToJSON,
    MobileNoInfoToJSONTyped,
} from './MobileNoInfo';
import type { PicInfo } from './PicInfo';
import {
    validatePicInfo,
    PicInfoFromJSON,
    PicInfoFromJSONTyped,
    PicInfoToJSON,
    PicInfoToJSONTyped,
} from './PicInfo';
import type { AddressInfo } from './AddressInfo';
import {
    validateAddressInfo,
    AddressInfoFromJSON,
    AddressInfoFromJSONTyped,
    AddressInfoToJSON,
    AddressInfoToJSONTyped,
} from './AddressInfo';

/**
 * 
 * @export
 * @interface CreateDivisionRequest
 */
export interface CreateDivisionRequest {
    /**
     * API Version. As per the respective API reference. Must be > 2
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    apiVersion: string;
    /**
     * Merchant identifier
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    merchantId: string;
    /**
     * Parent division identifier. Required when parentRoleType is DIVISION or EXTERNAL_DIVISION. Length depends on parentRoleType - DIVISION (21 max), EXTERNAL_DIVISION (64 max)
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    parentDivisionId?: string;
    /**
     * Type of parent role
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    parentRoleType: CreateDivisionRequestParentRoleTypeEnum;
    /**
     * Division name
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    divisionName: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof CreateDivisionRequest
     */
    divisionAddress: AddressInfo;
    /**
     * Division description
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    divisionDescription?: string;
    /**
     * Division type
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    divisionType: CreateDivisionRequestDivisionTypeEnum;
    /**
     * External division identifier
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    externalDivisionId: string;
    /**
     * Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
     * @type {{ [key: string]: string; }}
     * @memberof CreateDivisionRequest
     */
    logoUrlMap?: { [key: string]: string; };
    /**
     * 
     * @type {CreateDivisionRequestExtInfo}
     * @memberof CreateDivisionRequest
     */
    extInfo: CreateDivisionRequestExtInfo;
    /**
     * Merchant category codes
     * @type {Array<string>}
     * @memberof CreateDivisionRequest
     */
    mccCodes: Array<string>;
    /**
     * Business documents. "individu" entity can only use KTP and SIM. Other entities can use SIUP and NIB
     * @type {Array<BusinessDocs>}
     * @memberof CreateDivisionRequest
     */
    businessDocs: Array<BusinessDocs>;
    /**
     * Business entity type
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    businessEntity: CreateDivisionRequestBusinessEntityEnum;
    /**
     * 
     * @type {UserName}
     * @memberof CreateDivisionRequest
     */
    ownerName: UserName;
    /**
     * 
     * @type {MobileNoInfo}
     * @memberof CreateDivisionRequest
     */
    ownerPhoneNumber: MobileNoInfo;
    /**
     * Owner identifier type
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    ownerIdType: CreateDivisionRequestOwnerIdTypeEnum;
    /**
     * Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    ownerIdNo: string;
    /**
     * 
     * @type {AddressInfo}
     * @memberof CreateDivisionRequest
     */
    ownerAddress: AddressInfo;
    /**
     * Director as a PIC of sub merchant
     * @type {Array<PicInfo>}
     * @memberof CreateDivisionRequest
     */
    directorPics: Array<PicInfo>;
    /**
     * Non director which become a PIC of sub merchant
     * @type {Array<PicInfo>}
     * @memberof CreateDivisionRequest
     */
    nonDirectorPics: Array<PicInfo>;
    /**
     * Size type
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    sizeType: CreateDivisionRequestSizeTypeEnum;
    /**
     * Flag if division is type PG
     * @type {string}
     * @memberof CreateDivisionRequest
     */
    pgDivisionFlag?: CreateDivisionRequestPgDivisionFlagEnum;
}


/**
 * @export
 */
export const CreateDivisionRequestParentRoleTypeEnum = {
    Merchant: 'MERCHANT',
    Division: 'DIVISION',
    ExternalDivision: 'EXTERNAL_DIVISION'
} as const;
export type CreateDivisionRequestParentRoleTypeEnum = typeof CreateDivisionRequestParentRoleTypeEnum[keyof typeof CreateDivisionRequestParentRoleTypeEnum] | '';

/**
 * @export
 */
export const CreateDivisionRequestDivisionTypeEnum = {
    Region: 'REGION',
    Area: 'AREA',
    Branch: 'BRANCH',
    Outlet: 'OUTLET',
    Store: 'STORE',
    Kiosk: 'KIOSK',
    Stall: 'STALL',
    Counter: 'COUNTER',
    Booth: 'BOOTH',
    PointOfSale: 'POINT_OF_SALE',
    VendingMachine: 'VENDING_MACHINE'
} as const;
export type CreateDivisionRequestDivisionTypeEnum = typeof CreateDivisionRequestDivisionTypeEnum[keyof typeof CreateDivisionRequestDivisionTypeEnum] | '';

/**
 * @export
 */
export const CreateDivisionRequestBusinessEntityEnum = {
    Pt: 'pt',
    Cv: 'cv',
    Individu: 'individu',
    UsahaDagang: 'usaha_dagang',
    Yayasan: 'yayasan',
    Koperasi: 'koperasi'
} as const;
export type CreateDivisionRequestBusinessEntityEnum = typeof CreateDivisionRequestBusinessEntityEnum[keyof typeof CreateDivisionRequestBusinessEntityEnum] | '';

/**
 * @export
 */
export const CreateDivisionRequestOwnerIdTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Passport: 'PASSPORT',
    Siup: 'SIUP',
    Nib: 'NIB'
} as const;
export type CreateDivisionRequestOwnerIdTypeEnum = typeof CreateDivisionRequestOwnerIdTypeEnum[keyof typeof CreateDivisionRequestOwnerIdTypeEnum] | '';

/**
 * @export
 */
export const CreateDivisionRequestSizeTypeEnum = {
    Umi: 'UMI',
    Uke: 'UKE',
    Ume: 'UME',
    Ube: 'UBE',
    Ure: 'URE'
} as const;
export type CreateDivisionRequestSizeTypeEnum = typeof CreateDivisionRequestSizeTypeEnum[keyof typeof CreateDivisionRequestSizeTypeEnum] | '';

/**
 * @export
 */
export const CreateDivisionRequestPgDivisionFlagEnum = {
    True: 'true',
    False: 'false'
} as const;
export type CreateDivisionRequestPgDivisionFlagEnum = typeof CreateDivisionRequestPgDivisionFlagEnum[keyof typeof CreateDivisionRequestPgDivisionFlagEnum] | '';


/**
 * Check if a given object implements the CreateDivisionRequest interface.
 */
export function instanceOfCreateDivisionRequest(value: object): value is CreateDivisionRequest {
    if (!('apiVersion' in value) || value['apiVersion'] === undefined) return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('parentRoleType' in value) || value['parentRoleType'] === undefined) return false;
    if (!('divisionName' in value) || value['divisionName'] === undefined) return false;
    if (!('divisionAddress' in value) || value['divisionAddress'] === undefined) return false;
    if (!('divisionType' in value) || value['divisionType'] === undefined) return false;
    if (!('externalDivisionId' in value) || value['externalDivisionId'] === undefined) return false;
    if (!('extInfo' in value) || value['extInfo'] === undefined) return false;
    if (!('mccCodes' in value) || value['mccCodes'] === undefined) return false;
    if (!('businessDocs' in value) || value['businessDocs'] === undefined) return false;
    if (!('businessEntity' in value) || value['businessEntity'] === undefined) return false;
    if (!('ownerName' in value) || value['ownerName'] === undefined) return false;
    if (!('ownerPhoneNumber' in value) || value['ownerPhoneNumber'] === undefined) return false;
    if (!('ownerIdType' in value) || value['ownerIdType'] === undefined) return false;
    if (!('ownerIdNo' in value) || value['ownerIdNo'] === undefined) return false;
    if (!('ownerAddress' in value) || value['ownerAddress'] === undefined) return false;
    if (!('directorPics' in value) || value['directorPics'] === undefined) return false;
    if (!('nonDirectorPics' in value) || value['nonDirectorPics'] === undefined) return false;
    if (!('sizeType' in value) || value['sizeType'] === undefined) return false;
    return true;
}

export function CreateDivisionRequestFromJSON(json: any): CreateDivisionRequest {
    return CreateDivisionRequestFromJSONTyped(json, false);
}

export function CreateDivisionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDivisionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'apiVersion': json['apiVersion'],
        'merchantId': json['merchantId'],
        'parentDivisionId': json['parentDivisionId'] == null ? undefined : json['parentDivisionId'],
        'parentRoleType': json['parentRoleType'],
        'divisionName': json['divisionName'],
        'divisionAddress': AddressInfoFromJSON(json['divisionAddress']),
        'divisionDescription': json['divisionDescription'] == null ? undefined : json['divisionDescription'],
        'divisionType': json['divisionType'],
        'externalDivisionId': json['externalDivisionId'],
        'logoUrlMap': json['logoUrlMap'] == null ? undefined : json['logoUrlMap'],
        'extInfo': CreateDivisionRequestExtInfoFromJSON(json['extInfo']),
        'mccCodes': json['mccCodes'],
        'businessDocs': ((json['businessDocs'] as Array<any>).map(BusinessDocsFromJSON)),
        'businessEntity': json['businessEntity'],
        'ownerName': UserNameFromJSON(json['ownerName']),
        'ownerPhoneNumber': MobileNoInfoFromJSON(json['ownerPhoneNumber']),
        'ownerIdType': json['ownerIdType'],
        'ownerIdNo': json['ownerIdNo'],
        'ownerAddress': AddressInfoFromJSON(json['ownerAddress']),
        'directorPics': ((json['directorPics'] as Array<any>).map(PicInfoFromJSON)),
        'nonDirectorPics': ((json['nonDirectorPics'] as Array<any>).map(PicInfoFromJSON)),
        'sizeType': json['sizeType'],
        'pgDivisionFlag': json['pgDivisionFlag'] == null ? undefined : json['pgDivisionFlag'],
    };
}

export function CreateDivisionRequestToJSON(json: any): CreateDivisionRequest {
    return CreateDivisionRequestToJSONTyped(json, false);
}

export function CreateDivisionRequestToJSONTyped(value?: CreateDivisionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'apiVersion': value['apiVersion'],
        'merchantId': value['merchantId'],
        'parentDivisionId': value['parentDivisionId'],
        'parentRoleType': value['parentRoleType'],
        'divisionName': value['divisionName'],
        'divisionAddress': AddressInfoToJSON(value['divisionAddress']),
        'divisionDescription': value['divisionDescription'],
        'divisionType': value['divisionType'],
        'externalDivisionId': value['externalDivisionId'],
        'logoUrlMap': value['logoUrlMap'],
        'extInfo': CreateDivisionRequestExtInfoToJSON(value['extInfo']),
        'mccCodes': value['mccCodes'],
        'businessDocs': ((value['businessDocs'] as Array<any>).map(BusinessDocsToJSON)),
        'businessEntity': value['businessEntity'],
        'ownerName': UserNameToJSON(value['ownerName']),
        'ownerPhoneNumber': MobileNoInfoToJSON(value['ownerPhoneNumber']),
        'ownerIdType': value['ownerIdType'],
        'ownerIdNo': value['ownerIdNo'],
        'ownerAddress': AddressInfoToJSON(value['ownerAddress']),
        'directorPics': ((value['directorPics'] as Array<any>).map(PicInfoToJSON)),
        'nonDirectorPics': ((value['nonDirectorPics'] as Array<any>).map(PicInfoToJSON)),
        'sizeType': value['sizeType'],
        'pgDivisionFlag': value['pgDivisionFlag'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    apiVersion: {
        maxLength: 8,
    },
    merchantId: {
        maxLength: 21,
    },
    divisionName: {
        maxLength: 256,
    },
    divisionDescription: {
        maxLength: 1024,
    },
    externalDivisionId: {
        maxLength: 64,
    },
}

export function validateCreateDivisionRequest(value: CreateDivisionRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('apiVersion', value.apiVersion, propertyValidationAttributesMap['apiVersion']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionName', value.divisionName, propertyValidationAttributesMap['divisionName']));

    validationErrorContexts.push(...validateAddressInfo(value.divisionAddress));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionDescription', value.divisionDescription, propertyValidationAttributesMap['divisionDescription']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));

    validationErrorContexts.push(...validateCreateDivisionRequestExtInfo(value.extInfo));

    validationErrorContexts.push(...validateUserName(value.ownerName));

    validationErrorContexts.push(...validateMobileNoInfo(value.ownerPhoneNumber));

    validationErrorContexts.push(...validateAddressInfo(value.ownerAddress));

    return validationErrorContexts;
}
