/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface QueryDivisionRequest
 */
export interface QueryDivisionRequest {
    /**
     * Merchant identifier. Required when divisionIdType is EXTERNAL_ID
     * @type {string}
     * @memberof QueryDivisionRequest
     */
    merchantId?: string;
    /**
     * Division identifier or external identifier. Length depends on divisionIdType - INNER_ID (21 max), EXTERNAL_ID (64 max)
     * @type {string}
     * @memberof QueryDivisionRequest
     */
    divisionId: string;
    /**
     * Division identifier type
     * @type {string}
     * @memberof QueryDivisionRequest
     */
    divisionIdType: QueryDivisionRequestDivisionIdTypeEnum;
}


/**
 * @export
 */
export const QueryDivisionRequestDivisionIdTypeEnum = {
    InnerId: 'INNER_ID',
    ExternalId: 'EXTERNAL_ID'
} as const;
export type QueryDivisionRequestDivisionIdTypeEnum = typeof QueryDivisionRequestDivisionIdTypeEnum[keyof typeof QueryDivisionRequestDivisionIdTypeEnum] | '';


/**
 * Check if a given object implements the QueryDivisionRequest interface.
 */
export function instanceOfQueryDivisionRequest(value: object): value is QueryDivisionRequest {
    if (!('divisionId' in value) || value['divisionId'] === undefined) return false;
    if (!('divisionIdType' in value) || value['divisionIdType'] === undefined) return false;
    return true;
}

export function QueryDivisionRequestFromJSON(json: any): QueryDivisionRequest {
    return QueryDivisionRequestFromJSONTyped(json, false);
}

export function QueryDivisionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryDivisionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'merchantId': json['merchantId'] == null ? undefined : json['merchantId'],
        'divisionId': json['divisionId'],
        'divisionIdType': json['divisionIdType'],
    };
}

export function QueryDivisionRequestToJSON(json: any): QueryDivisionRequest {
    return QueryDivisionRequestToJSONTyped(json, false);
}

export function QueryDivisionRequestToJSONTyped(value?: QueryDivisionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'merchantId': value['merchantId'],
        'divisionId': value['divisionId'],
        'divisionIdType': value['divisionIdType'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantId: {
        maxLength: 21,
    },
}

export function validateQueryDivisionRequest(value: QueryDivisionRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    return validationErrorContexts;
}
