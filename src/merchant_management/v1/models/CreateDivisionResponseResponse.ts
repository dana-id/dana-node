/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { CreateDivisionResponseResponseBody } from './CreateDivisionResponseResponseBody';
import {
    validateCreateDivisionResponseResponseBody,
    CreateDivisionResponseResponseBodyFromJSON,
    CreateDivisionResponseResponseBodyFromJSONTyped,
    CreateDivisionResponseResponseBodyToJSON,
    CreateDivisionResponseResponseBodyToJSONTyped,
} from './CreateDivisionResponseResponseBody';
import type { CreateDivisionResponseResponseHead } from './CreateDivisionResponseResponseHead';
import {
    validateCreateDivisionResponseResponseHead,
    CreateDivisionResponseResponseHeadFromJSON,
    CreateDivisionResponseResponseHeadFromJSONTyped,
    CreateDivisionResponseResponseHeadToJSON,
    CreateDivisionResponseResponseHeadToJSONTyped,
} from './CreateDivisionResponseResponseHead';

/**
 * 
 * @export
 * @interface CreateDivisionResponseResponse
 */
export interface CreateDivisionResponseResponse {
    /**
     * 
     * @type {CreateDivisionResponseResponseHead}
     * @memberof CreateDivisionResponseResponse
     */
    head: CreateDivisionResponseResponseHead;
    /**
     * 
     * @type {CreateDivisionResponseResponseBody}
     * @memberof CreateDivisionResponseResponse
     */
    body: CreateDivisionResponseResponseBody;
}

/**
 * Check if a given object implements the CreateDivisionResponseResponse interface.
 */
export function instanceOfCreateDivisionResponseResponse(value: object): value is CreateDivisionResponseResponse {
    if (!('head' in value) || value['head'] === undefined) return false;
    if (!('body' in value) || value['body'] === undefined) return false;
    return true;
}

export function CreateDivisionResponseResponseFromJSON(json: any): CreateDivisionResponseResponse {
    return CreateDivisionResponseResponseFromJSONTyped(json, false);
}

export function CreateDivisionResponseResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDivisionResponseResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'head': CreateDivisionResponseResponseHeadFromJSON(json['head']),
        'body': CreateDivisionResponseResponseBodyFromJSON(json['body']),
    };
}

export function CreateDivisionResponseResponseToJSON(json: any): CreateDivisionResponseResponse {
    return CreateDivisionResponseResponseToJSONTyped(json, false);
}

export function CreateDivisionResponseResponseToJSONTyped(value?: CreateDivisionResponseResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'head': CreateDivisionResponseResponseHeadToJSON(value['head']),
        'body': CreateDivisionResponseResponseBodyToJSON(value['body']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateCreateDivisionResponseResponse(value: CreateDivisionResponseResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateCreateDivisionResponseResponseHead(value.head));

    validationErrorContexts.push(...validateCreateDivisionResponseResponseBody(value.body));

    return validationErrorContexts;
}
