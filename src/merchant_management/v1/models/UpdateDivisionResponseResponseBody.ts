/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { ResultInfo } from './ResultInfo';
import {
    validateResultInfo,
    ResultInfoFromJSON,
    ResultInfoFromJSONTyped,
    ResultInfoToJSON,
    ResultInfoToJSONTyped,
} from './ResultInfo';

/**
 * 
 * @export
 * @interface UpdateDivisionResponseResponseBody
 */
export interface UpdateDivisionResponseResponseBody {
    /**
     * 
     * @type {ResultInfo}
     * @memberof UpdateDivisionResponseResponseBody
     */
    resultInfo: ResultInfo;
}

/**
 * Check if a given object implements the UpdateDivisionResponseResponseBody interface.
 */
export function instanceOfUpdateDivisionResponseResponseBody(value: object): value is UpdateDivisionResponseResponseBody {
    if (!('resultInfo' in value) || value['resultInfo'] === undefined) return false;
    return true;
}

export function UpdateDivisionResponseResponseBodyFromJSON(json: any): UpdateDivisionResponseResponseBody {
    return UpdateDivisionResponseResponseBodyFromJSONTyped(json, false);
}

export function UpdateDivisionResponseResponseBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateDivisionResponseResponseBody {
    if (json == null) {
        return json;
    }
    return {
        
        'resultInfo': ResultInfoFromJSON(json['resultInfo']),
    };
}

export function UpdateDivisionResponseResponseBodyToJSON(json: any): UpdateDivisionResponseResponseBody {
    return UpdateDivisionResponseResponseBodyToJSONTyped(json, false);
}

export function UpdateDivisionResponseResponseBodyToJSONTyped(value?: UpdateDivisionResponseResponseBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resultInfo': ResultInfoToJSON(value['resultInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateUpdateDivisionResponseResponseBody(value: UpdateDivisionResponseResponseBody): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateResultInfo(value.resultInfo));

    return validationErrorContexts;
}
