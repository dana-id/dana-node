/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { AccountInfo } from './AccountInfo';
import {
    validateAccountInfo,
    AccountInfoFromJSON,
    AccountInfoFromJSONTyped,
    AccountInfoToJSON,
    AccountInfoToJSONTyped,
} from './AccountInfo';

/**
 * 
 * @export
 * @interface BalanceInquiryResponse
 */
export interface BalanceInquiryResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof BalanceInquiryResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof BalanceInquiryResponse
     */
    responseMessage: string;
    /**
     * Transaction identifier on DANA system
     * @type {string}
     * @memberof BalanceInquiryResponse
     */
    referenceNo?: string;
    /**
     * Unique transaction identifier on partner system which assigned to each transaction<br>
     * Notes:<br>
     * If the partner receives a timeout or an unexpected response from DANA and partner expects to perform retry request to DANA, please use the partnerReferenceNo that is the same as the one used in the transaction request process before
     * 
     * @type {string}
     * @memberof BalanceInquiryResponse
     */
    partnerReferenceNo?: string;
    /**
     * Customer account name
     * @type {string}
     * @memberof BalanceInquiryResponse
     */
    name?: string;
    /**
     * Account information
     * @type {Array<AccountInfo>}
     * @memberof BalanceInquiryResponse
     */
    accountInfos?: Array<AccountInfo>;
    /**
     * Additional information
     * @type {object}
     * @memberof BalanceInquiryResponse
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the BalanceInquiryResponse interface.
 */
export function instanceOfBalanceInquiryResponse(value: object): value is BalanceInquiryResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    return true;
}

export function BalanceInquiryResponseFromJSON(json: any): BalanceInquiryResponse {
    return BalanceInquiryResponseFromJSONTyped(json, false);
}

export function BalanceInquiryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BalanceInquiryResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'referenceNo': json['referenceNo'] == null ? undefined : json['referenceNo'],
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'name': json['name'] == null ? undefined : json['name'],
        'accountInfos': json['accountInfos'] == null ? undefined : ((json['accountInfos'] as Array<any>).map(AccountInfoFromJSON)),
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function BalanceInquiryResponseToJSON(json: any): BalanceInquiryResponse {
    return BalanceInquiryResponseToJSONTyped(json, false);
}

export function BalanceInquiryResponseToJSONTyped(value?: BalanceInquiryResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'referenceNo': value['referenceNo'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'name': value['name'],
        'accountInfos': value['accountInfos'] == null ? undefined : ((value['accountInfos'] as Array<any>).map(AccountInfoToJSON)),
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    referenceNo: {
        maxLength: 64,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    name: {
        maxLength: 140,
    },
}

export function validateBalanceInquiryResponse(value: BalanceInquiryResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('referenceNo', value.referenceNo, propertyValidationAttributesMap['referenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('name', value.name, propertyValidationAttributesMap['name']));

    return validationErrorContexts;
}
