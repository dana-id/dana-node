/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { PayOptionDetailAdditionalInfo } from './PayOptionDetailAdditionalInfo';
import {
    validatePayOptionDetailAdditionalInfo,
    PayOptionDetailAdditionalInfoFromJSON,
    PayOptionDetailAdditionalInfoFromJSONTyped,
    PayOptionDetailAdditionalInfoToJSON,
    PayOptionDetailAdditionalInfoToJSONTyped,
} from './PayOptionDetailAdditionalInfo';

/**
 * 
 * @export
 * @interface PayOptionDetail
 */
export interface PayOptionDetail {
    /**
     * Payment Method, e.g. CREDIT_CARD
     * @type {string}
     * @memberof PayOptionDetail
     */
    payMethod: string;
    /**
     * Payment option which shows the provider of this payment e.g. CREDIT_CARD_VISA
     * @type {string}
     * @memberof PayOptionDetail
     */
    payOption: string;
    /**
     * Trans amount. Contains value and currency
     * @type {Money}
     * @memberof PayOptionDetail
     */
    transAmount?: Money;
    /**
     * Fee amount. Contains value and currency
     * @type {Money}
     * @memberof PayOptionDetail
     */
    feeAmount?: Money;
    /**
     * Card token used for this payment
     * @type {string}
     * @memberof PayOptionDetail
     */
    cardToken?: string;
    /**
     * Merchant token used for this payment
     * @type {string}
     * @memberof PayOptionDetail
     */
    merchantToken?: string;
    /**
     * 
     * @type {PayOptionDetailAdditionalInfo}
     * @memberof PayOptionDetail
     */
    additionalInfo?: PayOptionDetailAdditionalInfo;
}

/**
 * Check if a given object implements the PayOptionDetail interface.
 */
export function instanceOfPayOptionDetail(value: object): value is PayOptionDetail {
    if (!('payMethod' in value) || value['payMethod'] === undefined) return false;
    if (!('payOption' in value) || value['payOption'] === undefined) return false;
    return true;
}

export function PayOptionDetailFromJSON(json: any): PayOptionDetail {
    return PayOptionDetailFromJSONTyped(json, false);
}

export function PayOptionDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayOptionDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'payMethod': json['payMethod'],
        'payOption': json['payOption'],
        'transAmount': json['transAmount'] == null ? undefined : MoneyFromJSON(json['transAmount']),
        'feeAmount': json['feeAmount'] == null ? undefined : MoneyFromJSON(json['feeAmount']),
        'cardToken': json['cardToken'] == null ? undefined : json['cardToken'],
        'merchantToken': json['merchantToken'] == null ? undefined : json['merchantToken'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : PayOptionDetailAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function PayOptionDetailToJSON(json: any): PayOptionDetail {
    return PayOptionDetailToJSONTyped(json, false);
}

export function PayOptionDetailToJSONTyped(value?: PayOptionDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payMethod': value['payMethod'],
        'payOption': value['payOption'],
        'transAmount': MoneyToJSON(value['transAmount']),
        'feeAmount': MoneyToJSON(value['feeAmount']),
        'cardToken': value['cardToken'],
        'merchantToken': value['merchantToken'],
        'additionalInfo': PayOptionDetailAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payMethod: {
        maxLength: 64,
    },
    payOption: {
        maxLength: 64,
    },
    cardToken: {
        maxLength: 64,
    },
    merchantToken: {
        maxLength: 64,
    },
}

export function validatePayOptionDetail(value: PayOptionDetail): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payOption', value.payOption, propertyValidationAttributesMap['payOption']));

    validationErrorContexts.push(...validateMoney(value.transAmount));

    validationErrorContexts.push(...validateMoney(value.feeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cardToken', value.cardToken, propertyValidationAttributesMap['cardToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantToken', value.merchantToken, propertyValidationAttributesMap['merchantToken']));

    validationErrorContexts.push(...validatePayOptionDetailAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
