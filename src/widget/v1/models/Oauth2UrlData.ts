/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Oauth2UrlDataSeamlessData } from './Oauth2UrlDataSeamlessData';
import {
    validateOauth2UrlDataSeamlessData,
    Oauth2UrlDataSeamlessDataFromJSON,
    Oauth2UrlDataSeamlessDataFromJSONTyped,
    Oauth2UrlDataSeamlessDataToJSON,
    Oauth2UrlDataSeamlessDataToJSONTyped,
} from './Oauth2UrlDataSeamlessData';

/**
 * Data needed to construct Oauth2Url
 * @export
 * @interface Oauth2UrlData
 */
export interface Oauth2UrlData {
    /**
     * Identifier from merchant
     * @type {string}
     * @memberof Oauth2UrlData
     */
    externalId: string;
    /**
     * Merchant identifier that is unique per each merchant
     * @type {string}
     * @memberof Oauth2UrlData
     */
    merchantId: string;
    /**
     * Information of sub merchant identifier
     * @type {string}
     * @memberof Oauth2UrlData
     */
    subMerchantId?: string;
    /**
     * 
     * @type {Oauth2UrlDataSeamlessData}
     * @memberof Oauth2UrlData
     */
    seamlessData?: Oauth2UrlDataSeamlessData;
    /**
     * The scopes of the authorization
     * @type {Array<string>}
     * @memberof Oauth2UrlData
     */
    scopes?: Array<string>;
    /**
     * When user authorization is success, the user will be redirected to this URL
     * @type {string}
     * @memberof Oauth2UrlData
     */
    redirectUrl: string;
    /**
     * Random string for CSRF protection purposes
     * @type {string}
     * @memberof Oauth2UrlData
     */
    state?: string;
    /**
     * Service language code. ISO 639-1
     * @type {string}
     * @memberof Oauth2UrlData
     */
    lang?: string;
    /**
     * If value equals true, provider may enable registration process during binding. Default true
     * @type {string}
     * @memberof Oauth2UrlData
     */
    allowRegistration?: string;
}

/**
 * Check if a given object implements the Oauth2UrlData interface.
 */
export function instanceOfOauth2UrlData(value: object): value is Oauth2UrlData {
    if (!('externalId' in value) || value['externalId'] === undefined) return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('redirectUrl' in value) || value['redirectUrl'] === undefined) return false;
    return true;
}

export function Oauth2UrlDataFromJSON(json: any): Oauth2UrlData {
    return Oauth2UrlDataFromJSONTyped(json, false);
}

export function Oauth2UrlDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oauth2UrlData {
    if (json == null) {
        return json;
    }
    return {
        
        'externalId': json['externalId'],
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'seamlessData': json['seamlessData'] == null ? undefined : Oauth2UrlDataSeamlessDataFromJSON(json['seamlessData']),
        'scopes': json['scopes'] == null ? undefined : json['scopes'],
        'redirectUrl': json['redirectUrl'],
        'state': json['state'] == null ? undefined : json['state'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'allowRegistration': json['allowRegistration'] == null ? undefined : json['allowRegistration'],
    };
}

export function Oauth2UrlDataToJSON(json: any): Oauth2UrlData {
    return Oauth2UrlDataToJSONTyped(json, false);
}

export function Oauth2UrlDataToJSONTyped(value?: Oauth2UrlData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'externalId': value['externalId'],
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'seamlessData': Oauth2UrlDataSeamlessDataToJSON(value['seamlessData']),
        'scopes': value['scopes'],
        'redirectUrl': value['redirectUrl'],
        'state': value['state'],
        'lang': value['lang'],
        'allowRegistration': value['allowRegistration'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    externalId: {
        maxLength: 64,
    },
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 64,
    },
}

export function validateOauth2UrlData(value: Oauth2UrlData): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalId', value.externalId, propertyValidationAttributesMap['externalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...validateOauth2UrlDataSeamlessData(value.seamlessData));

    return validationErrorContexts;
}
