/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface UserResourceInfo
 */
export interface UserResourceInfo {
    /**
     * Type of user resource
     * @type {string}
     * @memberof UserResourceInfo
     */
    resourceType: UserResourceInfoResourceTypeEnum;
    /**
     * Resource value
     * @type {string}
     * @memberof UserResourceInfo
     */
    value: string;
}


/**
 * @export
 */
export const UserResourceInfoResourceTypeEnum = {
    Balance: 'BALANCE',
    TransactionUrl: 'TRANSACTION_URL',
    MaskDanaId: 'MASK_DANA_ID',
    TopupUrl: 'TOPUP_URL',
    Ott: 'OTT',
    UserKyc: 'USER_KYC'
} as const;
export type UserResourceInfoResourceTypeEnum = typeof UserResourceInfoResourceTypeEnum[keyof typeof UserResourceInfoResourceTypeEnum] | '';


/**
 * Check if a given object implements the UserResourceInfo interface.
 */
export function instanceOfUserResourceInfo(value: object): value is UserResourceInfo {
    if (!('resourceType' in value) || value['resourceType'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function UserResourceInfoFromJSON(json: any): UserResourceInfo {
    return UserResourceInfoFromJSONTyped(json, false);
}

export function UserResourceInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResourceInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'resourceType': json['resourceType'],
        'value': json['value'],
    };
}

export function UserResourceInfoToJSON(json: any): UserResourceInfo {
    return UserResourceInfoToJSONTyped(json, false);
}

export function UserResourceInfoToJSONTyped(value?: UserResourceInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resourceType': value['resourceType'],
        'value': value['value'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateUserResourceInfo(value: UserResourceInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
