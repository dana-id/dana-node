/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface EnvInfo
 */
export interface EnvInfo {
    /**
     * Session identifier
     * @type {string}
     * @memberof EnvInfo
     */
    sessionId?: string;
    /**
     * Token identifier
     * @type {string}
     * @memberof EnvInfo
     */
    tokenId?: string;
    /**
     * Website language
     * @type {string}
     * @memberof EnvInfo
     */
    websiteLanguage?: string;
    /**
     * Client IP address
     * @type {string}
     * @memberof EnvInfo
     */
    clientIp?: string;
    /**
     * Operating system type
     * @type {string}
     * @memberof EnvInfo
     */
    osType?: string;
    /**
     * App version
     * @type {string}
     * @memberof EnvInfo
     */
    appVersion?: string;
    /**
     * SDK version
     * @type {string}
     * @memberof EnvInfo
     */
    sdkVersion?: string;
    /**
     * The source platform is always independent payment gateway (IPG)
     * @type {string}
     * @memberof EnvInfo
     */
    sourcePlatform: EnvInfoSourcePlatformEnum;
    /**
     * Order operating system type
     * @type {string}
     * @memberof EnvInfo
     */
    orderOsType?: string;
    /**
     * Merchant App version
     * @type {string}
     * @memberof EnvInfo
     */
    merchantAppVersion?: string;
    /**
     * Terminal type. The enums:<br>
     * * APP - Mobile Application<br>
     * * WEB - Browser Web<br>
     * * WAP - Mobile Wap<br>
     * * SYSTEM - System Call<br>
     * 
     * @type {string}
     * @memberof EnvInfo
     */
    terminalType: EnvInfoTerminalTypeEnum;
    /**
     * Order terminal type. The enums:<br>
     * * APP - Mobile Application<br>
     * * WEB - Browser Web<br>
     * * WAP - Mobile Wap<br>
     * * SYSTEM - System Call<br>
     * 
     * @type {string}
     * @memberof EnvInfo
     */
    orderTerminalType?: EnvInfoOrderTerminalTypeEnum;
    /**
     * Extend information
     * @type {string}
     * @memberof EnvInfo
     */
    extendInfo?: string;
    /**
     * Unique identifier for partner was generated by DANA
     * @type {string}
     * @memberof EnvInfo
     */
    clientKey?: string;
}


/**
 * @export
 */
export const EnvInfoSourcePlatformEnum = {
    Ipg: 'IPG'
} as const;
export type EnvInfoSourcePlatformEnum = typeof EnvInfoSourcePlatformEnum[keyof typeof EnvInfoSourcePlatformEnum] | '';

/**
 * @export
 */
export const EnvInfoTerminalTypeEnum = {
    App: 'APP',
    Web: 'WEB',
    Wap: 'WAP',
    System: 'SYSTEM'
} as const;
export type EnvInfoTerminalTypeEnum = typeof EnvInfoTerminalTypeEnum[keyof typeof EnvInfoTerminalTypeEnum] | '';

/**
 * @export
 */
export const EnvInfoOrderTerminalTypeEnum = {
    App: 'APP',
    Web: 'WEB',
    Wap: 'WAP',
    System: 'SYSTEM'
} as const;
export type EnvInfoOrderTerminalTypeEnum = typeof EnvInfoOrderTerminalTypeEnum[keyof typeof EnvInfoOrderTerminalTypeEnum] | '';


/**
 * Check if a given object implements the EnvInfo interface.
 */
export function instanceOfEnvInfo(value: object): value is EnvInfo {
    if (!('sourcePlatform' in value) || value['sourcePlatform'] === undefined) return false;
    if (!('terminalType' in value) || value['terminalType'] === undefined) return false;
    return true;
}

export function EnvInfoFromJSON(json: any): EnvInfo {
    return EnvInfoFromJSONTyped(json, false);
}

export function EnvInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'tokenId': json['tokenId'] == null ? undefined : json['tokenId'],
        'websiteLanguage': json['websiteLanguage'] == null ? undefined : json['websiteLanguage'],
        'clientIp': json['clientIp'] == null ? undefined : json['clientIp'],
        'osType': json['osType'] == null ? undefined : json['osType'],
        'appVersion': json['appVersion'] == null ? undefined : json['appVersion'],
        'sdkVersion': json['sdkVersion'] == null ? undefined : json['sdkVersion'],
        'sourcePlatform': json['sourcePlatform'],
        'orderOsType': json['orderOsType'] == null ? undefined : json['orderOsType'],
        'merchantAppVersion': json['merchantAppVersion'] == null ? undefined : json['merchantAppVersion'],
        'terminalType': json['terminalType'],
        'orderTerminalType': json['orderTerminalType'] == null ? undefined : json['orderTerminalType'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'clientKey': json['clientKey'] == null ? undefined : json['clientKey'],
    };
}

export function EnvInfoToJSON(json: any): EnvInfo {
    return EnvInfoToJSONTyped(json, false);
}

export function EnvInfoToJSONTyped(value?: EnvInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sessionId': value['sessionId'],
        'tokenId': value['tokenId'],
        'websiteLanguage': value['websiteLanguage'],
        'clientIp': value['clientIp'],
        'osType': value['osType'],
        'appVersion': value['appVersion'],
        'sdkVersion': value['sdkVersion'],
        'sourcePlatform': value['sourcePlatform'],
        'orderOsType': value['orderOsType'],
        'merchantAppVersion': value['merchantAppVersion'],
        'terminalType': value['terminalType'],
        'orderTerminalType': value['orderTerminalType'],
        'extendInfo': value['extendInfo'],
        'clientKey': value['clientKey'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    sessionId: {
        maxLength: 128,
    },
    tokenId: {
        maxLength: 128,
    },
    websiteLanguage: {
        maxLength: 16,
    },
    clientIp: {
        maxLength: 32,
    },
    osType: {
        maxLength: 128,
    },
    appVersion: {
        maxLength: 128,
    },
    sdkVersion: {
        maxLength: 128,
    },
    sourcePlatform: {
        maxLength: 32,
    },
    orderOsType: {
        maxLength: 128,
    },
    merchantAppVersion: {
        maxLength: 128,
    },
    terminalType: {
        maxLength: 32,
    },
    orderTerminalType: {
        maxLength: 32,
    },
    extendInfo: {
        maxLength: 4096,
    },
    clientKey: {
        maxLength: 64,
    },
}

export function validateEnvInfo(value: EnvInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('tokenId', value.tokenId, propertyValidationAttributesMap['tokenId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('websiteLanguage', value.websiteLanguage, propertyValidationAttributesMap['websiteLanguage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientIp', value.clientIp, propertyValidationAttributesMap['clientIp']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('osType', value.osType, propertyValidationAttributesMap['osType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('appVersion', value.appVersion, propertyValidationAttributesMap['appVersion']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sdkVersion', value.sdkVersion, propertyValidationAttributesMap['sdkVersion']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('sourcePlatform', value.sourcePlatform, propertyValidationAttributesMap['sourcePlatform']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('orderOsType', value.orderOsType, propertyValidationAttributesMap['orderOsType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantAppVersion', value.merchantAppVersion, propertyValidationAttributesMap['merchantAppVersion']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('terminalType', value.terminalType, propertyValidationAttributesMap['terminalType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('orderTerminalType', value.orderTerminalType, propertyValidationAttributesMap['orderTerminalType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('clientKey', value.clientKey, propertyValidationAttributesMap['clientKey']));

    return validationErrorContexts;
}
