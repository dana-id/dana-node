/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * Information about the refund promotion that was applied
 * @export
 * @interface RefundPromoInfo
 */
export interface RefundPromoInfo {
    /**
     * Promotion identifier
     * @type {string}
     * @memberof RefundPromoInfo
     */
    promoId: string;
    /**
     * Promotion name
     * @type {string}
     * @memberof RefundPromoInfo
     */
    promoName: string;
    /**
     * Type of promotion
     * @type {string}
     * @memberof RefundPromoInfo
     */
    promoType: RefundPromoInfoPromoTypeEnum;
    /**
     * Refund amount from this promotion. Contains value (amount including cents) and currency (code based on ISO)
     * @type {Money}
     * @memberof RefundPromoInfo
     */
    refundAmount: Money;
}


/**
 * @export
 */
export const RefundPromoInfoPromoTypeEnum = {
    CashBack: 'CASH_BACK',
    Discount: 'DISCOUNT',
    Voucher: 'VOUCHER',
    Point: 'POINT'
} as const;
export type RefundPromoInfoPromoTypeEnum = typeof RefundPromoInfoPromoTypeEnum[keyof typeof RefundPromoInfoPromoTypeEnum];


/**
 * Check if a given object implements the RefundPromoInfo interface.
 */
export function instanceOfRefundPromoInfo(value: object): value is RefundPromoInfo {
    if (!('promoId' in value) || value['promoId'] === undefined) return false;
    if (!('promoName' in value) || value['promoName'] === undefined) return false;
    if (!('promoType' in value) || value['promoType'] === undefined) return false;
    if (!('refundAmount' in value) || value['refundAmount'] === undefined) return false;
    return true;
}

export function RefundPromoInfoFromJSON(json: any): RefundPromoInfo {
    return RefundPromoInfoFromJSONTyped(json, false);
}

export function RefundPromoInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundPromoInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'promoId': json['promoId'],
        'promoName': json['promoName'],
        'promoType': json['promoType'],
        'refundAmount': MoneyFromJSON(json['refundAmount']),
    };
}

export function RefundPromoInfoToJSON(json: any): RefundPromoInfo {
    return RefundPromoInfoToJSONTyped(json, false);
}

export function RefundPromoInfoToJSONTyped(value?: RefundPromoInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'promoId': value['promoId'],
        'promoName': value['promoName'],
        'promoType': value['promoType'],
        'refundAmount': MoneyToJSON(value['refundAmount']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    promoId: {
        maxLength: 128,
    },
    promoName: {
        maxLength: 128,
    },
}

export function validateRefundPromoInfo(value: RefundPromoInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoId', value.promoId, propertyValidationAttributesMap['promoId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoName', value.promoName, propertyValidationAttributesMap['promoName']));

    validationErrorContexts.push(...validateMoney(value.refundAmount));

    return validationErrorContexts;
}
