/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Order } from './Order';
import {
    validateOrder,
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
    OrderToJSONTyped,
} from './Order';
import type { ServiceInfo } from './ServiceInfo';
import {
    validateServiceInfo,
    ServiceInfoFromJSON,
    ServiceInfoFromJSONTyped,
    ServiceInfoToJSON,
    ServiceInfoToJSONTyped,
} from './ServiceInfo';
import type { EnvInfo } from './EnvInfo';
import {
    validateEnvInfo,
    EnvInfoFromJSON,
    EnvInfoFromJSONTyped,
    EnvInfoToJSON,
    EnvInfoToJSONTyped,
} from './EnvInfo';

/**
 * 
 * @export
 * @interface WidgetPaymentRequestAdditionalInfo
 */
export interface WidgetPaymentRequestAdditionalInfo {
    /**
     * Additional information of deeplink checkout URL. For Mini Program, DANA will treat as false
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    supportDeepLinkCheckoutUrl?: string;
    /**
     * Additional information of user's phone number
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    phoneNumber?: string;
    /**
     * Additional information of public user's identifier
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    publicUserId?: string;
    /**
     * Additional information of product code
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    productCode: string;
    /**
     * 
     * @type {ServiceInfo}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    serviceInfo?: ServiceInfo;
    /**
     * 
     * @type {Order}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    order: Order;
    /**
     * Additional information of merchant category code. This parameter is used to identify the type of business in which a merchant is engaged.
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    mcc: string;
    /**
     * 
     * @type {EnvInfo}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    envInfo: EnvInfo;
    /**
     * Additional information of extend
     * @type {string}
     * @memberof WidgetPaymentRequestAdditionalInfo
     */
    extendInfo?: string;
}

/**
 * Check if a given object implements the WidgetPaymentRequestAdditionalInfo interface.
 */
export function instanceOfWidgetPaymentRequestAdditionalInfo(value: object): value is WidgetPaymentRequestAdditionalInfo {
    if (!('productCode' in value) || value['productCode'] === undefined) return false;
    if (!('order' in value) || value['order'] === undefined) return false;
    if (!('mcc' in value) || value['mcc'] === undefined) return false;
    if (!('envInfo' in value) || value['envInfo'] === undefined) return false;
    return true;
}

export function WidgetPaymentRequestAdditionalInfoFromJSON(json: any): WidgetPaymentRequestAdditionalInfo {
    return WidgetPaymentRequestAdditionalInfoFromJSONTyped(json, false);
}

export function WidgetPaymentRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetPaymentRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'supportDeepLinkCheckoutUrl': json['supportDeepLinkCheckoutUrl'] == null ? undefined : json['supportDeepLinkCheckoutUrl'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'publicUserId': json['publicUserId'] == null ? undefined : json['publicUserId'],
        'productCode': json['productCode'],
        'serviceInfo': json['serviceInfo'] == null ? undefined : ServiceInfoFromJSON(json['serviceInfo']),
        'order': OrderFromJSON(json['order']),
        'mcc': json['mcc'],
        'envInfo': EnvInfoFromJSON(json['envInfo']),
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}

export function WidgetPaymentRequestAdditionalInfoToJSON(json: any): WidgetPaymentRequestAdditionalInfo {
    return WidgetPaymentRequestAdditionalInfoToJSONTyped(json, false);
}

export function WidgetPaymentRequestAdditionalInfoToJSONTyped(value?: WidgetPaymentRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'supportDeepLinkCheckoutUrl': value['supportDeepLinkCheckoutUrl'],
        'phoneNumber': value['phoneNumber'],
        'publicUserId': value['publicUserId'],
        'productCode': value['productCode'],
        'serviceInfo': ServiceInfoToJSON(value['serviceInfo']),
        'order': OrderToJSON(value['order']),
        'mcc': value['mcc'],
        'envInfo': EnvInfoToJSON(value['envInfo']),
        'extendInfo': value['extendInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    supportDeepLinkCheckoutUrl: {
        maxLength: 64,
    },
    phoneNumber: {
        maxLength: 64,
    },
    publicUserId: {
        maxLength: 64,
    },
    productCode: {
        maxLength: 32,
    },
    mcc: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validateWidgetPaymentRequestAdditionalInfo(value: WidgetPaymentRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('supportDeepLinkCheckoutUrl', value.supportDeepLinkCheckoutUrl, propertyValidationAttributesMap['supportDeepLinkCheckoutUrl']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('phoneNumber', value.phoneNumber, propertyValidationAttributesMap['phoneNumber']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('publicUserId', value.publicUserId, propertyValidationAttributesMap['publicUserId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('productCode', value.productCode, propertyValidationAttributesMap['productCode']));

    validationErrorContexts.push(...validateServiceInfo(value.serviceInfo));

    validationErrorContexts.push(...validateOrder(value.order));

    validationErrorContexts.push(...ValidationUtil.validateProperty('mcc', value.mcc, propertyValidationAttributesMap['mcc']));

    validationErrorContexts.push(...validateEnvInfo(value.envInfo));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
