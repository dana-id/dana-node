/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface PayOptionDetailAdditionalInfo
 */
export interface PayOptionDetailAdditionalInfo {
    /**
     * Top up and pay
     * @type {boolean}
     * @memberof PayOptionDetailAdditionalInfo
     */
    topupAndPay?: boolean;
    /**
     * Number account of payer
     * @type {string}
     * @memberof PayOptionDetailAdditionalInfo
     */
    payerAccountNo?: string;
    /**
     * Information save card after payment process
     * @type {boolean}
     * @memberof PayOptionDetailAdditionalInfo
     */
    saveCardAfterPay?: boolean;
    /**
     * Information of channel
     * @type {string}
     * @memberof PayOptionDetailAdditionalInfo
     */
    channelInfo?: string;
    /**
     * Information of issuing country
     * @type {string}
     * @memberof PayOptionDetailAdditionalInfo
     */
    issuingCountry?: string;
    /**
     * Type of asset
     * @type {string}
     * @memberof PayOptionDetailAdditionalInfo
     */
    assetType?: string;
    /**
     * Extend information
     * @type {string}
     * @memberof PayOptionDetailAdditionalInfo
     */
    extendInfo?: string;
}

/**
 * Check if a given object implements the PayOptionDetailAdditionalInfo interface.
 */
export function instanceOfPayOptionDetailAdditionalInfo(value: object): value is PayOptionDetailAdditionalInfo {
    return true;
}

export function PayOptionDetailAdditionalInfoFromJSON(json: any): PayOptionDetailAdditionalInfo {
    return PayOptionDetailAdditionalInfoFromJSONTyped(json, false);
}

export function PayOptionDetailAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayOptionDetailAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'topupAndPay': json['topupAndPay'] == null ? undefined : json['topupAndPay'],
        'payerAccountNo': json['payerAccountNo'] == null ? undefined : json['payerAccountNo'],
        'saveCardAfterPay': json['saveCardAfterPay'] == null ? undefined : json['saveCardAfterPay'],
        'channelInfo': json['channelInfo'] == null ? undefined : json['channelInfo'],
        'issuingCountry': json['issuingCountry'] == null ? undefined : json['issuingCountry'],
        'assetType': json['assetType'] == null ? undefined : json['assetType'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}

export function PayOptionDetailAdditionalInfoToJSON(json: any): PayOptionDetailAdditionalInfo {
    return PayOptionDetailAdditionalInfoToJSONTyped(json, false);
}

export function PayOptionDetailAdditionalInfoToJSONTyped(value?: PayOptionDetailAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'topupAndPay': value['topupAndPay'],
        'payerAccountNo': value['payerAccountNo'],
        'saveCardAfterPay': value['saveCardAfterPay'],
        'channelInfo': value['channelInfo'],
        'issuingCountry': value['issuingCountry'],
        'assetType': value['assetType'],
        'extendInfo': value['extendInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payerAccountNo: {
        maxLength: 64,
    },
    channelInfo: {
        maxLength: 4096,
    },
    issuingCountry: {
        maxLength: 8,
    },
    assetType: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validatePayOptionDetailAdditionalInfo(value: PayOptionDetailAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payerAccountNo', value.payerAccountNo, propertyValidationAttributesMap['payerAccountNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('channelInfo', value.channelInfo, propertyValidationAttributesMap['channelInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('issuingCountry', value.issuingCountry, propertyValidationAttributesMap['issuingCountry']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('assetType', value.assetType, propertyValidationAttributesMap['assetType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
