/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface QueryUserProfileRequest
 */
export interface QueryUserProfileRequest {
    /**
     * The resource type list that the merchant server wants to get from DANA
     * @type {Array<string>}
     * @memberof QueryUserProfileRequest
     */
    userResources: Array<QueryUserProfileRequestUserResourcesEnum>;
}


/**
 * @export
 */
export const QueryUserProfileRequestUserResourcesEnum = {
    Balance: 'BALANCE',
    TransactionUrl: 'TRANSACTION_URL',
    MaskDanaId: 'MASK_DANA_ID',
    TopupUrl: 'TOPUP_URL',
    Ott: 'OTT',
    UserKyc: 'USER_KYC'
} as const;
export type QueryUserProfileRequestUserResourcesEnum = typeof QueryUserProfileRequestUserResourcesEnum[keyof typeof QueryUserProfileRequestUserResourcesEnum] | '';


/**
 * Check if a given object implements the QueryUserProfileRequest interface.
 */
export function instanceOfQueryUserProfileRequest(value: object): value is QueryUserProfileRequest {
    if (!('userResources' in value) || value['userResources'] === undefined) return false;
    return true;
}

export function QueryUserProfileRequestFromJSON(json: any): QueryUserProfileRequest {
    return QueryUserProfileRequestFromJSONTyped(json, false);
}

export function QueryUserProfileRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryUserProfileRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'userResources': json['userResources'],
    };
}

export function QueryUserProfileRequestToJSON(json: any): QueryUserProfileRequest {
    return QueryUserProfileRequestToJSONTyped(json, false);
}

export function QueryUserProfileRequestToJSONTyped(value?: QueryUserProfileRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userResources': value['userResources'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    userResources: {
        minItems: 1,
        uniqueItems: false,
    },
}

export function validateQueryUserProfileRequest(value: QueryUserProfileRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('userResources', value.userResources, propertyValidationAttributesMap['userResources']));

    return validationErrorContexts;
}
