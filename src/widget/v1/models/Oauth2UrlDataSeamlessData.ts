/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Option for binding process.Please refer sample below to know how to include seamlessData
 * @export
 * @interface Oauth2UrlDataSeamlessData
 */
export interface Oauth2UrlDataSeamlessData {
    /**
     * Userâ€™s bizScenario
     * @type {string}
     * @memberof Oauth2UrlDataSeamlessData
     */
    bizScenario?: string;
    /**
     * User's phone number. If this field is filled in, the user must log in with the number that has been included
     * @type {string}
     * @memberof Oauth2UrlDataSeamlessData
     */
    mobileNumber?: string;
    /**
     * Value which states that the mobile number that has been included in seamlessData has verified ownership and does not require OTP verification by the provider, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof Oauth2UrlDataSeamlessData
     */
    verifiedTime?: string;
    /**
     * User identifier on partner application
     * @type {string}
     * @memberof Oauth2UrlDataSeamlessData
     */
    externalUid?: string;
    /**
     * User's device identifier
     * @type {string}
     * @memberof Oauth2UrlDataSeamlessData
     */
    deviceId?: string;
    /**
     * Identifier to differentiate seamless registration flow. The possible values are true or false
     * @type {boolean}
     * @memberof Oauth2UrlDataSeamlessData
     */
    skipRegisterConsult?: boolean;
}

/**
 * Check if a given object implements the Oauth2UrlDataSeamlessData interface.
 */
export function instanceOfOauth2UrlDataSeamlessData(value: object): value is Oauth2UrlDataSeamlessData {
    return true;
}

export function Oauth2UrlDataSeamlessDataFromJSON(json: any): Oauth2UrlDataSeamlessData {
    return Oauth2UrlDataSeamlessDataFromJSONTyped(json, false);
}

export function Oauth2UrlDataSeamlessDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oauth2UrlDataSeamlessData {
    if (json == null) {
        return json;
    }
    return {
        
        'bizScenario': json['bizScenario'] == null ? undefined : json['bizScenario'],
        'mobileNumber': json['mobileNumber'] == null ? undefined : json['mobileNumber'],
        'verifiedTime': json['verifiedTime'] == null ? undefined : json['verifiedTime'],
        'externalUid': json['externalUid'] == null ? undefined : json['externalUid'],
        'deviceId': json['deviceId'] == null ? undefined : json['deviceId'],
        'skipRegisterConsult': json['skipRegisterConsult'] == null ? undefined : json['skipRegisterConsult'],
    };
}

export function Oauth2UrlDataSeamlessDataToJSON(json: any): Oauth2UrlDataSeamlessData {
    return Oauth2UrlDataSeamlessDataToJSONTyped(json, false);
}

export function Oauth2UrlDataSeamlessDataToJSONTyped(value?: Oauth2UrlDataSeamlessData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bizScenario': value['bizScenario'],
        'mobileNumber': value['mobileNumber'],
        'verifiedTime': value['verifiedTime'],
        'externalUid': value['externalUid'],
        'deviceId': value['deviceId'],
        'skipRegisterConsult': value['skipRegisterConsult'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateOauth2UrlDataSeamlessData(value: Oauth2UrlDataSeamlessData): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
