/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface AmountDetail
 */
export interface AmountDetail {
    /**
     * Order amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    orderAmount: Money;
    /**
     * Pay amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    payAmount?: Money;
    /**
     * Void amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    voidAmount?: Money;
    /**
     * Confirm amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    confirmAmount?: Money;
    /**
     * Refund amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    refundAmount?: Money;
    /**
     * Chargeback amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    chargebackAmount?: Money;
    /**
     * Charge amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof AmountDetail
     */
    chargeAmount?: Money;
}

/**
 * Check if a given object implements the AmountDetail interface.
 */
export function instanceOfAmountDetail(value: object): value is AmountDetail {
    if (!('orderAmount' in value) || value['orderAmount'] === undefined) return false;
    return true;
}

export function AmountDetailFromJSON(json: any): AmountDetail {
    return AmountDetailFromJSONTyped(json, false);
}

export function AmountDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): AmountDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'orderAmount': MoneyFromJSON(json['orderAmount']),
        'payAmount': json['payAmount'] == null ? undefined : MoneyFromJSON(json['payAmount']),
        'voidAmount': json['voidAmount'] == null ? undefined : MoneyFromJSON(json['voidAmount']),
        'confirmAmount': json['confirmAmount'] == null ? undefined : MoneyFromJSON(json['confirmAmount']),
        'refundAmount': json['refundAmount'] == null ? undefined : MoneyFromJSON(json['refundAmount']),
        'chargebackAmount': json['chargebackAmount'] == null ? undefined : MoneyFromJSON(json['chargebackAmount']),
        'chargeAmount': json['chargeAmount'] == null ? undefined : MoneyFromJSON(json['chargeAmount']),
    };
}

export function AmountDetailToJSON(json: any): AmountDetail {
    return AmountDetailToJSONTyped(json, false);
}

export function AmountDetailToJSONTyped(value?: AmountDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'orderAmount': MoneyToJSON(value['orderAmount']),
        'payAmount': MoneyToJSON(value['payAmount']),
        'voidAmount': MoneyToJSON(value['voidAmount']),
        'confirmAmount': MoneyToJSON(value['confirmAmount']),
        'refundAmount': MoneyToJSON(value['refundAmount']),
        'chargebackAmount': MoneyToJSON(value['chargebackAmount']),
        'chargeAmount': MoneyToJSON(value['chargeAmount']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateAmountDetail(value: AmountDetail): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateMoney(value.orderAmount));

    validationErrorContexts.push(...validateMoney(value.payAmount));

    validationErrorContexts.push(...validateMoney(value.voidAmount));

    validationErrorContexts.push(...validateMoney(value.confirmAmount));

    validationErrorContexts.push(...validateMoney(value.refundAmount));

    validationErrorContexts.push(...validateMoney(value.chargebackAmount));

    validationErrorContexts.push(...validateMoney(value.chargeAmount));

    return validationErrorContexts;
}
