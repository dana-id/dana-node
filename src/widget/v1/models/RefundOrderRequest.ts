/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { RefundOrderRequestAdditionalInfo } from './RefundOrderRequestAdditionalInfo';
import {
    validateRefundOrderRequestAdditionalInfo,
    RefundOrderRequestAdditionalInfoFromJSON,
    RefundOrderRequestAdditionalInfoFromJSONTyped,
    RefundOrderRequestAdditionalInfoToJSON,
    RefundOrderRequestAdditionalInfoToJSONTyped,
} from './RefundOrderRequestAdditionalInfo';

/**
 * 
 * @export
 * @interface RefundOrderRequest
 */
export interface RefundOrderRequest {
    /**
     * Merchant identifier that is unique per each merchant
     * @type {string}
     * @memberof RefundOrderRequest
     */
    merchantId: string;
    /**
     * Information of sub merchant identifier
     * @type {string}
     * @memberof RefundOrderRequest
     */
    subMerchantId?: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof RefundOrderRequest
     */
    originalReferenceNo?: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof RefundOrderRequest
     */
    originalPartnerReferenceNo: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof RefundOrderRequest
     */
    originalExternalId?: string;
    /**
     * DANA's capture identifier. Use to refund the corresponding capture order
     * @type {string}
     * @memberof RefundOrderRequest
     */
    originalCaptureNo?: string;
    /**
     * Reference number from merchant for the refund
     * @type {string}
     * @memberof RefundOrderRequest
     */
    partnerRefundNo: string;
    /**
     * Refund amount. Contains two sub-fields - 1. Value (Transaction amount, including the cents) and 2. Currency (Currency code based on ISO)
     * @type {Money}
     * @memberof RefundOrderRequest
     */
    refundAmount: Money;
    /**
     * Store identifier to indicate to which store this payment belongs to
     * @type {string}
     * @memberof RefundOrderRequest
     */
    externalStoreId?: string;
    /**
     * Refund reason
     * @type {string}
     * @memberof RefundOrderRequest
     */
    reason?: string;
    /**
     * 
     * @type {RefundOrderRequestAdditionalInfo}
     * @memberof RefundOrderRequest
     */
    additionalInfo?: RefundOrderRequestAdditionalInfo;
}

/**
 * Check if a given object implements the RefundOrderRequest interface.
 */
export function instanceOfRefundOrderRequest(value: object): value is RefundOrderRequest {
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined) return false;
    if (!('partnerRefundNo' in value) || value['partnerRefundNo'] === undefined) return false;
    if (!('refundAmount' in value) || value['refundAmount'] === undefined) return false;
    return true;
}

export function RefundOrderRequestFromJSON(json: any): RefundOrderRequest {
    return RefundOrderRequestFromJSONTyped(json, false);
}

export function RefundOrderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundOrderRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'originalCaptureNo': json['originalCaptureNo'] == null ? undefined : json['originalCaptureNo'],
        'partnerRefundNo': json['partnerRefundNo'],
        'refundAmount': MoneyFromJSON(json['refundAmount']),
        'externalStoreId': json['externalStoreId'] == null ? undefined : json['externalStoreId'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : RefundOrderRequestAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function RefundOrderRequestToJSON(json: any): RefundOrderRequest {
    return RefundOrderRequestToJSONTyped(json, false);
}

export function RefundOrderRequestToJSONTyped(value?: RefundOrderRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'originalCaptureNo': value['originalCaptureNo'],
        'partnerRefundNo': value['partnerRefundNo'],
        'refundAmount': MoneyToJSON(value['refundAmount']),
        'externalStoreId': value['externalStoreId'],
        'reason': value['reason'],
        'additionalInfo': RefundOrderRequestAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 32,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    originalCaptureNo: {
        maxLength: 64,
    },
    partnerRefundNo: {
        maxLength: 64,
    },
    externalStoreId: {
        maxLength: 64,
    },
    reason: {
        maxLength: 256,
    },
}

export function validateRefundOrderRequest(value: RefundOrderRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalCaptureNo', value.originalCaptureNo, propertyValidationAttributesMap['originalCaptureNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerRefundNo', value.partnerRefundNo, propertyValidationAttributesMap['partnerRefundNo']));

    validationErrorContexts.push(...validateMoney(value.refundAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalStoreId', value.externalStoreId, propertyValidationAttributesMap['externalStoreId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('reason', value.reason, propertyValidationAttributesMap['reason']));

    validationErrorContexts.push(...validateRefundOrderRequestAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
