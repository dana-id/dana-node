/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface ApplyTokenRefreshTokenRequest
 */
export interface ApplyTokenRefreshTokenRequest {
    /**
     * Additional information
     * @type {{ [key: string]: any; }}
     * @memberof ApplyTokenRefreshTokenRequest
     */
    additionalInfo?: { [key: string]: any; };
    /**
     * Apply token request type. The value is REFRESH_TOKEN
     * @type {string}
     * @memberof ApplyTokenRefreshTokenRequest
     */
    grantType: ApplyTokenRefreshTokenRequestGrantTypeEnum;
    /**
     * Authorization code. Please refer to https://dashboard.dana.id/api-docs/read/125. Required if grantType is AUTHORIZATION_CODE
     * @type {string}
     * @memberof ApplyTokenRefreshTokenRequest
     */
    authCode?: string;
    /**
     * This token is used for refresh session if existing token has been expired
     * @type {string}
     * @memberof ApplyTokenRefreshTokenRequest
     */
    refreshToken: string;
}


/**
 * @export
 */
export const ApplyTokenRefreshTokenRequestGrantTypeEnum = {
    RefreshToken: 'REFRESH_TOKEN'
} as const;
export type ApplyTokenRefreshTokenRequestGrantTypeEnum = typeof ApplyTokenRefreshTokenRequestGrantTypeEnum[keyof typeof ApplyTokenRefreshTokenRequestGrantTypeEnum];


/**
 * Check if a given object implements the ApplyTokenRefreshTokenRequest interface.
 */
export function instanceOfApplyTokenRefreshTokenRequest(value: object): value is ApplyTokenRefreshTokenRequest {
    if (!('grantType' in value) || value['grantType'] === undefined) return false;
    if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
    return true;
}

export function ApplyTokenRefreshTokenRequestFromJSON(json: any): ApplyTokenRefreshTokenRequest {
    return ApplyTokenRefreshTokenRequestFromJSONTyped(json, false);
}

export function ApplyTokenRefreshTokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyTokenRefreshTokenRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
        'grantType': json['grantType'],
        'authCode': json['authCode'] == null ? undefined : json['authCode'],
        'refreshToken': json['refreshToken'],
    };
}

export function ApplyTokenRefreshTokenRequestToJSON(json: any): ApplyTokenRefreshTokenRequest {
    return ApplyTokenRefreshTokenRequestToJSONTyped(json, false);
}

export function ApplyTokenRefreshTokenRequestToJSONTyped(value?: ApplyTokenRefreshTokenRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'additionalInfo': value['additionalInfo'],
        'grantType': value['grantType'],
        'authCode': value['authCode'],
        'refreshToken': value['refreshToken'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    grantType: {
        maxLength: 64,
    },
    authCode: {
        maxLength: 256,
    },
    refreshToken: {
        maxLength: 512,
    },
}

export function validateApplyTokenRefreshTokenRequest(value: ApplyTokenRefreshTokenRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('grantType', value.grantType, propertyValidationAttributesMap['grantType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('authCode', value.authCode, propertyValidationAttributesMap['authCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refreshToken', value.refreshToken, propertyValidationAttributesMap['refreshToken']));

    return validationErrorContexts;
}
