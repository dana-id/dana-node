/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface BalanceInquiryRequestAdditionalInfo
 */
export interface BalanceInquiryRequestAdditionalInfo {
    /**
     * Contains customer token, which has been obtained from binding process
     * @type {string}
     * @memberof BalanceInquiryRequestAdditionalInfo
     */
    accessToken: string;
    /**
     * IP address of the end user (customer) using IPv4 format
     * @type {string}
     * @memberof BalanceInquiryRequestAdditionalInfo
     */
    endUserIpAddress?: string;
    /**
     * Device identification on which the API services is currently being accessed by the end user (customer)
     * @type {string}
     * @memberof BalanceInquiryRequestAdditionalInfo
     */
    deviceId: string;
    /**
     * Location on which the API services is currently being accessed by the end user (customer), refer to ISO 6709 standard representation of geographic point location by coordinates
     * @type {string}
     * @memberof BalanceInquiryRequestAdditionalInfo
     */
    latitude?: string;
    /**
     * Location on which the API services is currently being accessed by the end user (customer), refer to ISO 6709 Standard representation of geographic point location by coordinates
     * @type {string}
     * @memberof BalanceInquiryRequestAdditionalInfo
     */
    longitude?: string;
}

/**
 * Check if a given object implements the BalanceInquiryRequestAdditionalInfo interface.
 */
export function instanceOfBalanceInquiryRequestAdditionalInfo(value: object): value is BalanceInquiryRequestAdditionalInfo {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('deviceId' in value) || value['deviceId'] === undefined) return false;
    return true;
}

export function BalanceInquiryRequestAdditionalInfoFromJSON(json: any): BalanceInquiryRequestAdditionalInfo {
    return BalanceInquiryRequestAdditionalInfoFromJSONTyped(json, false);
}

export function BalanceInquiryRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BalanceInquiryRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['accessToken'],
        'endUserIpAddress': json['endUserIpAddress'] == null ? undefined : json['endUserIpAddress'],
        'deviceId': json['deviceId'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
    };
}

export function BalanceInquiryRequestAdditionalInfoToJSON(json: any): BalanceInquiryRequestAdditionalInfo {
    return BalanceInquiryRequestAdditionalInfoToJSONTyped(json, false);
}

export function BalanceInquiryRequestAdditionalInfoToJSONTyped(value?: BalanceInquiryRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessToken': value['accessToken'],
        'endUserIpAddress': value['endUserIpAddress'],
        'deviceId': value['deviceId'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    accessToken: {
        maxLength: 512,
    },
    endUserIpAddress: {
        maxLength: 15,
    },
    deviceId: {
        maxLength: 400,
    },
    latitude: {
        maxLength: 10,
        pattern: new RegExp('/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/'.slice(1, -1)),
    },
    longitude: {
        maxLength: 10,
        pattern: new RegExp('/^[-+]?[0-9]{1,2}([.][0-9]{1,4})?$/'.slice(1, -1)),
    },
}

export function validateBalanceInquiryRequestAdditionalInfo(value: BalanceInquiryRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('endUserIpAddress', value.endUserIpAddress, propertyValidationAttributesMap['endUserIpAddress']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('deviceId', value.deviceId, propertyValidationAttributesMap['deviceId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('latitude', value.latitude, propertyValidationAttributesMap['latitude']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('longitude', value.longitude, propertyValidationAttributesMap['longitude']));

    return validationErrorContexts;
}
