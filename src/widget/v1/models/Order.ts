/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Buyer } from './Buyer';
import {
    validateBuyer,
    BuyerFromJSON,
    BuyerFromJSONTyped,
    BuyerToJSON,
    BuyerToJSONTyped,
} from './Buyer';
import type { Goods } from './Goods';
import {
    validateGoods,
    GoodsFromJSON,
    GoodsFromJSONTyped,
    GoodsToJSON,
    GoodsToJSONTyped,
} from './Goods';
import type { InternationalOrderInfo } from './InternationalOrderInfo';
import {
    validateInternationalOrderInfo,
    InternationalOrderInfoFromJSON,
    InternationalOrderInfoFromJSONTyped,
    InternationalOrderInfoToJSON,
    InternationalOrderInfoToJSONTyped,
} from './InternationalOrderInfo';
import type { ShippingInfo } from './ShippingInfo';
import {
    validateShippingInfo,
    ShippingInfoFromJSON,
    ShippingInfoFromJSONTyped,
    ShippingInfoToJSON,
    ShippingInfoToJSONTyped,
} from './ShippingInfo';
import type { Seller } from './Seller';
import {
    validateSeller,
    SellerFromJSON,
    SellerFromJSONTyped,
    SellerToJSON,
    SellerToJSONTyped,
} from './Seller';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {Buyer}
     * @memberof Order
     */
    buyer?: Buyer;
    /**
     * 
     * @type {Seller}
     * @memberof Order
     */
    seller?: Seller;
    /**
     * Additional information of order title
     * @type {string}
     * @memberof Order
     */
    orderTitle: string;
    /**
     * Additional information of merchant transaction type
     * @type {string}
     * @memberof Order
     */
    merchantTransType?: string;
    /**
     * Additional information of order memo
     * @type {string}
     * @memberof Order
     */
    orderMemo?: string;
    /**
     * Additional information of created time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof Order
     */
    createdTime?: string;
    /**
     * 
     * @type {Array<Goods>}
     * @memberof Order
     */
    goods?: Array<Goods>;
    /**
     * Additional information of shipping
     * @type {Array<ShippingInfo>}
     * @memberof Order
     */
    shippingInfo?: Array<ShippingInfo>;
    /**
     * Additional information of international order. Only use for Mini Program service
     * @type {InternationalOrderInfo}
     * @memberof Order
     */
    internationalOrderInfo?: InternationalOrderInfo;
    /**
     * Additional information of extend
     * @type {string}
     * @memberof Order
     */
    extendInfo?: string;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('orderTitle' in value) || value['orderTitle'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'buyer': json['buyer'] == null ? undefined : BuyerFromJSON(json['buyer']),
        'seller': json['seller'] == null ? undefined : SellerFromJSON(json['seller']),
        'orderTitle': json['orderTitle'],
        'merchantTransType': json['merchantTransType'] == null ? undefined : json['merchantTransType'],
        'orderMemo': json['orderMemo'] == null ? undefined : json['orderMemo'],
        'createdTime': json['createdTime'] == null ? undefined : json['createdTime'],
        'goods': json['goods'] == null ? undefined : ((json['goods'] as Array<any>).map(GoodsFromJSON)),
        'shippingInfo': json['shippingInfo'] == null ? undefined : ((json['shippingInfo'] as Array<any>).map(ShippingInfoFromJSON)),
        'internationalOrderInfo': json['internationalOrderInfo'] == null ? undefined : InternationalOrderInfoFromJSON(json['internationalOrderInfo']),
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'buyer': BuyerToJSON(value['buyer']),
        'seller': SellerToJSON(value['seller']),
        'orderTitle': value['orderTitle'],
        'merchantTransType': value['merchantTransType'],
        'orderMemo': value['orderMemo'],
        'createdTime': value['createdTime'],
        'goods': value['goods'] == null ? undefined : ((value['goods'] as Array<any>).map(GoodsToJSON)),
        'shippingInfo': value['shippingInfo'] == null ? undefined : ((value['shippingInfo'] as Array<any>).map(ShippingInfoToJSON)),
        'internationalOrderInfo': InternationalOrderInfoToJSON(value['internationalOrderInfo']),
        'extendInfo': value['extendInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    orderTitle: {
        maxLength: 64,
    },
    merchantTransType: {
        maxLength: 64,
    },
    orderMemo: {
        maxLength: 64,
    },
    createdTime: {
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validateOrder(value: Order): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateBuyer(value.buyer));

    validationErrorContexts.push(...validateSeller(value.seller));

    validationErrorContexts.push(...ValidationUtil.validateProperty('orderTitle', value.orderTitle, propertyValidationAttributesMap['orderTitle']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantTransType', value.merchantTransType, propertyValidationAttributesMap['merchantTransType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('orderMemo', value.orderMemo, propertyValidationAttributesMap['orderMemo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('createdTime', value.createdTime, propertyValidationAttributesMap['createdTime']));

    validationErrorContexts.push(...validateInternationalOrderInfo(value.internationalOrderInfo));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
