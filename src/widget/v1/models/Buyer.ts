/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface Buyer
 */
export interface Buyer {
    /**
     * Type of external user. Required if externalUserId is filled
     * @type {string}
     * @memberof Buyer
     */
    externalUserType?: string;
    /**
     * Nickname, user's nick name in DANA's
     * @type {string}
     * @memberof Buyer
     */
    nickname?: string;
    /**
     * External user identifier. Required if externalUserType is filled
     * @type {string}
     * @memberof Buyer
     */
    externalUserId?: string;
    /**
     * DANA's user identifier
     * @type {string}
     * @memberof Buyer
     */
    userId?: string;
}

/**
 * Check if a given object implements the Buyer interface.
 */
export function instanceOfBuyer(value: object): value is Buyer {
    return true;
}

export function BuyerFromJSON(json: any): Buyer {
    return BuyerFromJSONTyped(json, false);
}

export function BuyerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Buyer {
    if (json == null) {
        return json;
    }
    return {
        
        'externalUserType': json['externalUserType'] == null ? undefined : json['externalUserType'],
        'nickname': json['nickname'] == null ? undefined : json['nickname'],
        'externalUserId': json['externalUserId'] == null ? undefined : json['externalUserId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function BuyerToJSON(json: any): Buyer {
    return BuyerToJSONTyped(json, false);
}

export function BuyerToJSONTyped(value?: Buyer | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'externalUserType': value['externalUserType'],
        'nickname': value['nickname'],
        'externalUserId': value['externalUserId'],
        'userId': value['userId'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    externalUserType: {
        maxLength: 32,
    },
    nickname: {
        maxLength: 64,
    },
    externalUserId: {
        maxLength: 32,
    },
    userId: {
        maxLength: 32,
    },
}

export function validateBuyer(value: Buyer): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalUserType', value.externalUserType, propertyValidationAttributesMap['externalUserType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('nickname', value.nickname, propertyValidationAttributesMap['nickname']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalUserId', value.externalUserId, propertyValidationAttributesMap['externalUserId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('userId', value.userId, propertyValidationAttributesMap['userId']));

    return validationErrorContexts;
}
