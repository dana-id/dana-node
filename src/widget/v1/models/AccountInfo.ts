/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface AccountInfo
 */
export interface AccountInfo {
    /**
     * Account information of balance type to specify which balance type expected to be returned. Will return all available balance type if this parameter empty
     * @type {string}
     * @memberof AccountInfo
     */
    balanceType?: string;
    /**
     * Account information of amount which include the net active amount. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    amount?: Money;
    /**
     * Account information of float amount which include the inactive amount due to cut off period. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    floatAmount?: Money;
    /**
     * Account information of hold amount which include the unusable amount due to certain type of transaction. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    holdAmount?: Money;
    /**
     * Account information of available balance which include the active amount that can be used for transaction. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    availableBalance?: Money;
    /**
     * Account information of ledger balance which include the starting balance for this day. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    ledgerBalance?: Money;
    /**
     * Account information of current multilateral limit. Contains two sub-fields:<br>
     * 1. Value: Amount, including the cents<br>
     * 2. Currency: Currency code based on ISO
     * 
     * @type {Money}
     * @memberof AccountInfo
     */
    currentMultilateralLimit?: Money;
    /**
     * Account information of customer registration status
     * @type {string}
     * @memberof AccountInfo
     */
    registrationStatusCode?: string;
    /**
     * Account information of status. The values include:<br>
     * 1 = Active Account<br>
     * 2 = Closed Account<br>
     * 4 = New Account<br>
     * 6 = Restricted Account<br>
     * 7 = Frozen Account
     * 
     * @type {string}
     * @memberof AccountInfo
     */
    status?: string;
}

/**
 * Check if a given object implements the AccountInfo interface.
 */
export function instanceOfAccountInfo(value: object): value is AccountInfo {
    return true;
}

export function AccountInfoFromJSON(json: any): AccountInfo {
    return AccountInfoFromJSONTyped(json, false);
}

export function AccountInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'balanceType': json['balanceType'] == null ? undefined : json['balanceType'],
        'amount': json['amount'] == null ? undefined : MoneyFromJSON(json['amount']),
        'floatAmount': json['floatAmount'] == null ? undefined : MoneyFromJSON(json['floatAmount']),
        'holdAmount': json['holdAmount'] == null ? undefined : MoneyFromJSON(json['holdAmount']),
        'availableBalance': json['availableBalance'] == null ? undefined : MoneyFromJSON(json['availableBalance']),
        'ledgerBalance': json['ledgerBalance'] == null ? undefined : MoneyFromJSON(json['ledgerBalance']),
        'currentMultilateralLimit': json['currentMultilateralLimit'] == null ? undefined : MoneyFromJSON(json['currentMultilateralLimit']),
        'registrationStatusCode': json['registrationStatusCode'] == null ? undefined : json['registrationStatusCode'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function AccountInfoToJSON(json: any): AccountInfo {
    return AccountInfoToJSONTyped(json, false);
}

export function AccountInfoToJSONTyped(value?: AccountInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'balanceType': value['balanceType'],
        'amount': MoneyToJSON(value['amount']),
        'floatAmount': MoneyToJSON(value['floatAmount']),
        'holdAmount': MoneyToJSON(value['holdAmount']),
        'availableBalance': MoneyToJSON(value['availableBalance']),
        'ledgerBalance': MoneyToJSON(value['ledgerBalance']),
        'currentMultilateralLimit': MoneyToJSON(value['currentMultilateralLimit']),
        'registrationStatusCode': value['registrationStatusCode'],
        'status': value['status'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    balanceType: {
        maxLength: 70,
    },
    registrationStatusCode: {
        maxLength: 4,
    },
    status: {
        maxLength: 4,
    },
}

export function validateAccountInfo(value: AccountInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('balanceType', value.balanceType, propertyValidationAttributesMap['balanceType']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...validateMoney(value.floatAmount));

    validationErrorContexts.push(...validateMoney(value.holdAmount));

    validationErrorContexts.push(...validateMoney(value.availableBalance));

    validationErrorContexts.push(...validateMoney(value.ledgerBalance));

    validationErrorContexts.push(...validateMoney(value.currentMultilateralLimit));

    validationErrorContexts.push(...ValidationUtil.validateProperty('registrationStatusCode', value.registrationStatusCode, propertyValidationAttributesMap['registrationStatusCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('status', value.status, propertyValidationAttributesMap['status']));

    return validationErrorContexts;
}
