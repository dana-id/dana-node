/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * Additional information
 * @export
 * @interface RefundOrderRequestAdditionalInfo
 */
export interface RefundOrderRequestAdditionalInfo {
    /**
     * Additional information of payout account number. This param need to be filled if want to refund to specific payout account not that specified by DANA
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    payoutAccountNo?: string;
    /**
     * Additional information of refund applied time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    refundAppliedTime?: string;
    /**
     * Additional information of actor type, refer to ActorTypeEnum
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    actorType?: string;
    /**
     * Additional information of return charge to payer
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    returnChargeToPayer?: string;
    /**
     * Additional information of destination
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    destination?: string;
    /**
     * Additional information of environment
     * @type {object}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    envInfo: object;
    /**
     * Additional information of audit
     * @type {object}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    auditInfo?: object;
    /**
     * Additional information of actor context
     * @type {object}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    actorContext?: object;
    /**
     * Additional information of refund option bill
     * @type {Array<object>}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    refundOptionBill?: Array<object>;
    /**
     * Additional information of extend
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    extendInfo?: string;
    /**
     * Additional information of async refund to determine the process of refund whether sync or async. The values is true/false
     * @type {string}
     * @memberof RefundOrderRequestAdditionalInfo
     */
    asyncRefund?: string;
}

/**
 * Check if a given object implements the RefundOrderRequestAdditionalInfo interface.
 */
export function instanceOfRefundOrderRequestAdditionalInfo(value: object): value is RefundOrderRequestAdditionalInfo {
    if (!('envInfo' in value) || value['envInfo'] === undefined) return false;
    return true;
}

export function RefundOrderRequestAdditionalInfoFromJSON(json: any): RefundOrderRequestAdditionalInfo {
    return RefundOrderRequestAdditionalInfoFromJSONTyped(json, false);
}

export function RefundOrderRequestAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundOrderRequestAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'payoutAccountNo': json['payoutAccountNo'] == null ? undefined : json['payoutAccountNo'],
        'refundAppliedTime': json['refundAppliedTime'] == null ? undefined : json['refundAppliedTime'],
        'actorType': json['actorType'] == null ? undefined : json['actorType'],
        'returnChargeToPayer': json['returnChargeToPayer'] == null ? undefined : json['returnChargeToPayer'],
        'destination': json['destination'] == null ? undefined : json['destination'],
        'envInfo': json['envInfo'],
        'auditInfo': json['auditInfo'] == null ? undefined : json['auditInfo'],
        'actorContext': json['actorContext'] == null ? undefined : json['actorContext'],
        'refundOptionBill': json['refundOptionBill'] == null ? undefined : json['refundOptionBill'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'asyncRefund': json['asyncRefund'] == null ? undefined : json['asyncRefund'],
    };
}

export function RefundOrderRequestAdditionalInfoToJSON(json: any): RefundOrderRequestAdditionalInfo {
    return RefundOrderRequestAdditionalInfoToJSONTyped(json, false);
}

export function RefundOrderRequestAdditionalInfoToJSONTyped(value?: RefundOrderRequestAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payoutAccountNo': value['payoutAccountNo'],
        'refundAppliedTime': value['refundAppliedTime'],
        'actorType': value['actorType'],
        'returnChargeToPayer': value['returnChargeToPayer'],
        'destination': value['destination'],
        'envInfo': value['envInfo'],
        'auditInfo': value['auditInfo'],
        'actorContext': value['actorContext'],
        'refundOptionBill': value['refundOptionBill'],
        'extendInfo': value['extendInfo'],
        'asyncRefund': value['asyncRefund'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payoutAccountNo: {
        maxLength: 64,
    },
    refundAppliedTime: {
        maxLength: 25,
    },
    actorType: {
        maxLength: 64,
    },
    returnChargeToPayer: {
        maxLength: 64,
    },
    destination: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
    asyncRefund: {
        maxLength: 5,
    },
}

export function validateRefundOrderRequestAdditionalInfo(value: RefundOrderRequestAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payoutAccountNo', value.payoutAccountNo, propertyValidationAttributesMap['payoutAccountNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refundAppliedTime', value.refundAppliedTime, propertyValidationAttributesMap['refundAppliedTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('actorType', value.actorType, propertyValidationAttributesMap['actorType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('returnChargeToPayer', value.returnChargeToPayer, propertyValidationAttributesMap['returnChargeToPayer']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('destination', value.destination, propertyValidationAttributesMap['destination']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('asyncRefund', value.asyncRefund, propertyValidationAttributesMap['asyncRefund']));

    return validationErrorContexts;
}
