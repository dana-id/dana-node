/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface PayOptionInfo
 */
export interface PayOptionInfo {
    /**
     * Payment method name. The enums:<br>
     *   * BALANCE - Payment method with balance<br>
     *   * COUPON - Payment method with coupon<br>
     *   * NET_BANKING - Payment method with internet banking<br>
     *   * CREDIT_CARD - Payment method with credit card<br>
     *   * DEBIT_CARD - Payment method with debit card<br>
     *   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>
     *   * OTC - Payment method with OTC<br>
     *   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>
     *   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>
     *   * ONLINE_CREDIT - Payment method with online Credit<br>
     *   * LOAN_CREDIT - Payment method with DANA Cicil<br>
     *   * NETWORK_PAY - Payment method with e-wallet
     *   * CARD - Payment method with Card
     * 
     * @type {string}
     * @memberof PayOptionInfo
     */
    payMethod: PayOptionInfoPayMethodEnum;
    /**
     * Payment option which shows the provider of this payment. The enums:<br>
     *   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>
     *   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>
     *   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>
     *   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>
     *   * NETWORK_PAY_PG_CARD - Payment method with Card<br>
     *   * NETWORK_PAY_PC_INDOMARET - Payment method with Indomaret<br>
     *   * NETWORK_PAY_PG_QRIS - Payment method with QRIS<br>
     *   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>
     *   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>
     *   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>
     *   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>
     *   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>
     *   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>
     *   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>
     *   * VIRTUAL_ACCOUNT_PANIN - Payment method with Panin virtual account<br>
     * 
     * @type {string}
     * @memberof PayOptionInfo
     */
    payOption?: PayOptionInfoPayOptionEnum;
    /**
     * Pay amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof PayOptionInfo
     */
    payAmount?: Money;
    /**
     * Trans amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof PayOptionInfo
     */
    transAmount?: Money;
    /**
     * Charge amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof PayOptionInfo
     */
    chargeAmount?: Money;
    /**
     * Extend information of pay option bill
     * @type {string}
     * @memberof PayOptionInfo
     */
    payOptionBillExtendInfo?: string;
    /**
     * Extend information
     * @type {string}
     * @memberof PayOptionInfo
     */
    extendInfo?: string;
    /**
     * Payment code
     * @type {string}
     * @memberof PayOptionInfo
     */
    paymentCode?: string;
}


/**
 * @export
 */
export const PayOptionInfoPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT',
    NetworkPay: 'NETWORK_PAY',
    Card: 'CARD'
} as const;
export type PayOptionInfoPayMethodEnum = typeof PayOptionInfoPayMethodEnum[keyof typeof PayOptionInfoPayMethodEnum] | '';

/**
 * @export
 */
export const PayOptionInfoPayOptionEnum = {
    NetworkPayPgSpay: 'NETWORK_PAY_PG_SPAY',
    NetworkPayPgOvo: 'NETWORK_PAY_PG_OVO',
    NetworkPayPgGopay: 'NETWORK_PAY_PG_GOPAY',
    NetworkPayPgLinkaja: 'NETWORK_PAY_PG_LINKAJA',
    NetworkPayPgCard: 'NETWORK_PAY_PG_CARD',
    NetworkPayPcIndomaret: 'NETWORK_PAY_PC_INDOMARET',
    NetworkPayPgQris: 'NETWORK_PAY_PG_QRIS',
    VirtualAccountBca: 'VIRTUAL_ACCOUNT_BCA',
    VirtualAccountBni: 'VIRTUAL_ACCOUNT_BNI',
    VirtualAccountMandiri: 'VIRTUAL_ACCOUNT_MANDIRI',
    VirtualAccountBri: 'VIRTUAL_ACCOUNT_BRI',
    VirtualAccountBtpn: 'VIRTUAL_ACCOUNT_BTPN',
    VirtualAccountCimb: 'VIRTUAL_ACCOUNT_CIMB',
    VirtualAccountPermata: 'VIRTUAL_ACCOUNT_PERMATA',
    VirtualAccountPanin: 'VIRTUAL_ACCOUNT_PANIN'
} as const;
export type PayOptionInfoPayOptionEnum = typeof PayOptionInfoPayOptionEnum[keyof typeof PayOptionInfoPayOptionEnum] | '';


/**
 * Check if a given object implements the PayOptionInfo interface.
 */
export function instanceOfPayOptionInfo(value: object): value is PayOptionInfo {
    if (!('payMethod' in value) || value['payMethod'] === undefined) return false;
    return true;
}

export function PayOptionInfoFromJSON(json: any): PayOptionInfo {
    return PayOptionInfoFromJSONTyped(json, false);
}

export function PayOptionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayOptionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'payMethod': json['payMethod'],
        'payOption': json['payOption'] == null ? undefined : json['payOption'],
        'payAmount': json['payAmount'] == null ? undefined : MoneyFromJSON(json['payAmount']),
        'transAmount': json['transAmount'] == null ? undefined : MoneyFromJSON(json['transAmount']),
        'chargeAmount': json['chargeAmount'] == null ? undefined : MoneyFromJSON(json['chargeAmount']),
        'payOptionBillExtendInfo': json['payOptionBillExtendInfo'] == null ? undefined : json['payOptionBillExtendInfo'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'paymentCode': json['paymentCode'] == null ? undefined : json['paymentCode'],
    };
}

export function PayOptionInfoToJSON(json: any): PayOptionInfo {
    return PayOptionInfoToJSONTyped(json, false);
}

export function PayOptionInfoToJSONTyped(value?: PayOptionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payMethod': value['payMethod'],
        'payOption': value['payOption'],
        'payAmount': MoneyToJSON(value['payAmount']),
        'transAmount': MoneyToJSON(value['transAmount']),
        'chargeAmount': MoneyToJSON(value['chargeAmount']),
        'payOptionBillExtendInfo': value['payOptionBillExtendInfo'],
        'extendInfo': value['extendInfo'],
        'paymentCode': value['paymentCode'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payMethod: {
        maxLength: 64,
    },
    payOption: {
        maxLength: 64,
    },
    payOptionBillExtendInfo: {
        maxLength: 4096,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validatePayOptionInfo(value: PayOptionInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payOption', value.payOption, propertyValidationAttributesMap['payOption']));

    validationErrorContexts.push(...validateMoney(value.payAmount));

    validationErrorContexts.push(...validateMoney(value.transAmount));

    validationErrorContexts.push(...validateMoney(value.chargeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payOptionBillExtendInfo', value.payOptionBillExtendInfo, propertyValidationAttributesMap['payOptionBillExtendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
