/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import * as runtime from '../../../runtime';
import type {
  CancelOrderRequest,
  CancelOrderResponse,
  ConsultPayRequest,
  ConsultPayResponse,
  CreateOrderRequest,
  CreateOrderResponse,
  QueryPaymentRequest,
  QueryPaymentResponse,
  RefundOrderRequest,
  RefundOrderResponse,
} from '../models/index';
import {
    validateCancelOrderRequest,
    CancelOrderRequestFromJSON,
    CancelOrderRequestToJSON,
    validateCancelOrderResponse,
    CancelOrderResponseFromJSON,
    CancelOrderResponseToJSON,
    validateConsultPayRequest,
    ConsultPayRequestFromJSON,
    ConsultPayRequestToJSON,
    validateConsultPayResponse,
    ConsultPayResponseFromJSON,
    ConsultPayResponseToJSON,
    validateCreateOrderRequest,
    CreateOrderRequestFromJSON,
    CreateOrderRequestToJSON,
    validateCreateOrderResponse,
    CreateOrderResponseFromJSON,
    CreateOrderResponseToJSON,
    validateQueryPaymentRequest,
    QueryPaymentRequestFromJSON,
    QueryPaymentRequestToJSON,
    validateQueryPaymentResponse,
    QueryPaymentResponseFromJSON,
    QueryPaymentResponseToJSON,
    validateRefundOrderRequest,
    RefundOrderRequestFromJSON,
    RefundOrderRequestToJSON,
    validateRefundOrderResponse,
    RefundOrderResponseFromJSON,
    RefundOrderResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class PaymentGatewayApi extends runtime.BaseAPI {

    partnerId: string = "";
    privateKey: string = "";
    origin: string = "";
    env: string = "";
    clientSecret: string = "";

    constructor({ partnerId, privateKey, origin, env, clientSecret }: { partnerId?: string, privateKey?: string, origin?: string, env?: string, clientSecret?: string }) {
        const basePath = runtime.getBasePathByEnv(env);

        const configuration = new runtime.Configuration({
            basePath: basePath,
        })

        super(configuration);

        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
        this.clientSecret = clientSecret;
    }

    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order - Payment Gateway
     */
    async cancelOrder(cancelOrderRequest: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelOrderResponse> {
        if (cancelOrderRequest == null) {
            throw new runtime.RequiredError(
                'cancelOrderRequest',
                'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateCancelOrderRequest(cancelOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/payment-gateway/v1.0/debit/cancel.htm`;

        const requestBody: string = JSON.stringify(CancelOrderRequestToJSON(cancelOrderRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelOrderRequestToJSON(cancelOrderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelOrderResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
     * Consult Pay - Payment Gateway
     */
    async consultPay(consultPayRequest: ConsultPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsultPayResponse> {
        if (consultPayRequest == null) {
            throw new runtime.RequiredError(
                'consultPayRequest',
                'Required parameter "consultPayRequest" was null or undefined when calling consultPay().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateConsultPayRequest(consultPayRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/v1.0/payment-gateway/consult-pay.htm`;

        const requestBody: string = JSON.stringify(ConsultPayRequestToJSON(consultPayRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsultPayRequestToJSON(consultPayRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsultPayResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used for merchant to create order in DANA side
     * Create Order - Payment Gateway
     */
    async createOrder(createOrderRequest: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrderResponse> {
        if (createOrderRequest == null) {
            throw new runtime.RequiredError(
                'createOrderRequest',
                'Required parameter "createOrderRequest" was null or undefined when calling createOrder().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateCreateOrderRequest(createOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/payment-gateway/v1.0/debit/payment-host-to-host.htm`;

        const requestBody: string = JSON.stringify(CreateOrderRequestToJSON(createOrderRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderRequestToJSON(createOrderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrderResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to inquiry payment status and information from merchant\'s platform to DANA
     * Query Payment - Payment Gateway
     */
    async queryPayment(queryPaymentRequest: QueryPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryPaymentResponse> {
        if (queryPaymentRequest == null) {
            throw new runtime.RequiredError(
                'queryPaymentRequest',
                'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateQueryPaymentRequest(queryPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/payment-gateway/v1.0/debit/status.htm`;

        const requestBody: string = JSON.stringify(QueryPaymentRequestToJSON(queryPaymentRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryPaymentRequestToJSON(queryPaymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryPaymentResponseFromJSON(jsonValue)).value();
    }

    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order - Payment Gateway
     */
    async refundOrder(refundOrderRequest: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundOrderResponse> {
        if (refundOrderRequest == null) {
            throw new runtime.RequiredError(
                'refundOrderRequest',
                'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().'
            );
        }

        const validationErrorContexts: runtime.ValidationErrorContext[] = validateRefundOrderRequest(refundOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const endpointUrl: string = `/payment-gateway/v1.0/debit/refund.htm`;

        const requestBody: string = JSON.stringify(RefundOrderRequestToJSON(refundOrderRequest));

        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);


        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundOrderRequestToJSON(refundOrderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundOrderResponseFromJSON(jsonValue)).value();
    }

}
