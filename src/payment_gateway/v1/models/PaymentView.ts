/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { PayOptionInfo } from './PayOptionInfo';
import {
    validatePayOptionInfo,
    PayOptionInfoFromJSON,
    PayOptionInfoFromJSONTyped,
    PayOptionInfoToJSON,
    PayOptionInfoToJSONTyped,
} from './PayOptionInfo';

/**
 * 
 * @export
 * @interface PaymentView
 */
export interface PaymentView {
    /**
     * Cashier request identifier
     * @type {string}
     * @memberof PaymentView
     */
    cashierRequestId?: string;
    /**
     * Information of paid time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof PaymentView
     */
    paidTime?: string;
    /**
     * Information of pay option
     * @type {Array<PayOptionInfo>}
     * @memberof PaymentView
     */
    payOptionInfos: Array<PayOptionInfo>;
    /**
     * Extend information of pay request
     * @type {string}
     * @memberof PaymentView
     */
    payRequestExtendInfo?: string;
    /**
     * Additional extend information
     * @type {string}
     * @memberof PaymentView
     */
    extendInfo?: string;
}

/**
 * Check if a given object implements the PaymentView interface.
 */
export function instanceOfPaymentView(value: object): value is PaymentView {
    if (!('payOptionInfos' in value) || value['payOptionInfos'] === undefined) return false;
    return true;
}

export function PaymentViewFromJSON(json: any): PaymentView {
    return PaymentViewFromJSONTyped(json, false);
}

export function PaymentViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentView {
    if (json == null) {
        return json;
    }
    return {
        
        'cashierRequestId': json['cashierRequestId'] == null ? undefined : json['cashierRequestId'],
        'paidTime': json['paidTime'] == null ? undefined : json['paidTime'],
        'payOptionInfos': ((json['payOptionInfos'] as Array<any>).map(PayOptionInfoFromJSON)),
        'payRequestExtendInfo': json['payRequestExtendInfo'] == null ? undefined : json['payRequestExtendInfo'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}

export function PaymentViewToJSON(json: any): PaymentView {
    return PaymentViewToJSONTyped(json, false);
}

export function PaymentViewToJSONTyped(value?: PaymentView | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cashierRequestId': value['cashierRequestId'],
        'paidTime': value['paidTime'],
        'payOptionInfos': ((value['payOptionInfos'] as Array<any>).map(PayOptionInfoToJSON)),
        'payRequestExtendInfo': value['payRequestExtendInfo'],
        'extendInfo': value['extendInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    cashierRequestId: {
        maxLength: 64,
    },
    paidTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    payRequestExtendInfo: {
        maxLength: 4096,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validatePaymentView(value: PaymentView): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('cashierRequestId', value.cashierRequestId, propertyValidationAttributesMap['cashierRequestId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('paidTime', value.paidTime, propertyValidationAttributesMap['paidTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payRequestExtendInfo', value.payRequestExtendInfo, propertyValidationAttributesMap['payRequestExtendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    return validationErrorContexts;
}
