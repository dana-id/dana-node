/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface ShippingInfo
 */
export interface ShippingInfo {
    /**
     * 
     * @type {Money}
     * @memberof ShippingInfo
     */
    chargeAmount?: Money;
    /**
     * Last name
     * @type {string}
     * @memberof ShippingInfo
     */
    lastName: string;
    /**
     * Number of tracking
     * @type {string}
     * @memberof ShippingInfo
     */
    trackingNo?: string;
    /**
     * Name of country
     * @type {string}
     * @memberof ShippingInfo
     */
    countryName: string;
    /**
     * Merchant shipping identifier
     * @type {string}
     * @memberof ShippingInfo
     */
    merchantShippingId: string;
    /**
     * Name of city
     * @type {string}
     * @memberof ShippingInfo
     */
    cityName: string;
    /**
     * Information of address 1
     * @type {string}
     * @memberof ShippingInfo
     */
    address1: string;
    /**
     * Information of address 2
     * @type {string}
     * @memberof ShippingInfo
     */
    address2?: string;
    /**
     * Phone number
     * @type {string}
     * @memberof ShippingInfo
     */
    phoneNo?: string;
    /**
     * Name of area
     * @type {string}
     * @memberof ShippingInfo
     */
    areaName?: string;
    /**
     * Email
     * @type {string}
     * @memberof ShippingInfo
     */
    email?: string;
    /**
     * Zip code
     * @type {string}
     * @memberof ShippingInfo
     */
    zipCode: string;
    /**
     * Name of state
     * @type {string}
     * @memberof ShippingInfo
     */
    stateName: string;
    /**
     * Fax number
     * @type {string}
     * @memberof ShippingInfo
     */
    faxNo?: string;
    /**
     * Information of carrier
     * @type {string}
     * @memberof ShippingInfo
     */
    carrier?: string;
    /**
     * First name
     * @type {string}
     * @memberof ShippingInfo
     */
    firstName: string;
    /**
     * Mobile number
     * @type {string}
     * @memberof ShippingInfo
     */
    mobileNo?: string;
}

/**
 * Check if a given object implements the ShippingInfo interface.
 */
export function instanceOfShippingInfo(value: object): value is ShippingInfo {
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('countryName' in value) || value['countryName'] === undefined) return false;
    if (!('merchantShippingId' in value) || value['merchantShippingId'] === undefined) return false;
    if (!('cityName' in value) || value['cityName'] === undefined) return false;
    if (!('address1' in value) || value['address1'] === undefined) return false;
    if (!('zipCode' in value) || value['zipCode'] === undefined) return false;
    if (!('stateName' in value) || value['stateName'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    return true;
}

export function ShippingInfoFromJSON(json: any): ShippingInfo {
    return ShippingInfoFromJSONTyped(json, false);
}

export function ShippingInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShippingInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'chargeAmount': json['chargeAmount'] == null ? undefined : MoneyFromJSON(json['chargeAmount']),
        'lastName': json['lastName'],
        'trackingNo': json['trackingNo'] == null ? undefined : json['trackingNo'],
        'countryName': json['countryName'],
        'merchantShippingId': json['merchantShippingId'],
        'cityName': json['cityName'],
        'address1': json['address1'],
        'address2': json['address2'] == null ? undefined : json['address2'],
        'phoneNo': json['phoneNo'] == null ? undefined : json['phoneNo'],
        'areaName': json['areaName'] == null ? undefined : json['areaName'],
        'email': json['email'] == null ? undefined : json['email'],
        'zipCode': json['zipCode'],
        'stateName': json['stateName'],
        'faxNo': json['faxNo'] == null ? undefined : json['faxNo'],
        'carrier': json['carrier'] == null ? undefined : json['carrier'],
        'firstName': json['firstName'],
        'mobileNo': json['mobileNo'] == null ? undefined : json['mobileNo'],
    };
}

export function ShippingInfoToJSON(json: any): ShippingInfo {
    return ShippingInfoToJSONTyped(json, false);
}

export function ShippingInfoToJSONTyped(value?: ShippingInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chargeAmount': MoneyToJSON(value['chargeAmount']),
        'lastName': value['lastName'],
        'trackingNo': value['trackingNo'],
        'countryName': value['countryName'],
        'merchantShippingId': value['merchantShippingId'],
        'cityName': value['cityName'],
        'address1': value['address1'],
        'address2': value['address2'],
        'phoneNo': value['phoneNo'],
        'areaName': value['areaName'],
        'email': value['email'],
        'zipCode': value['zipCode'],
        'stateName': value['stateName'],
        'faxNo': value['faxNo'],
        'carrier': value['carrier'],
        'firstName': value['firstName'],
        'mobileNo': value['mobileNo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    lastName: {
        maxLength: 64,
    },
    trackingNo: {
        maxLength: 64,
    },
    countryName: {
        maxLength: 64,
    },
    merchantShippingId: {
        maxLength: 64,
    },
    cityName: {
        maxLength: 64,
    },
    address1: {
        maxLength: 256,
    },
    address2: {
        maxLength: 256,
    },
    phoneNo: {
        maxLength: 32,
    },
    areaName: {
        maxLength: 64,
    },
    email: {
        maxLength: 128,
    },
    zipCode: {
        maxLength: 32,
    },
    stateName: {
        maxLength: 64,
    },
    faxNo: {
        maxLength: 32,
    },
    carrier: {
        maxLength: 64,
    },
    firstName: {
        maxLength: 64,
    },
    mobileNo: {
        maxLength: 32,
    },
}

export function validateShippingInfo(value: ShippingInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateMoney(value.chargeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('lastName', value.lastName, propertyValidationAttributesMap['lastName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('trackingNo', value.trackingNo, propertyValidationAttributesMap['trackingNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('countryName', value.countryName, propertyValidationAttributesMap['countryName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantShippingId', value.merchantShippingId, propertyValidationAttributesMap['merchantShippingId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cityName', value.cityName, propertyValidationAttributesMap['cityName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('address1', value.address1, propertyValidationAttributesMap['address1']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('address2', value.address2, propertyValidationAttributesMap['address2']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('phoneNo', value.phoneNo, propertyValidationAttributesMap['phoneNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('areaName', value.areaName, propertyValidationAttributesMap['areaName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('email', value.email, propertyValidationAttributesMap['email']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('zipCode', value.zipCode, propertyValidationAttributesMap['zipCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('stateName', value.stateName, propertyValidationAttributesMap['stateName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('faxNo', value.faxNo, propertyValidationAttributesMap['faxNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('carrier', value.carrier, propertyValidationAttributesMap['carrier']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('firstName', value.firstName, propertyValidationAttributesMap['firstName']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('mobileNo', value.mobileNo, propertyValidationAttributesMap['mobileNo']));

    return validationErrorContexts;
}
