/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { ShopInfo } from './ShopInfo';
import {
    validateShopInfo,
    ShopInfoFromJSON,
    ShopInfoFromJSONTyped,
    ShopInfoToJSON,
    ShopInfoToJSONTyped,
} from './ShopInfo';
import type { FinishNotifyPaymentInfo } from './FinishNotifyPaymentInfo';
import {
    validateFinishNotifyPaymentInfo,
    FinishNotifyPaymentInfoFromJSON,
    FinishNotifyPaymentInfoFromJSONTyped,
    FinishNotifyPaymentInfoToJSON,
    FinishNotifyPaymentInfoToJSONTyped,
} from './FinishNotifyPaymentInfo';

/**
 * 
 * @export
 * @interface FinishNotifyAdditionalInfo
 */
export interface FinishNotifyAdditionalInfo {
    /**
     * 
     * @type {FinishNotifyPaymentInfo}
     * @memberof FinishNotifyAdditionalInfo
     */
    paymentInfo?: FinishNotifyPaymentInfo;
    /**
     * 
     * @type {ShopInfo}
     * @memberof FinishNotifyAdditionalInfo
     */
    shopInfo?: ShopInfo;
    /**
     * Extended information (as a JSON string)
     * @type {string}
     * @memberof FinishNotifyAdditionalInfo
     */
    extendInfo?: string;
    /**
     * Reason for order closure (if order is closed)
     * @type {string}
     * @memberof FinishNotifyAdditionalInfo
     */
    extendInfoClosedReason?: string;
}

/**
 * Check if a given object implements the FinishNotifyAdditionalInfo interface.
 */
export function instanceOfFinishNotifyAdditionalInfo(value: object): value is FinishNotifyAdditionalInfo {
    return true;
}

export function FinishNotifyAdditionalInfoFromJSON(json: any): FinishNotifyAdditionalInfo {
    return FinishNotifyAdditionalInfoFromJSONTyped(json, false);
}

export function FinishNotifyAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinishNotifyAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'paymentInfo': json['paymentInfo'] == null ? undefined : FinishNotifyPaymentInfoFromJSON(json['paymentInfo']),
        'shopInfo': json['shopInfo'] == null ? undefined : ShopInfoFromJSON(json['shopInfo']),
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'extendInfoClosedReason': json['extendInfo.closedReason'] == null ? undefined : json['extendInfo.closedReason'],
    };
}

export function FinishNotifyAdditionalInfoToJSON(json: any): FinishNotifyAdditionalInfo {
    return FinishNotifyAdditionalInfoToJSONTyped(json, false);
}

export function FinishNotifyAdditionalInfoToJSONTyped(value?: FinishNotifyAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'paymentInfo': FinishNotifyPaymentInfoToJSON(value['paymentInfo']),
        'shopInfo': ShopInfoToJSON(value['shopInfo']),
        'extendInfo': value['extendInfo'],
        'extendInfo.closedReason': value['extendInfoClosedReason'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    extendInfo: {
        maxLength: 4096,
    },
    extendInfoClosedReason: {
        maxLength: 64,
    },
}

export function validateFinishNotifyAdditionalInfo(value: FinishNotifyAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateFinishNotifyPaymentInfo(value.paymentInfo));

    validationErrorContexts.push(...validateShopInfo(value.shopInfo));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfoClosedReason', value.extendInfoClosedReason, propertyValidationAttributesMap['extendInfoClosedReason']));

    return validationErrorContexts;
}
