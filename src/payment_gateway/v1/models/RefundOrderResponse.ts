/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface RefundOrderResponse
 */
export interface RefundOrderResponse {
    /**
     * Response code. Refer to https://dashboard.dana.id/api-docs/read/127#HTML-API-RefundOrder-ResponseCodeandMessage
     * @type {string}
     * @memberof RefundOrderResponse
     */
    responseCode: string;
    /**
     * Response message. Refer to https://dashboard.dana.id/api-docs/read/127#HTML-API-RefundOrder-ResponseCodeandMessage
     * @type {string}
     * @memberof RefundOrderResponse
     */
    responseMessage: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof RefundOrderResponse
     */
    originalReferenceNo?: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof RefundOrderResponse
     */
    originalPartnerReferenceNo: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof RefundOrderResponse
     */
    originalExternalId?: string;
    /**
     * DANA's capture identifier. Use to refund the corresponding capture order
     * @type {string}
     * @memberof RefundOrderResponse
     */
    originalCaptureNo?: string;
    /**
     * Refund number identifier on DANA system
     * @type {string}
     * @memberof RefundOrderResponse
     */
    refundNo?: string;
    /**
     * Reference number from merchant for the refund
     * @type {string}
     * @memberof RefundOrderResponse
     */
    partnerRefundNo: string;
    /**
     * Refund amount. Contains two sub-fields - 1. Value (Amount, including the cents) and 2. Currency (Currency code based on ISO)
     * @type {Money}
     * @memberof RefundOrderResponse
     */
    refundAmount: Money;
    /**
     * Refund time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof RefundOrderResponse
     */
    refundTime?: string;
    /**
     * Additional information
     * @type {object}
     * @memberof RefundOrderResponse
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the RefundOrderResponse interface.
 */
export function instanceOfRefundOrderResponse(value: object): value is RefundOrderResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined) return false;
    if (!('partnerRefundNo' in value) || value['partnerRefundNo'] === undefined) return false;
    if (!('refundAmount' in value) || value['refundAmount'] === undefined) return false;
    return true;
}

export function RefundOrderResponseFromJSON(json: any): RefundOrderResponse {
    return RefundOrderResponseFromJSONTyped(json, false);
}

export function RefundOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundOrderResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'originalCaptureNo': json['originalCaptureNo'] == null ? undefined : json['originalCaptureNo'],
        'refundNo': json['refundNo'] == null ? undefined : json['refundNo'],
        'partnerRefundNo': json['partnerRefundNo'],
        'refundAmount': MoneyFromJSON(json['refundAmount']),
        'refundTime': json['refundTime'] == null ? undefined : json['refundTime'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function RefundOrderResponseToJSON(json: any): RefundOrderResponse {
    return RefundOrderResponseToJSONTyped(json, false);
}

export function RefundOrderResponseToJSONTyped(value?: RefundOrderResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'originalCaptureNo': value['originalCaptureNo'],
        'refundNo': value['refundNo'],
        'partnerRefundNo': value['partnerRefundNo'],
        'refundAmount': MoneyToJSON(value['refundAmount']),
        'refundTime': value['refundTime'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    originalCaptureNo: {
        maxLength: 64,
    },
    refundNo: {
        maxLength: 64,
    },
    partnerRefundNo: {
        maxLength: 64,
    },
    refundTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
}

export function validateRefundOrderResponse(value: RefundOrderResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalCaptureNo', value.originalCaptureNo, propertyValidationAttributesMap['originalCaptureNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refundNo', value.refundNo, propertyValidationAttributesMap['refundNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('partnerRefundNo', value.partnerRefundNo, propertyValidationAttributesMap['partnerRefundNo']));

    validationErrorContexts.push(...validateMoney(value.refundAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('refundTime', value.refundTime, propertyValidationAttributesMap['refundTime']));

    return validationErrorContexts;
}
