/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface ActorContext
 */
export interface ActorContext {
    /**
     * Actor identifier
     * @type {string}
     * @memberof ActorContext
     */
    actorId?: string;
    /**
     * Actor type. The enums:<br>
     * * USER - User<br>
     * * MERCHANT - Merchant<br
     * * MERCHANT_OPERATOR - Merchant operator<br>
     * * BACK_OFFICE - Back office<br>
     * * SYSTEM - System<br>
     * 
     * @type {string}
     * @memberof ActorContext
     */
    actorType?: ActorContextActorTypeEnum;
}


/**
 * @export
 */
export const ActorContextActorTypeEnum = {
    User: 'USER',
    Merchant: 'MERCHANT',
    MerchantOperator: 'MERCHANT_OPERATOR',
    BackOffice: 'BACK_OFFICE',
    System: 'SYSTEM'
} as const;
export type ActorContextActorTypeEnum = typeof ActorContextActorTypeEnum[keyof typeof ActorContextActorTypeEnum];


/**
 * Check if a given object implements the ActorContext interface.
 */
export function instanceOfActorContext(value: object): value is ActorContext {
    return true;
}

export function ActorContextFromJSON(json: any): ActorContext {
    return ActorContextFromJSONTyped(json, false);
}

export function ActorContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActorContext {
    if (json == null) {
        return json;
    }
    return {
        
        'actorId': json['actorId'] == null ? undefined : json['actorId'],
        'actorType': json['actorType'] == null ? undefined : json['actorType'],
    };
}

export function ActorContextToJSON(json: any): ActorContext {
    return ActorContextToJSONTyped(json, false);
}

export function ActorContextToJSONTyped(value?: ActorContext | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'actorId': value['actorId'],
        'actorType': value['actorType'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    actorId: {
        maxLength: 64,
    },
    actorType: {
        maxLength: 32,
    },
}

export function validateActorContext(value: ActorContext): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('actorId', value.actorId, propertyValidationAttributesMap['actorId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('actorType', value.actorType, propertyValidationAttributesMap['actorType']));

    return validationErrorContexts;
}
