/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Buyer } from './Buyer';
import {
    validateBuyer,
    BuyerFromJSON,
    BuyerFromJSONTyped,
    BuyerToJSON,
    BuyerToJSONTyped,
} from './Buyer';
import type { Goods } from './Goods';
import {
    validateGoods,
    GoodsFromJSON,
    GoodsFromJSONTyped,
    GoodsToJSON,
    GoodsToJSONTyped,
} from './Goods';
import type { ShippingInfo } from './ShippingInfo';
import {
    validateShippingInfo,
    ShippingInfoFromJSON,
    ShippingInfoFromJSONTyped,
    ShippingInfoToJSON,
    ShippingInfoToJSONTyped,
} from './ShippingInfo';

/**
 * 
 * @export
 * @interface OrderRedirectObject
 */
export interface OrderRedirectObject {
    /**
     * Additional information of order title
     * @type {string}
     * @memberof OrderRedirectObject
     */
    orderTitle: string;
    /**
     * Additional information of merchant transaction type
     * @type {string}
     * @memberof OrderRedirectObject
     */
    merchantTransType?: string;
    /**
     * Additional information of buyer
     * @type {Buyer}
     * @memberof OrderRedirectObject
     */
    buyer?: Buyer;
    /**
     * Additional information of goods
     * @type {Array<Goods>}
     * @memberof OrderRedirectObject
     */
    goods?: Array<Goods>;
    /**
     * Additional information of shipping info
     * @type {Array<ShippingInfo>}
     * @memberof OrderRedirectObject
     */
    shippingInfo?: Array<ShippingInfo>;
    /**
     * Additional information of extend
     * @type {string}
     * @memberof OrderRedirectObject
     */
    extendInfo?: string;
    /**
     * For Payment Gateway Drop-in scenario, need to fill it as REDIRECT
     * @type {string}
     * @memberof OrderRedirectObject
     */
    scenario?: OrderRedirectObjectScenarioEnum;
}


/**
 * @export
 */
export const OrderRedirectObjectScenarioEnum = {
    Redirect: 'REDIRECT'
} as const;
export type OrderRedirectObjectScenarioEnum = typeof OrderRedirectObjectScenarioEnum[keyof typeof OrderRedirectObjectScenarioEnum];


/**
 * Check if a given object implements the OrderRedirectObject interface.
 */
export function instanceOfOrderRedirectObject(value: object): value is OrderRedirectObject {
    if (!('orderTitle' in value) || value['orderTitle'] === undefined) return false;
    return true;
}

export function OrderRedirectObjectFromJSON(json: any): OrderRedirectObject {
    return OrderRedirectObjectFromJSONTyped(json, false);
}

export function OrderRedirectObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderRedirectObject {
    if (json == null) {
        return json;
    }
    return {
        
        'orderTitle': json['orderTitle'],
        'merchantTransType': json['merchantTransType'] == null ? undefined : json['merchantTransType'],
        'buyer': json['buyer'] == null ? undefined : BuyerFromJSON(json['buyer']),
        'goods': json['goods'] == null ? undefined : ((json['goods'] as Array<any>).map(GoodsFromJSON)),
        'shippingInfo': json['shippingInfo'] == null ? undefined : ((json['shippingInfo'] as Array<any>).map(ShippingInfoFromJSON)),
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'scenario': json['scenario'] == null ? undefined : json['scenario'],
    };
}

export function OrderRedirectObjectToJSON(json: any): OrderRedirectObject {
    return OrderRedirectObjectToJSONTyped(json, false);
}

export function OrderRedirectObjectToJSONTyped(value?: OrderRedirectObject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'orderTitle': value['orderTitle'],
        'merchantTransType': value['merchantTransType'],
        'buyer': BuyerToJSON(value['buyer']),
        'goods': value['goods'] == null ? undefined : ((value['goods'] as Array<any>).map(GoodsToJSON)),
        'shippingInfo': value['shippingInfo'] == null ? undefined : ((value['shippingInfo'] as Array<any>).map(ShippingInfoToJSON)),
        'extendInfo': value['extendInfo'],
        'scenario': value['scenario'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    orderTitle: {
        maxLength: 64,
    },
    merchantTransType: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
    scenario: {
        maxLength: 64,
    },
}

export function validateOrderRedirectObject(value: OrderRedirectObject): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('orderTitle', value.orderTitle, propertyValidationAttributesMap['orderTitle']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantTransType', value.merchantTransType, propertyValidationAttributesMap['merchantTransType']));

    validationErrorContexts.push(...validateBuyer(value.buyer));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('scenario', value.scenario, propertyValidationAttributesMap['scenario']));

    return validationErrorContexts;
}
