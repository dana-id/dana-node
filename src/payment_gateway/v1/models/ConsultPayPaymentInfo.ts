/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { PromoInfo } from './PromoInfo';
import {
    validatePromoInfo,
    PromoInfoFromJSON,
    PromoInfoFromJSONTyped,
    PromoInfoToJSON,
    PromoInfoToJSONTyped,
} from './PromoInfo';

/**
 * 
 * @export
 * @interface ConsultPayPaymentInfo
 */
export interface ConsultPayPaymentInfo {
    /**
     * Payment method that used to payment. The enums:
     *   * BALANCE - Payment method with balance<br>
     *   * COUPON - Payment method with coupon<br>
     *   * NET_BANKING - Payment method with internet banking<br>
     *   * CREDIT_CARD - Payment method with credit card<br>
     *   * DEBIT_CARD - Payment method with debit card<br>
     *   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>
     *   * OTC - Payment method with OTC<br>
     *   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>
     *   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>
     *   * ONLINE_CREDIT - Payment method with online Credit<br>
     *   * LOAN_CREDIT - Payment method with DANA Cicil<br>
     *   * NETWORK_PAY - Payment method with e-wallet<br>
     * 
     * @type {string}
     * @memberof ConsultPayPaymentInfo
     */
    payMethod: ConsultPayPaymentInfoPayMethodEnum;
    /**
     * Payment option that available to used to payment, depends on the payment method. The enums:
     *   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>
     *   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>
     *   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>
     *   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>
     *   * NETWORK_PAY_PG_CARD - Payment method with Card<br>
     *   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>
     *   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>
     *   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>
     *   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>
     *   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>
     *   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>
     *   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>
     * 
     * @type {string}
     * @memberof ConsultPayPaymentInfo
     */
    payOption?: ConsultPayPaymentInfoPayOptionEnum;
    /**
     * 
     * @type {Array<PromoInfo>}
     * @memberof ConsultPayPaymentInfo
     */
    promoInfos?: Array<PromoInfo>;
}


/**
 * @export
 */
export const ConsultPayPaymentInfoPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT',
    NetworkPay: 'NETWORK_PAY'
} as const;
export type ConsultPayPaymentInfoPayMethodEnum = typeof ConsultPayPaymentInfoPayMethodEnum[keyof typeof ConsultPayPaymentInfoPayMethodEnum];

/**
 * @export
 */
export const ConsultPayPaymentInfoPayOptionEnum = {
    NetworkPayPgSpay: 'NETWORK_PAY_PG_SPAY',
    NetworkPayPgOvo: 'NETWORK_PAY_PG_OVO',
    NetworkPayPgGopay: 'NETWORK_PAY_PG_GOPAY',
    NetworkPayPgLinkaja: 'NETWORK_PAY_PG_LINKAJA',
    NetworkPayPgCard: 'NETWORK_PAY_PG_CARD',
    VirtualAccountBca: 'VIRTUAL_ACCOUNT_BCA',
    VirtualAccountBni: 'VIRTUAL_ACCOUNT_BNI',
    VirtualAccountMandiri: 'VIRTUAL_ACCOUNT_MANDIRI',
    VirtualAccountBri: 'VIRTUAL_ACCOUNT_BRI',
    VirtualAccountBtpn: 'VIRTUAL_ACCOUNT_BTPN',
    VirtualAccountCimb: 'VIRTUAL_ACCOUNT_CIMB',
    VirtualAccountPermata: 'VIRTUAL_ACCOUNT_PERMATA'
} as const;
export type ConsultPayPaymentInfoPayOptionEnum = typeof ConsultPayPaymentInfoPayOptionEnum[keyof typeof ConsultPayPaymentInfoPayOptionEnum];


/**
 * Check if a given object implements the ConsultPayPaymentInfo interface.
 */
export function instanceOfConsultPayPaymentInfo(value: object): value is ConsultPayPaymentInfo {
    if (!('payMethod' in value) || value['payMethod'] === undefined) return false;
    return true;
}

export function ConsultPayPaymentInfoFromJSON(json: any): ConsultPayPaymentInfo {
    return ConsultPayPaymentInfoFromJSONTyped(json, false);
}

export function ConsultPayPaymentInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsultPayPaymentInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'payMethod': json['payMethod'],
        'payOption': json['payOption'] == null ? undefined : json['payOption'],
        'promoInfos': json['promoInfos'] == null ? undefined : ((json['promoInfos'] as Array<any>).map(PromoInfoFromJSON)),
    };
}

export function ConsultPayPaymentInfoToJSON(json: any): ConsultPayPaymentInfo {
    return ConsultPayPaymentInfoToJSONTyped(json, false);
}

export function ConsultPayPaymentInfoToJSONTyped(value?: ConsultPayPaymentInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payMethod': value['payMethod'],
        'payOption': value['payOption'],
        'promoInfos': value['promoInfos'] == null ? undefined : ((value['promoInfos'] as Array<any>).map(PromoInfoToJSON)),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payMethod: {
        maxLength: 64,
    },
    payOption: {
        maxLength: 128,
    },
}

export function validateConsultPayPaymentInfo(value: ConsultPayPaymentInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payOption', value.payOption, propertyValidationAttributesMap['payOption']));

    return validationErrorContexts;
}
