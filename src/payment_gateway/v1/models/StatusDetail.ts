/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface StatusDetail
 */
export interface StatusDetail {
    /**
     * Acquirement status. The enums:<br>
     * * INIT - Order is created but not paid yet<br>
     * * SUCCESS - Order is succeeded<br>
     * * CLOSED - Order is closed<br>
     * * PAYING - Order is paid but not finish<br>
     * * MERCHANT_ACCEPT - Order is accepted by merchant after order is paid for PAY-CONFIRM<br>
     * * CANCELLED - Order is cancelled<br>
     * 
     * @type {string}
     * @memberof StatusDetail
     */
    acquirementStatus: StatusDetailAcquirementStatusEnum;
    /**
     * Whether the frozen is true or not
     * @type {string}
     * @memberof StatusDetail
     */
    frozen?: string;
    /**
     * Whether the cancelled is true or not
     * @type {string}
     * @memberof StatusDetail
     */
    cancelled?: string;
}


/**
 * @export
 */
export const StatusDetailAcquirementStatusEnum = {
    Init: 'INIT',
    Success: 'SUCCESS',
    Closed: 'CLOSED',
    Paying: 'PAYING',
    MerchantAccept: 'MERCHANT_ACCEPT',
    Cancelled: 'CANCELLED'
} as const;
export type StatusDetailAcquirementStatusEnum = typeof StatusDetailAcquirementStatusEnum[keyof typeof StatusDetailAcquirementStatusEnum];


/**
 * Check if a given object implements the StatusDetail interface.
 */
export function instanceOfStatusDetail(value: object): value is StatusDetail {
    if (!('acquirementStatus' in value) || value['acquirementStatus'] === undefined) return false;
    return true;
}

export function StatusDetailFromJSON(json: any): StatusDetail {
    return StatusDetailFromJSONTyped(json, false);
}

export function StatusDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatusDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'acquirementStatus': json['acquirementStatus'],
        'frozen': json['frozen'] == null ? undefined : json['frozen'],
        'cancelled': json['cancelled'] == null ? undefined : json['cancelled'],
    };
}

export function StatusDetailToJSON(json: any): StatusDetail {
    return StatusDetailToJSONTyped(json, false);
}

export function StatusDetailToJSONTyped(value?: StatusDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'acquirementStatus': value['acquirementStatus'],
        'frozen': value['frozen'],
        'cancelled': value['cancelled'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    acquirementStatus: {
        maxLength: 64,
    },
    frozen: {
        maxLength: 64,
    },
    cancelled: {
        maxLength: 64,
    },
}

export function validateStatusDetail(value: StatusDetail): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('acquirementStatus', value.acquirementStatus, propertyValidationAttributesMap['acquirementStatus']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('frozen', value.frozen, propertyValidationAttributesMap['frozen']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cancelled', value.cancelled, propertyValidationAttributesMap['cancelled']));

    return validationErrorContexts;
}
