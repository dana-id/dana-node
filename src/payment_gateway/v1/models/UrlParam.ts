/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface UrlParam
 */
export interface UrlParam {
    /**
     * URL link
     * @type {string}
     * @memberof UrlParam
     */
    url: string;
    /**
     * Url param. The enums:<br>
     * * PAY_RETURN - When finish payment, DANA will notify to the URL that has been defined by<br>
     * * NOTIFICATION - After the payment, the user will be redirected to merchant page, this is mandatory<br>
     * 
     * @type {string}
     * @memberof UrlParam
     */
    type: UrlParamTypeEnum;
    /**
     * Deeplink URL or not
     * @type {string}
     * @memberof UrlParam
     */
    isDeeplink: string;
}


/**
 * @export
 */
export const UrlParamTypeEnum = {
    PayReturn: 'PAY_RETURN',
    Notification: 'NOTIFICATION'
} as const;
export type UrlParamTypeEnum = typeof UrlParamTypeEnum[keyof typeof UrlParamTypeEnum];


/**
 * Check if a given object implements the UrlParam interface.
 */
export function instanceOfUrlParam(value: object): value is UrlParam {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('isDeeplink' in value) || value['isDeeplink'] === undefined) return false;
    return true;
}

export function UrlParamFromJSON(json: any): UrlParam {
    return UrlParamFromJSONTyped(json, false);
}

export function UrlParamFromJSONTyped(json: any, ignoreDiscriminator: boolean): UrlParam {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'type': json['type'],
        'isDeeplink': json['isDeeplink'],
    };
}

export function UrlParamToJSON(json: any): UrlParam {
    return UrlParamToJSONTyped(json, false);
}

export function UrlParamToJSONTyped(value?: UrlParam | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'type': value['type'],
        'isDeeplink': value['isDeeplink'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    url: {
        maxLength: 512,
    },
    type: {
        maxLength: 32,
    },
    isDeeplink: {
        maxLength: 1,
    },
}

export function validateUrlParam(value: UrlParam): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('url', value.url, propertyValidationAttributesMap['url']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('type', value.type, propertyValidationAttributesMap['type']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('isDeeplink', value.isDeeplink, propertyValidationAttributesMap['isDeeplink']));

    return validationErrorContexts;
}
