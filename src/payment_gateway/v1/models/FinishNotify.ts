/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { FinishNotifyAdditionalInfo } from './FinishNotifyAdditionalInfo';
import {
    validateFinishNotifyAdditionalInfo,
    FinishNotifyAdditionalInfoFromJSON,
    FinishNotifyAdditionalInfoFromJSONTyped,
    FinishNotifyAdditionalInfoToJSON,
    FinishNotifyAdditionalInfoToJSONTyped,
} from './FinishNotifyAdditionalInfo';

/**
 * 
 * @export
 * @interface FinishNotify
 */
export interface FinishNotify {
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof FinishNotify
     */
    originalPartnerReferenceNo: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof FinishNotify
     */
    originalReferenceNo: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof FinishNotify
     */
    originalExternalId?: string;
    /**
     * Unique identifier for each merchant
     * @type {string}
     * @memberof FinishNotify
     */
    merchantId: string;
    /**
     * Sub merchant identifier
     * @type {string}
     * @memberof FinishNotify
     */
    subMerchantId?: string;
    /**
     * 
     * @type {Money}
     * @memberof FinishNotify
     */
    amount: Money;
    /**
     * Transaction status code:<br>
     * - 00 = Success<br>
     * - 05 = Cancelled (expired)<br>
     * 
     * @type {string}
     * @memberof FinishNotify
     */
    latestTransactionStatus: string;
    /**
     * Description of transaction status
     * @type {string}
     * @memberof FinishNotify
     */
    transactionStatusDesc?: string;
    /**
     * Transaction creation time (GMT+7, Jakarta)
     * @type {string}
     * @memberof FinishNotify
     */
    createdTime: string;
    /**
     * Transaction completion time (GMT+7, Jakarta)
     * @type {string}
     * @memberof FinishNotify
     */
    finishedTime: string;
    /**
     * Store identifier
     * @type {string}
     * @memberof FinishNotify
     */
    externalStoreId?: string;
    /**
     * 
     * @type {FinishNotifyAdditionalInfo}
     * @memberof FinishNotify
     */
    additionalInfo?: FinishNotifyAdditionalInfo;
}

/**
 * Check if a given object implements the FinishNotify interface.
 */
export function instanceOfFinishNotify(value: object): value is FinishNotify {
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined) return false;
    if (!('originalReferenceNo' in value) || value['originalReferenceNo'] === undefined) return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('latestTransactionStatus' in value) || value['latestTransactionStatus'] === undefined) return false;
    if (!('createdTime' in value) || value['createdTime'] === undefined) return false;
    if (!('finishedTime' in value) || value['finishedTime'] === undefined) return false;
    return true;
}

export function FinishNotifyFromJSON(json: any): FinishNotify {
    return FinishNotifyFromJSONTyped(json, false);
}

export function FinishNotifyFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinishNotify {
    if (json == null) {
        return json;
    }
    return {
        
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'amount': MoneyFromJSON(json['amount']),
        'latestTransactionStatus': json['latestTransactionStatus'],
        'transactionStatusDesc': json['transactionStatusDesc'] == null ? undefined : json['transactionStatusDesc'],
        'createdTime': json['createdTime'],
        'finishedTime': json['finishedTime'],
        'externalStoreId': json['externalStoreId'] == null ? undefined : json['externalStoreId'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : FinishNotifyAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function FinishNotifyToJSON(json: any): FinishNotify {
    return FinishNotifyToJSONTyped(json, false);
}

export function FinishNotifyToJSONTyped(value?: FinishNotify | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'amount': MoneyToJSON(value['amount']),
        'latestTransactionStatus': value['latestTransactionStatus'],
        'transactionStatusDesc': value['transactionStatusDesc'],
        'createdTime': value['createdTime'],
        'finishedTime': value['finishedTime'],
        'externalStoreId': value['externalStoreId'],
        'additionalInfo': FinishNotifyAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 32,
    },
    latestTransactionStatus: {
        maxLength: 2,
    },
    transactionStatusDesc: {
        maxLength: 50,
    },
    createdTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    finishedTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    externalStoreId: {
        maxLength: 64,
    },
}

export function validateFinishNotify(value: FinishNotify): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('latestTransactionStatus', value.latestTransactionStatus, propertyValidationAttributesMap['latestTransactionStatus']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionStatusDesc', value.transactionStatusDesc, propertyValidationAttributesMap['transactionStatusDesc']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('createdTime', value.createdTime, propertyValidationAttributesMap['createdTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('finishedTime', value.finishedTime, propertyValidationAttributesMap['finishedTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalStoreId', value.externalStoreId, propertyValidationAttributesMap['externalStoreId']));

    validationErrorContexts.push(...validateFinishNotifyAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
