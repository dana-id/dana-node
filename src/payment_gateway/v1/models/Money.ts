/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Value of amount. Following ISO-4217, for IDR the value includes 2 decimal digits separated with point e.g. IDR 10.000,- will be placed with 10000.00
     * @type {string}
     * @memberof Money
     */
    value: string;
    /**
     * Currency of money following ISO-4217
     * @type {string}
     * @memberof Money
     */
    currency: string;
}

/**
 * Check if a given object implements the Money interface.
 */
export function instanceOfMoney(value: object): value is Money {
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    return true;
}

export function MoneyFromJSON(json: any): Money {
    return MoneyFromJSONTyped(json, false);
}

export function MoneyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Money {
    if (json == null) {
        return json;
    }
    return {
        
        'value': json['value'],
        'currency': json['currency'],
    };
}

export function MoneyToJSON(json: any): Money {
    return MoneyToJSONTyped(json, false);
}

export function MoneyToJSONTyped(value?: Money | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'value': value['value'],
        'currency': value['currency'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    value: {
        maxLength: 19,
    },
    currency: {
        maxLength: 3,
    },
}

export function validateMoney(value: Money): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('value', value.value, propertyValidationAttributesMap['value']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('currency', value.currency, propertyValidationAttributesMap['currency']));

    return validationErrorContexts;
}
