/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface CancelOrderResponse
 */
export interface CancelOrderResponse {
    /**
     * Refer to response code list
     * @type {string}
     * @memberof CancelOrderResponse
     */
    responseCode: string;
    /**
     * Refer to response code list
     * @type {string}
     * @memberof CancelOrderResponse
     */
    responseMessage: string;
    /**
     * Original transaction identifier on DANA system
     * @type {string}
     * @memberof CancelOrderResponse
     */
    originalReferenceNo?: string;
    /**
     * Original transaction identifier on partner system
     * @type {string}
     * @memberof CancelOrderResponse
     */
    originalPartnerReferenceNo: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof CancelOrderResponse
     */
    originalExternalId?: string;
    /**
     * Cancellation date time, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof CancelOrderResponse
     */
    cancelTime?: string;
    /**
     * Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof CancelOrderResponse
     */
    transactionDate?: string;
    /**
     * Additional information
     * @type {object}
     * @memberof CancelOrderResponse
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the CancelOrderResponse interface.
 */
export function instanceOfCancelOrderResponse(value: object): value is CancelOrderResponse {
    if (!('responseCode' in value) || value['responseCode'] === undefined) return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined) return false;
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined) return false;
    return true;
}

export function CancelOrderResponseFromJSON(json: any): CancelOrderResponse {
    return CancelOrderResponseFromJSONTyped(json, false);
}

export function CancelOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancelOrderResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'cancelTime': json['cancelTime'] == null ? undefined : json['cancelTime'],
        'transactionDate': json['transactionDate'] == null ? undefined : json['transactionDate'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function CancelOrderResponseToJSON(json: any): CancelOrderResponse {
    return CancelOrderResponseToJSONTyped(json, false);
}

export function CancelOrderResponseToJSONTyped(value?: CancelOrderResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'cancelTime': value['cancelTime'],
        'transactionDate': value['transactionDate'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    cancelTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    transactionDate: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
}

export function validateCancelOrderResponse(value: CancelOrderResponse): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cancelTime', value.cancelTime, propertyValidationAttributesMap['cancelTime']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionDate', value.transactionDate, propertyValidationAttributesMap['transactionDate']));

    return validationErrorContexts;
}
