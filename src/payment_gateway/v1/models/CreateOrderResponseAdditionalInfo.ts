/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface CreateOrderResponseAdditionalInfo
 */
export interface CreateOrderResponseAdditionalInfo {
    /**
     * Additional information of payment code. Only use for Payment Gateway service. Present if payment using Virtual Account/QRIS
     * @type {string}
     * @memberof CreateOrderResponseAdditionalInfo
     */
    paymentCode?: string;
}

/**
 * Check if a given object implements the CreateOrderResponseAdditionalInfo interface.
 */
export function instanceOfCreateOrderResponseAdditionalInfo(value: object): value is CreateOrderResponseAdditionalInfo {
    return true;
}

export function CreateOrderResponseAdditionalInfoFromJSON(json: any): CreateOrderResponseAdditionalInfo {
    return CreateOrderResponseAdditionalInfoFromJSONTyped(json, false);
}

export function CreateOrderResponseAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrderResponseAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'paymentCode': json['paymentCode'] == null ? undefined : json['paymentCode'],
    };
}

export function CreateOrderResponseAdditionalInfoToJSON(json: any): CreateOrderResponseAdditionalInfo {
    return CreateOrderResponseAdditionalInfoToJSONTyped(json, false);
}

export function CreateOrderResponseAdditionalInfoToJSONTyped(value?: CreateOrderResponseAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'paymentCode': value['paymentCode'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
}

export function validateCreateOrderResponseAdditionalInfo(value: CreateOrderResponseAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    return validationErrorContexts;
}
