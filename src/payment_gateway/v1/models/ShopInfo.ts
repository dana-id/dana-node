/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
/**
 * 
 * @export
 * @interface ShopInfo
 */
export interface ShopInfo {
    /**
     * Information of shop identifier. Required if externalShopId is blank
     * @type {string}
     * @memberof ShopInfo
     */
    shopId?: string;
    /**
     * Information of external shop identifier. Required if shopId is blank
     * @type {string}
     * @memberof ShopInfo
     */
    externalShopId?: string;
    /**
     * Information of operator identifier
     * @type {string}
     * @memberof ShopInfo
     */
    operatorId?: string;
    /**
     * Information of shop address
     * @type {string}
     * @memberof ShopInfo
     */
    shopAddress?: string;
    /**
     * Information of division identifier
     * @type {string}
     * @memberof ShopInfo
     */
    divisionId?: string;
    /**
     * Information of external division identifier
     * @type {string}
     * @memberof ShopInfo
     */
    externalDivisionId?: string;
    /**
     * Information of division type
     * @type {string}
     * @memberof ShopInfo
     */
    divisionType?: string;
    /**
     * Information of shop name
     * @type {string}
     * @memberof ShopInfo
     */
    shopName?: string;
}

/**
 * Check if a given object implements the ShopInfo interface.
 */
export function instanceOfShopInfo(value: object): value is ShopInfo {
    return true;
}

export function ShopInfoFromJSON(json: any): ShopInfo {
    return ShopInfoFromJSONTyped(json, false);
}

export function ShopInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShopInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'shopId': json['shopId'] == null ? undefined : json['shopId'],
        'externalShopId': json['externalShopId'] == null ? undefined : json['externalShopId'],
        'operatorId': json['operatorId'] == null ? undefined : json['operatorId'],
        'shopAddress': json['shopAddress'] == null ? undefined : json['shopAddress'],
        'divisionId': json['divisionId'] == null ? undefined : json['divisionId'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'divisionType': json['divisionType'] == null ? undefined : json['divisionType'],
        'shopName': json['shopName'] == null ? undefined : json['shopName'],
    };
}

export function ShopInfoToJSON(json: any): ShopInfo {
    return ShopInfoToJSONTyped(json, false);
}

export function ShopInfoToJSONTyped(value?: ShopInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'shopId': value['shopId'],
        'externalShopId': value['externalShopId'],
        'operatorId': value['operatorId'],
        'shopAddress': value['shopAddress'],
        'divisionId': value['divisionId'],
        'externalDivisionId': value['externalDivisionId'],
        'divisionType': value['divisionType'],
        'shopName': value['shopName'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    shopId: {
        maxLength: 64,
    },
    externalShopId: {
        maxLength: 64,
    },
    operatorId: {
        maxLength: 32,
    },
    shopAddress: {
        maxLength: 256,
    },
    divisionId: {
        maxLength: 64,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    divisionType: {
        maxLength: 32,
    },
    shopName: {
        maxLength: 128,
    },
}

export function validateShopInfo(value: ShopInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('shopId', value.shopId, propertyValidationAttributesMap['shopId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalShopId', value.externalShopId, propertyValidationAttributesMap['externalShopId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('operatorId', value.operatorId, propertyValidationAttributesMap['operatorId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('shopAddress', value.shopAddress, propertyValidationAttributesMap['shopAddress']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionId', value.divisionId, propertyValidationAttributesMap['divisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('divisionType', value.divisionType, propertyValidationAttributesMap['divisionType']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('shopName', value.shopName, propertyValidationAttributesMap['shopName']));

    return validationErrorContexts;
}
