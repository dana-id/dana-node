/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface RefundOptionBill
 */
export interface RefundOptionBill {
    /**
     * Payment method name. The enums:<br>
     *   * BALANCE - Payment method with balance<br>
     *   * COUPON - Payment method with coupon<br>
     *   * NET_BANKING - Payment method with internet banking<br>
     *   * CREDIT_CARD - Payment method with credit card<br>
     *   * DEBIT_CARD - Payment method with debit card<br>
     *   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>
     *   * OTC - Payment method with OTC<br>
     *   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>
     *   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>
     *   * ONLINE_CREDIT - Payment method with online Credit<br>
     *   * LOAN_CREDIT - Payment method with DANA Cicil<br>
     *   * NETWORK_PAY - Payment method with e-wallet<br>
     *   * CARD - Payment method with card<br>
     * 
     * @type {string}
     * @memberof RefundOptionBill
     */
    payMethod?: RefundOptionBillPayMethodEnum;
    /**
     * Trans amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof RefundOptionBill
     */
    transAmount?: Money;
}


/**
 * @export
 */
export const RefundOptionBillPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT',
    NetworkPay: 'NETWORK_PAY',
    Card: 'CARD'
} as const;
export type RefundOptionBillPayMethodEnum = typeof RefundOptionBillPayMethodEnum[keyof typeof RefundOptionBillPayMethodEnum] | '';


/**
 * Check if a given object implements the RefundOptionBill interface.
 */
export function instanceOfRefundOptionBill(value: object): value is RefundOptionBill {
    return true;
}

export function RefundOptionBillFromJSON(json: any): RefundOptionBill {
    return RefundOptionBillFromJSONTyped(json, false);
}

export function RefundOptionBillFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundOptionBill {
    if (json == null) {
        return json;
    }
    return {
        
        'payMethod': json['payMethod'] == null ? undefined : json['payMethod'],
        'transAmount': json['transAmount'] == null ? undefined : MoneyFromJSON(json['transAmount']),
    };
}

export function RefundOptionBillToJSON(json: any): RefundOptionBill {
    return RefundOptionBillToJSONTyped(json, false);
}

export function RefundOptionBillToJSONTyped(value?: RefundOptionBill | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payMethod': value['payMethod'],
        'transAmount': MoneyToJSON(value['transAmount']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payMethod: {
        maxLength: 64,
    },
}

export function validateRefundOptionBill(value: RefundOptionBill): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));

    validationErrorContexts.push(...validateMoney(value.transAmount));

    return validationErrorContexts;
}
