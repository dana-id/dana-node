/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface PromoInfo
 */
export interface PromoInfo {
    /**
     * 
     * @type {Money}
     * @memberof PromoInfo
     */
    promoAmount: Money;
    /**
     * Promo identifier
     * @type {string}
     * @memberof PromoInfo
     */
    promoId: string;
    /**
     * Type's of promo, value always DIRECT_DISCOUNT
     * @type {string}
     * @memberof PromoInfo
     */
    promoType: string;
}

/**
 * Check if a given object implements the PromoInfo interface.
 */
export function instanceOfPromoInfo(value: object): value is PromoInfo {
    if (!('promoAmount' in value) || value['promoAmount'] === undefined) return false;
    if (!('promoId' in value) || value['promoId'] === undefined) return false;
    if (!('promoType' in value) || value['promoType'] === undefined) return false;
    return true;
}

export function PromoInfoFromJSON(json: any): PromoInfo {
    return PromoInfoFromJSONTyped(json, false);
}

export function PromoInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromoInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'promoAmount': MoneyFromJSON(json['promoAmount']),
        'promoId': json['promoId'],
        'promoType': json['promoType'],
    };
}

export function PromoInfoToJSON(json: any): PromoInfo {
    return PromoInfoToJSONTyped(json, false);
}

export function PromoInfoToJSONTyped(value?: PromoInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'promoAmount': MoneyToJSON(value['promoAmount']),
        'promoId': value['promoId'],
        'promoType': value['promoType'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    promoId: {
        maxLength: 64,
    },
    promoType: {
        maxLength: 32,
    },
}

export function validatePromoInfo(value: PromoInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...validateMoney(value.promoAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoId', value.promoId, propertyValidationAttributesMap['promoId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('promoType', value.promoType, propertyValidationAttributesMap['promoType']));

    return validationErrorContexts;
}
