/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { OrderApiObject } from './OrderApiObject';
import {
    validateOrderApiObject,
    OrderApiObjectFromJSON,
    OrderApiObjectFromJSONTyped,
    OrderApiObjectToJSON,
    OrderApiObjectToJSONTyped,
} from './OrderApiObject';
import type { EnvInfo } from './EnvInfo';
import {
    validateEnvInfo,
    EnvInfoFromJSON,
    EnvInfoFromJSONTyped,
    EnvInfoToJSON,
    EnvInfoToJSONTyped,
} from './EnvInfo';

/**
 * 
 * @export
 * @interface CreateOrderByApiAdditionalInfo
 */
export interface CreateOrderByApiAdditionalInfo {
    /**
     * Additional information of merchant category code. This parameter is used to identify the type of business in which a merchant is engaged. Refer to https://dashboard.dana.id/api-docs/read/197#OpenAPI-MerchantCategoryCode
     * @type {string}
     * @memberof CreateOrderByApiAdditionalInfo
     */
    mcc: string;
    /**
     * Additional information of extend such as partner passthrough and risk information
     * @type {string}
     * @memberof CreateOrderByApiAdditionalInfo
     */
    extendInfo?: string;
    /**
     * 
     * @type {EnvInfo}
     * @memberof CreateOrderByApiAdditionalInfo
     */
    envInfo: EnvInfo;
    /**
     * 
     * @type {OrderApiObject}
     * @memberof CreateOrderByApiAdditionalInfo
     */
    order?: OrderApiObject;
}

/**
 * Check if a given object implements the CreateOrderByApiAdditionalInfo interface.
 */
export function instanceOfCreateOrderByApiAdditionalInfo(value: object): value is CreateOrderByApiAdditionalInfo {
    if (!('mcc' in value) || value['mcc'] === undefined) return false;
    if (!('envInfo' in value) || value['envInfo'] === undefined) return false;
    return true;
}

export function CreateOrderByApiAdditionalInfoFromJSON(json: any): CreateOrderByApiAdditionalInfo {
    return CreateOrderByApiAdditionalInfoFromJSONTyped(json, false);
}

export function CreateOrderByApiAdditionalInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrderByApiAdditionalInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'mcc': json['mcc'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'envInfo': EnvInfoFromJSON(json['envInfo']),
        'order': json['order'] == null ? undefined : OrderApiObjectFromJSON(json['order']),
    };
}

export function CreateOrderByApiAdditionalInfoToJSON(json: any): CreateOrderByApiAdditionalInfo {
    return CreateOrderByApiAdditionalInfoToJSONTyped(json, false);
}

export function CreateOrderByApiAdditionalInfoToJSONTyped(value?: CreateOrderByApiAdditionalInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mcc': value['mcc'],
        'extendInfo': value['extendInfo'],
        'envInfo': EnvInfoToJSON(value['envInfo']),
        'order': OrderApiObjectToJSON(value['order']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    mcc: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
}

export function validateCreateOrderByApiAdditionalInfo(value: CreateOrderByApiAdditionalInfo): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('mcc', value.mcc, propertyValidationAttributesMap['mcc']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));

    validationErrorContexts.push(...validateEnvInfo(value.envInfo));

    validationErrorContexts.push(...validateOrderApiObject(value.order));

    return validationErrorContexts;
}
