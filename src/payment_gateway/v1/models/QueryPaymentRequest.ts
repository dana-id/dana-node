/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';

/**
 * 
 * @export
 * @interface QueryPaymentRequest
 */
export interface QueryPaymentRequest {
    /**
     * Original transaction identifier on partner system. Required if originalReferenceNo is not filled
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    originalPartnerReferenceNo?: string;
    /**
     * Original transaction identifier on DANA system. Required if originalPartnerReferenceNo is not filled
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    originalReferenceNo?: string;
    /**
     * Original external identifier on header message
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    originalExternalId?: string;
    /**
     * Transaction type indicator is based on the service code of the original transaction request:<br>
     * - IPG Cashier Pay - SNAP: 54<br>
     * - QRIS CPM (Acquirer) - SNAP: 60<br>
     * - QRIS MPM (Acquirer) - SNAP: 47<br>
     * - Payment Gateway: 54<br>
     * 
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    serviceCode: string;
    /**
     * Transaction date, in format YYYY-MM-DDTHH:mm:ss+07:00. Time must be in GMT+7 (Jakarta time)
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    transactionDate?: string;
    /**
     * Amount. Contains two sub-fields:<br>
     * 1. Value: Transaction amount, including the cents<br>
     * 2. Currency: Currency code based on ISO<br>
     * 
     * @type {Money}
     * @memberof QueryPaymentRequest
     */
    amount?: Money;
    /**
     * Merchant identifier that is unique per each merchant
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    merchantId: string;
    /**
     * Information of sub merchant identifier
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    subMerchantId?: string;
    /**
     * Store identifier to indicate to which store this payment belongs to
     * @type {string}
     * @memberof QueryPaymentRequest
     */
    externalStoreId?: string;
    /**
     * Additional information
     * @type {object}
     * @memberof QueryPaymentRequest
     */
    additionalInfo?: object;
}

/**
 * Check if a given object implements the QueryPaymentRequest interface.
 */
export function instanceOfQueryPaymentRequest(value: object): value is QueryPaymentRequest {
    if (!('serviceCode' in value) || value['serviceCode'] === undefined) return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined) return false;
    return true;
}

export function QueryPaymentRequestFromJSON(json: any): QueryPaymentRequest {
    return QueryPaymentRequestFromJSONTyped(json, false);
}

export function QueryPaymentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryPaymentRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'] == null ? undefined : json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'serviceCode': json['serviceCode'],
        'transactionDate': json['transactionDate'] == null ? undefined : json['transactionDate'],
        'amount': json['amount'] == null ? undefined : MoneyFromJSON(json['amount']),
        'merchantId': json['merchantId'],
        'subMerchantId': json['subMerchantId'] == null ? undefined : json['subMerchantId'],
        'externalStoreId': json['externalStoreId'] == null ? undefined : json['externalStoreId'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}

export function QueryPaymentRequestToJSON(json: any): QueryPaymentRequest {
    return QueryPaymentRequestToJSONTyped(json, false);
}

export function QueryPaymentRequestToJSONTyped(value?: QueryPaymentRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'serviceCode': value['serviceCode'],
        'transactionDate': value['transactionDate'],
        'amount': MoneyToJSON(value['amount']),
        'merchantId': value['merchantId'],
        'subMerchantId': value['subMerchantId'],
        'externalStoreId': value['externalStoreId'],
        'additionalInfo': value['additionalInfo'],
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    serviceCode: {
        maxLength: 2,
    },
    transactionDate: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    merchantId: {
        maxLength: 64,
    },
    subMerchantId: {
        maxLength: 32,
    },
    externalStoreId: {
        maxLength: 64,
    },
}

export function validateQueryPaymentRequest(value: QueryPaymentRequest): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('serviceCode', value.serviceCode, propertyValidationAttributesMap['serviceCode']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('transactionDate', value.transactionDate, propertyValidationAttributesMap['transactionDate']));

    validationErrorContexts.push(...validateMoney(value.amount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('subMerchantId', value.subMerchantId, propertyValidationAttributesMap['subMerchantId']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('externalStoreId', value.externalStoreId, propertyValidationAttributesMap['externalStoreId']));

    return validationErrorContexts;
}
