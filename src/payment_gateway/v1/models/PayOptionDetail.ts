/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */

import type { PropertyValidationAttribute, ValidationErrorContext } from '../../../runtime';
import { mapValues, ValidationUtil } from '../../../runtime';
import type { Money } from './Money';
import {
    validateMoney,
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { PayOptionAdditionalInfo } from './PayOptionAdditionalInfo';
import {
    validatePayOptionAdditionalInfo,
    PayOptionAdditionalInfoFromJSON,
    PayOptionAdditionalInfoFromJSONTyped,
    PayOptionAdditionalInfoToJSON,
    PayOptionAdditionalInfoToJSONTyped,
} from './PayOptionAdditionalInfo';

/**
 * 
 * @export
 * @interface PayOptionDetail
 */
export interface PayOptionDetail {
    /**
     * Payment method that used to payment. The enums:<br>
     *   * BALANCE - Payment method with balance<br>
     *   * COUPON - Payment method with coupon<br>
     *   * NET_BANKING - Payment method with internet banking<br>
     *   * CREDIT_CARD - Payment method with credit card<br>
     *   * DEBIT_CARD - Payment method with debit card<br>
     *   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>
     *   * OTC - Payment method with OTC<br>
     *   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>
     *   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>
     *   * ONLINE_CREDIT - Payment method with online Credit<br>
     *   * LOAN_CREDIT - Payment method with DANA Cicil<br>
     *   * NETWORK_PAY - Payment method with e-wallet<br>
     * 
     * @type {string}
     * @memberof PayOptionDetail
     */
    payMethod: PayOptionDetailPayMethodEnum;
    /**
     * Payment option that available to used to payment, depends on the payment method. The enums:<br>
     *   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>
     *   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>
     *   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>
     *   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>
     *   * NETWORK_PAY_PG_CARD - Payment method with Card<br>
     *   * NETWORK_PAY_PG_QRIS - Payment method with QRIS<br>
     *   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>
     *   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>
     *   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>
     *   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>
     *   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>
     *   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>
     *   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>
     * 
     * @type {string}
     * @memberof PayOptionDetail
     */
    payOption: PayOptionDetailPayOptionEnum;
    /**
     * 
     * @type {Money}
     * @memberof PayOptionDetail
     */
    transAmount: Money;
    /**
     * 
     * @type {Money}
     * @memberof PayOptionDetail
     */
    feeAmount?: Money;
    /**
     * Token that used for payment with card
     * @type {string}
     * @memberof PayOptionDetail
     */
    cardToken?: string;
    /**
     * Merchant token used for this payment
     * @type {string}
     * @memberof PayOptionDetail
     */
    merchantToken?: string;
    /**
     * 
     * @type {PayOptionAdditionalInfo}
     * @memberof PayOptionDetail
     */
    additionalInfo?: PayOptionAdditionalInfo;
}


/**
 * @export
 */
export const PayOptionDetailPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT',
    NetworkPay: 'NETWORK_PAY'
} as const;
export type PayOptionDetailPayMethodEnum = typeof PayOptionDetailPayMethodEnum[keyof typeof PayOptionDetailPayMethodEnum];

/**
 * @export
 */
export const PayOptionDetailPayOptionEnum = {
    NetworkPayPgSpay: 'NETWORK_PAY_PG_SPAY',
    NetworkPayPgOvo: 'NETWORK_PAY_PG_OVO',
    NetworkPayPgGopay: 'NETWORK_PAY_PG_GOPAY',
    NetworkPayPgLinkaja: 'NETWORK_PAY_PG_LINKAJA',
    NetworkPayPgCard: 'NETWORK_PAY_PG_CARD',
    NetworkPayPgQris: 'NETWORK_PAY_PG_QRIS',
    VirtualAccountBca: 'VIRTUAL_ACCOUNT_BCA',
    VirtualAccountBni: 'VIRTUAL_ACCOUNT_BNI',
    VirtualAccountMandiri: 'VIRTUAL_ACCOUNT_MANDIRI',
    VirtualAccountBri: 'VIRTUAL_ACCOUNT_BRI',
    VirtualAccountBtpn: 'VIRTUAL_ACCOUNT_BTPN',
    VirtualAccountCimb: 'VIRTUAL_ACCOUNT_CIMB',
    VirtualAccountPermata: 'VIRTUAL_ACCOUNT_PERMATA'
} as const;
export type PayOptionDetailPayOptionEnum = typeof PayOptionDetailPayOptionEnum[keyof typeof PayOptionDetailPayOptionEnum];


/**
 * Check if a given object implements the PayOptionDetail interface.
 */
export function instanceOfPayOptionDetail(value: object): value is PayOptionDetail {
    if (!('payMethod' in value) || value['payMethod'] === undefined) return false;
    if (!('payOption' in value) || value['payOption'] === undefined) return false;
    if (!('transAmount' in value) || value['transAmount'] === undefined) return false;
    return true;
}

export function PayOptionDetailFromJSON(json: any): PayOptionDetail {
    return PayOptionDetailFromJSONTyped(json, false);
}

export function PayOptionDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayOptionDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'payMethod': json['payMethod'],
        'payOption': json['payOption'],
        'transAmount': MoneyFromJSON(json['transAmount']),
        'feeAmount': json['feeAmount'] == null ? undefined : MoneyFromJSON(json['feeAmount']),
        'cardToken': json['cardToken'] == null ? undefined : json['cardToken'],
        'merchantToken': json['merchantToken'] == null ? undefined : json['merchantToken'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : PayOptionAdditionalInfoFromJSON(json['additionalInfo']),
    };
}

export function PayOptionDetailToJSON(json: any): PayOptionDetail {
    return PayOptionDetailToJSONTyped(json, false);
}

export function PayOptionDetailToJSONTyped(value?: PayOptionDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payMethod': value['payMethod'],
        'payOption': value['payOption'],
        'transAmount': MoneyToJSON(value['transAmount']),
        'feeAmount': MoneyToJSON(value['feeAmount']),
        'cardToken': value['cardToken'],
        'merchantToken': value['merchantToken'],
        'additionalInfo': PayOptionAdditionalInfoToJSON(value['additionalInfo']),
    };
}

const propertyValidationAttributesMap: { [property: string]: PropertyValidationAttribute } = {
    payMethod: {
        maxLength: 64,
    },
    payOption: {
        maxLength: 64,
    },
    cardToken: {
        maxLength: 64,
    },
    merchantToken: {
        maxLength: 64,
    },
}

export function validatePayOptionDetail(value: PayOptionDetail): ValidationErrorContext[] {
    const validationErrorContexts: ValidationErrorContext[] = [];

    if (value == null) {
        return validationErrorContexts;
    }

    validationErrorContexts.push(...ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('payOption', value.payOption, propertyValidationAttributesMap['payOption']));

    validationErrorContexts.push(...validateMoney(value.transAmount));

    validationErrorContexts.push(...validateMoney(value.feeAmount));

    validationErrorContexts.push(...ValidationUtil.validateProperty('cardToken', value.cardToken, propertyValidationAttributesMap['cardToken']));

    validationErrorContexts.push(...ValidationUtil.validateProperty('merchantToken', value.merchantToken, propertyValidationAttributesMap['merchantToken']));

    validationErrorContexts.push(...validatePayOptionAdditionalInfo(value.additionalInfo));

    return validationErrorContexts;
}
