"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateDivisionRequestPgDivisionFlagEnum = exports.UpdateDivisionRequestSizeTypeEnum = exports.UpdateDivisionRequestOwnerIdTypeEnum = exports.UpdateDivisionRequestBusinessEntityEnum = exports.UpdateDivisionRequestDivisionIdTypeEnum = exports.UpdateDivisionRequestDivisionTypeEnum = void 0;
exports.instanceOfUpdateDivisionRequest = instanceOfUpdateDivisionRequest;
exports.UpdateDivisionRequestFromJSON = UpdateDivisionRequestFromJSON;
exports.UpdateDivisionRequestFromJSONTyped = UpdateDivisionRequestFromJSONTyped;
exports.UpdateDivisionRequestToJSON = UpdateDivisionRequestToJSON;
exports.UpdateDivisionRequestToJSONTyped = UpdateDivisionRequestToJSONTyped;
exports.validateUpdateDivisionRequest = validateUpdateDivisionRequest;
const runtime_1 = require("../../../runtime");
const BusinessDocs_1 = require("./BusinessDocs");
const UserName_1 = require("./UserName");
const MobileNoInfo_1 = require("./MobileNoInfo");
const PicInfo_1 = require("./PicInfo");
const AddressInfo_1 = require("./AddressInfo");
/**
 * @export
 */
exports.UpdateDivisionRequestDivisionTypeEnum = {
    Region: 'REGION',
    Area: 'AREA',
    Branch: 'BRANCH',
    Outlet: 'OUTLET',
    Store: 'STORE',
    Kiosk: 'KIOSK',
    Stall: 'STALL',
    Counter: 'COUNTER',
    Booth: 'BOOTH',
    PointOfSale: 'POINT_OF_SALE',
    VendingMachine: 'VENDING_MACHINE'
};
/**
 * @export
 */
exports.UpdateDivisionRequestDivisionIdTypeEnum = {
    InnerId: 'INNER_ID',
    ExternalId: 'EXTERNAL_ID'
};
/**
 * @export
 */
exports.UpdateDivisionRequestBusinessEntityEnum = {
    Pt: 'pt',
    Cv: 'cv',
    Individu: 'individu',
    UsahaDagang: 'usaha_dagang',
    Yayasan: 'yayasan',
    Koperasi: 'koperasi'
};
/**
 * @export
 */
exports.UpdateDivisionRequestOwnerIdTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Passport: 'PASSPORT',
    Siup: 'SIUP',
    Nib: 'NIB'
};
/**
 * @export
 */
exports.UpdateDivisionRequestSizeTypeEnum = {
    Umi: 'UMI',
    Uke: 'UKE',
    Ume: 'UME',
    Ube: 'UBE',
    Ure: 'URE'
};
/**
 * @export
 */
exports.UpdateDivisionRequestPgDivisionFlagEnum = {
    True: 'true',
    False: 'false'
};
/**
 * Check if a given object implements the UpdateDivisionRequest interface.
 */
function instanceOfUpdateDivisionRequest(value) {
    if (!('merchantId' in value) || value['merchantId'] === undefined)
        return false;
    if (!('divisionName' in value) || value['divisionName'] === undefined)
        return false;
    if (!('divisionAddress' in value) || value['divisionAddress'] === undefined)
        return false;
    if (!('divisionType' in value) || value['divisionType'] === undefined)
        return false;
    if (!('divisionIdType' in value) || value['divisionIdType'] === undefined)
        return false;
    if (!('newExternalDivisionId' in value) || value['newExternalDivisionId'] === undefined)
        return false;
    if (!('mccCodes' in value) || value['mccCodes'] === undefined)
        return false;
    if (!('extInfo' in value) || value['extInfo'] === undefined)
        return false;
    return true;
}
function UpdateDivisionRequestFromJSON(json) {
    return UpdateDivisionRequestFromJSONTyped(json, false);
}
function UpdateDivisionRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'merchantId': json['merchantId'],
        'divisionId': json['divisionId'] == null ? undefined : json['divisionId'],
        'divisionName': json['divisionName'],
        'divisionAddress': (0, AddressInfo_1.AddressInfoFromJSON)(json['divisionAddress']),
        'divisionDescription': json['divisionDescription'] == null ? undefined : json['divisionDescription'],
        'divisionType': json['divisionType'],
        'divisionIdType': json['divisionIdType'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'newExternalDivisionId': json['newExternalDivisionId'],
        'logoUrlMap': json['logoUrlMap'] == null ? undefined : json['logoUrlMap'],
        'mccCodes': json['mccCodes'],
        'extInfo': json['extInfo'],
        'apiVersion': json['apiVersion'] == null ? undefined : json['apiVersion'],
        'businessDocs': json['businessDocs'] == null ? undefined : (json['businessDocs'].map(BusinessDocs_1.BusinessDocsFromJSON)),
        'businessEntity': json['businessEntity'] == null ? undefined : json['businessEntity'],
        'businessEndDate': json['businessEndDate'] == null ? undefined : json['businessEndDate'],
        'ownerName': json['ownerName'] == null ? undefined : (0, UserName_1.UserNameFromJSON)(json['ownerName']),
        'ownerPhoneNumber': json['ownerPhoneNumber'] == null ? undefined : (0, MobileNoInfo_1.MobileNoInfoFromJSON)(json['ownerPhoneNumber']),
        'ownerIdType': json['ownerIdType'] == null ? undefined : json['ownerIdType'],
        'ownerIdNo': json['ownerIdNo'] == null ? undefined : json['ownerIdNo'],
        'ownerAddress': json['ownerAddress'] == null ? undefined : (0, AddressInfo_1.AddressInfoFromJSON)(json['ownerAddress']),
        'directorPics': json['directorPics'] == null ? undefined : (json['directorPics'].map(PicInfo_1.PicInfoFromJSON)),
        'nonDirectorPics': json['nonDirectorPics'] == null ? undefined : (json['nonDirectorPics'].map(PicInfo_1.PicInfoFromJSON)),
        'sizeType': json['sizeType'] == null ? undefined : json['sizeType'],
        'pgDivisionFlag': json['pgDivisionFlag'] == null ? undefined : json['pgDivisionFlag'],
    };
}
function UpdateDivisionRequestToJSON(json) {
    return UpdateDivisionRequestToJSONTyped(json, false);
}
function UpdateDivisionRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'merchantId': value['merchantId'],
        'divisionId': value['divisionId'],
        'divisionName': value['divisionName'],
        'divisionAddress': (0, AddressInfo_1.AddressInfoToJSON)(value['divisionAddress']),
        'divisionDescription': value['divisionDescription'],
        'divisionType': value['divisionType'],
        'divisionIdType': value['divisionIdType'],
        'externalDivisionId': value['externalDivisionId'],
        'newExternalDivisionId': value['newExternalDivisionId'],
        'logoUrlMap': value['logoUrlMap'],
        'mccCodes': value['mccCodes'],
        'extInfo': value['extInfo'],
        'apiVersion': value['apiVersion'],
        'businessDocs': value['businessDocs'] == null ? undefined : (value['businessDocs'].map(BusinessDocs_1.BusinessDocsToJSON)),
        'businessEntity': value['businessEntity'],
        'businessEndDate': value['businessEndDate'],
        'ownerName': (0, UserName_1.UserNameToJSON)(value['ownerName']),
        'ownerPhoneNumber': (0, MobileNoInfo_1.MobileNoInfoToJSON)(value['ownerPhoneNumber']),
        'ownerIdType': value['ownerIdType'],
        'ownerIdNo': value['ownerIdNo'],
        'ownerAddress': (0, AddressInfo_1.AddressInfoToJSON)(value['ownerAddress']),
        'directorPics': value['directorPics'] == null ? undefined : (value['directorPics'].map(PicInfo_1.PicInfoToJSON)),
        'nonDirectorPics': value['nonDirectorPics'] == null ? undefined : (value['nonDirectorPics'].map(PicInfo_1.PicInfoToJSON)),
        'sizeType': value['sizeType'],
        'pgDivisionFlag': value['pgDivisionFlag'],
    };
}
const propertyValidationAttributesMap = {
    merchantId: {
        maxLength: 21,
    },
    divisionId: {
        maxLength: 21,
    },
    divisionName: {
        maxLength: 256,
    },
    divisionDescription: {
        maxLength: 1024,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    newExternalDivisionId: {
        maxLength: 64,
    },
    extInfo: {},
    apiVersion: {
        maxLength: 8,
    },
    businessEndDate: {
        maxLength: 10,
    },
};
function validateUpdateDivisionRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('divisionId', value.divisionId, propertyValidationAttributesMap['divisionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('divisionName', value.divisionName, propertyValidationAttributesMap['divisionName']));
    validationErrorContexts.push(...(0, AddressInfo_1.validateAddressInfo)(value.divisionAddress));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('divisionDescription', value.divisionDescription, propertyValidationAttributesMap['divisionDescription']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('newExternalDivisionId', value.newExternalDivisionId, propertyValidationAttributesMap['newExternalDivisionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extInfo', value.extInfo, propertyValidationAttributesMap['extInfo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('apiVersion', value.apiVersion, propertyValidationAttributesMap['apiVersion']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('businessEndDate', value.businessEndDate, propertyValidationAttributesMap['businessEndDate']));
    validationErrorContexts.push(...(0, UserName_1.validateUserName)(value.ownerName));
    validationErrorContexts.push(...(0, MobileNoInfo_1.validateMobileNoInfo)(value.ownerPhoneNumber));
    validationErrorContexts.push(...(0, AddressInfo_1.validateAddressInfo)(value.ownerAddress));
    return validationErrorContexts;
}
