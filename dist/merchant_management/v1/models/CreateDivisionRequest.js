"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDivisionRequestPgDivisionFlagEnum = exports.CreateDivisionRequestSizeTypeEnum = exports.CreateDivisionRequestOwnerIdTypeEnum = exports.CreateDivisionRequestBusinessEntityEnum = exports.CreateDivisionRequestDivisionTypeEnum = exports.CreateDivisionRequestParentRoleTypeEnum = void 0;
exports.instanceOfCreateDivisionRequest = instanceOfCreateDivisionRequest;
exports.CreateDivisionRequestFromJSON = CreateDivisionRequestFromJSON;
exports.CreateDivisionRequestFromJSONTyped = CreateDivisionRequestFromJSONTyped;
exports.CreateDivisionRequestToJSON = CreateDivisionRequestToJSON;
exports.CreateDivisionRequestToJSONTyped = CreateDivisionRequestToJSONTyped;
exports.validateCreateDivisionRequest = validateCreateDivisionRequest;
const runtime_1 = require("../../../runtime");
const BusinessDocs_1 = require("./BusinessDocs");
const UserName_1 = require("./UserName");
const CreateDivisionRequestExtInfo_1 = require("./CreateDivisionRequestExtInfo");
const MobileNoInfo_1 = require("./MobileNoInfo");
const PicInfo_1 = require("./PicInfo");
const AddressInfo_1 = require("./AddressInfo");
/**
 * @export
 */
exports.CreateDivisionRequestParentRoleTypeEnum = {
    Merchant: 'MERCHANT',
    Division: 'DIVISION',
    ExternalDivision: 'EXTERNAL_DIVISION'
};
/**
 * @export
 */
exports.CreateDivisionRequestDivisionTypeEnum = {
    Region: 'REGION',
    Area: 'AREA',
    Branch: 'BRANCH',
    Outlet: 'OUTLET',
    Store: 'STORE',
    Kiosk: 'KIOSK',
    Stall: 'STALL',
    Counter: 'COUNTER',
    Booth: 'BOOTH',
    PointOfSale: 'POINT_OF_SALE',
    VendingMachine: 'VENDING_MACHINE'
};
/**
 * @export
 */
exports.CreateDivisionRequestBusinessEntityEnum = {
    Pt: 'pt',
    Cv: 'cv',
    Individu: 'individu',
    UsahaDagang: 'usaha_dagang',
    Yayasan: 'yayasan',
    Koperasi: 'koperasi'
};
/**
 * @export
 */
exports.CreateDivisionRequestOwnerIdTypeEnum = {
    Ktp: 'KTP',
    Sim: 'SIM',
    Passport: 'PASSPORT',
    Siup: 'SIUP',
    Nib: 'NIB'
};
/**
 * @export
 */
exports.CreateDivisionRequestSizeTypeEnum = {
    Umi: 'UMI',
    Uke: 'UKE',
    Ume: 'UME',
    Ube: 'UBE',
    Ure: 'URE'
};
/**
 * @export
 */
exports.CreateDivisionRequestPgDivisionFlagEnum = {
    True: 'true',
    False: 'false'
};
/**
 * Check if a given object implements the CreateDivisionRequest interface.
 */
function instanceOfCreateDivisionRequest(value) {
    if (!('apiVersion' in value) || value['apiVersion'] === undefined)
        return false;
    if (!('merchantId' in value) || value['merchantId'] === undefined)
        return false;
    if (!('parentRoleType' in value) || value['parentRoleType'] === undefined)
        return false;
    if (!('divisionName' in value) || value['divisionName'] === undefined)
        return false;
    if (!('divisionAddress' in value) || value['divisionAddress'] === undefined)
        return false;
    if (!('divisionType' in value) || value['divisionType'] === undefined)
        return false;
    if (!('externalDivisionId' in value) || value['externalDivisionId'] === undefined)
        return false;
    if (!('extInfo' in value) || value['extInfo'] === undefined)
        return false;
    if (!('mccCodes' in value) || value['mccCodes'] === undefined)
        return false;
    if (!('businessDocs' in value) || value['businessDocs'] === undefined)
        return false;
    if (!('businessEntity' in value) || value['businessEntity'] === undefined)
        return false;
    if (!('ownerName' in value) || value['ownerName'] === undefined)
        return false;
    if (!('ownerPhoneNumber' in value) || value['ownerPhoneNumber'] === undefined)
        return false;
    if (!('ownerIdType' in value) || value['ownerIdType'] === undefined)
        return false;
    if (!('ownerIdNo' in value) || value['ownerIdNo'] === undefined)
        return false;
    if (!('ownerAddress' in value) || value['ownerAddress'] === undefined)
        return false;
    if (!('directorPics' in value) || value['directorPics'] === undefined)
        return false;
    if (!('nonDirectorPics' in value) || value['nonDirectorPics'] === undefined)
        return false;
    if (!('sizeType' in value) || value['sizeType'] === undefined)
        return false;
    return true;
}
function CreateDivisionRequestFromJSON(json) {
    return CreateDivisionRequestFromJSONTyped(json, false);
}
function CreateDivisionRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'apiVersion': json['apiVersion'],
        'merchantId': json['merchantId'],
        'parentDivisionId': json['parentDivisionId'] == null ? undefined : json['parentDivisionId'],
        'parentRoleType': json['parentRoleType'],
        'divisionName': json['divisionName'],
        'divisionAddress': (0, AddressInfo_1.AddressInfoFromJSON)(json['divisionAddress']),
        'divisionDescription': json['divisionDescription'] == null ? undefined : json['divisionDescription'],
        'divisionType': json['divisionType'],
        'externalDivisionId': json['externalDivisionId'],
        'logoUrlMap': json['logoUrlMap'] == null ? undefined : json['logoUrlMap'],
        'extInfo': (0, CreateDivisionRequestExtInfo_1.CreateDivisionRequestExtInfoFromJSON)(json['extInfo']),
        'mccCodes': json['mccCodes'],
        'businessDocs': (json['businessDocs'].map(BusinessDocs_1.BusinessDocsFromJSON)),
        'businessEntity': json['businessEntity'],
        'ownerName': (0, UserName_1.UserNameFromJSON)(json['ownerName']),
        'ownerPhoneNumber': (0, MobileNoInfo_1.MobileNoInfoFromJSON)(json['ownerPhoneNumber']),
        'ownerIdType': json['ownerIdType'],
        'ownerIdNo': json['ownerIdNo'],
        'ownerAddress': (0, AddressInfo_1.AddressInfoFromJSON)(json['ownerAddress']),
        'directorPics': (json['directorPics'].map(PicInfo_1.PicInfoFromJSON)),
        'nonDirectorPics': (json['nonDirectorPics'].map(PicInfo_1.PicInfoFromJSON)),
        'sizeType': json['sizeType'],
        'pgDivisionFlag': json['pgDivisionFlag'] == null ? undefined : json['pgDivisionFlag'],
    };
}
function CreateDivisionRequestToJSON(json) {
    return CreateDivisionRequestToJSONTyped(json, false);
}
function CreateDivisionRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'apiVersion': value['apiVersion'],
        'merchantId': value['merchantId'],
        'parentDivisionId': value['parentDivisionId'],
        'parentRoleType': value['parentRoleType'],
        'divisionName': value['divisionName'],
        'divisionAddress': (0, AddressInfo_1.AddressInfoToJSON)(value['divisionAddress']),
        'divisionDescription': value['divisionDescription'],
        'divisionType': value['divisionType'],
        'externalDivisionId': value['externalDivisionId'],
        'logoUrlMap': value['logoUrlMap'],
        'extInfo': (0, CreateDivisionRequestExtInfo_1.CreateDivisionRequestExtInfoToJSON)(value['extInfo']),
        'mccCodes': value['mccCodes'],
        'businessDocs': (value['businessDocs'].map(BusinessDocs_1.BusinessDocsToJSON)),
        'businessEntity': value['businessEntity'],
        'ownerName': (0, UserName_1.UserNameToJSON)(value['ownerName']),
        'ownerPhoneNumber': (0, MobileNoInfo_1.MobileNoInfoToJSON)(value['ownerPhoneNumber']),
        'ownerIdType': value['ownerIdType'],
        'ownerIdNo': value['ownerIdNo'],
        'ownerAddress': (0, AddressInfo_1.AddressInfoToJSON)(value['ownerAddress']),
        'directorPics': (value['directorPics'].map(PicInfo_1.PicInfoToJSON)),
        'nonDirectorPics': (value['nonDirectorPics'].map(PicInfo_1.PicInfoToJSON)),
        'sizeType': value['sizeType'],
        'pgDivisionFlag': value['pgDivisionFlag'],
    };
}
const propertyValidationAttributesMap = {
    apiVersion: {
        maxLength: 8,
    },
    merchantId: {
        maxLength: 21,
    },
    divisionName: {
        maxLength: 256,
    },
    divisionDescription: {
        maxLength: 1024,
    },
    externalDivisionId: {
        maxLength: 64,
    },
};
function validateCreateDivisionRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('apiVersion', value.apiVersion, propertyValidationAttributesMap['apiVersion']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('divisionName', value.divisionName, propertyValidationAttributesMap['divisionName']));
    validationErrorContexts.push(...(0, AddressInfo_1.validateAddressInfo)(value.divisionAddress));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('divisionDescription', value.divisionDescription, propertyValidationAttributesMap['divisionDescription']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));
    validationErrorContexts.push(...(0, CreateDivisionRequestExtInfo_1.validateCreateDivisionRequestExtInfo)(value.extInfo));
    validationErrorContexts.push(...(0, UserName_1.validateUserName)(value.ownerName));
    validationErrorContexts.push(...(0, MobileNoInfo_1.validateMobileNoInfo)(value.ownerPhoneNumber));
    validationErrorContexts.push(...(0, AddressInfo_1.validateAddressInfo)(value.ownerAddress));
    return validationErrorContexts;
}
