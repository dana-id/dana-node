"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryShopRequestShopIdTypeEnum = void 0;
exports.instanceOfQueryShopRequest = instanceOfQueryShopRequest;
exports.QueryShopRequestFromJSON = QueryShopRequestFromJSON;
exports.QueryShopRequestFromJSONTyped = QueryShopRequestFromJSONTyped;
exports.QueryShopRequestToJSON = QueryShopRequestToJSON;
exports.QueryShopRequestToJSONTyped = QueryShopRequestToJSONTyped;
exports.validateQueryShopRequest = validateQueryShopRequest;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.QueryShopRequestShopIdTypeEnum = {
    InnerId: 'INNER_ID',
    ExternalId: 'EXTERNAL_ID'
};
/**
 * Check if a given object implements the QueryShopRequest interface.
 */
function instanceOfQueryShopRequest(value) {
    if (!('shopId' in value) || value['shopId'] === undefined)
        return false;
    if (!('shopIdType' in value) || value['shopIdType'] === undefined)
        return false;
    return true;
}
function QueryShopRequestFromJSON(json) {
    return QueryShopRequestFromJSONTyped(json, false);
}
function QueryShopRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'merchantId': json['merchantId'] == null ? undefined : json['merchantId'],
        'shopId': json['shopId'],
        'shopIdType': json['shopIdType'],
    };
}
function QueryShopRequestToJSON(json) {
    return QueryShopRequestToJSONTyped(json, false);
}
function QueryShopRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'merchantId': value['merchantId'],
        'shopId': value['shopId'],
        'shopIdType': value['shopIdType'],
    };
}
const propertyValidationAttributesMap = {
    merchantId: {
        maxLength: 21,
    },
};
function validateQueryShopRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));
    return validationErrorContexts;
}
