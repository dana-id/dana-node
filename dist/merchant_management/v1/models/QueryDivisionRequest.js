"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryDivisionRequestDivisionIdTypeEnum = void 0;
exports.instanceOfQueryDivisionRequest = instanceOfQueryDivisionRequest;
exports.QueryDivisionRequestFromJSON = QueryDivisionRequestFromJSON;
exports.QueryDivisionRequestFromJSONTyped = QueryDivisionRequestFromJSONTyped;
exports.QueryDivisionRequestToJSON = QueryDivisionRequestToJSON;
exports.QueryDivisionRequestToJSONTyped = QueryDivisionRequestToJSONTyped;
exports.validateQueryDivisionRequest = validateQueryDivisionRequest;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.QueryDivisionRequestDivisionIdTypeEnum = {
    InnerId: 'INNER_ID',
    ExternalId: 'EXTERNAL_ID'
};
/**
 * Check if a given object implements the QueryDivisionRequest interface.
 */
function instanceOfQueryDivisionRequest(value) {
    if (!('divisionId' in value) || value['divisionId'] === undefined)
        return false;
    if (!('divisionIdType' in value) || value['divisionIdType'] === undefined)
        return false;
    return true;
}
function QueryDivisionRequestFromJSON(json) {
    return QueryDivisionRequestFromJSONTyped(json, false);
}
function QueryDivisionRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'merchantId': json['merchantId'] == null ? undefined : json['merchantId'],
        'divisionId': json['divisionId'],
        'divisionIdType': json['divisionIdType'],
    };
}
function QueryDivisionRequestToJSON(json) {
    return QueryDivisionRequestToJSONTyped(json, false);
}
function QueryDivisionRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'merchantId': value['merchantId'],
        'divisionId': value['divisionId'],
        'divisionIdType': value['divisionIdType'],
    };
}
const propertyValidationAttributesMap = {
    merchantId: {
        maxLength: 21,
    },
};
function validateQueryDivisionRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantId', value.merchantId, propertyValidationAttributesMap['merchantId']));
    return validationErrorContexts;
}
