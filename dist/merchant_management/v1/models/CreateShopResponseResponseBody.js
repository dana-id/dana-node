"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCreateShopResponseResponseBody = instanceOfCreateShopResponseResponseBody;
exports.CreateShopResponseResponseBodyFromJSON = CreateShopResponseResponseBodyFromJSON;
exports.CreateShopResponseResponseBodyFromJSONTyped = CreateShopResponseResponseBodyFromJSONTyped;
exports.CreateShopResponseResponseBodyToJSON = CreateShopResponseResponseBodyToJSON;
exports.CreateShopResponseResponseBodyToJSONTyped = CreateShopResponseResponseBodyToJSONTyped;
exports.validateCreateShopResponseResponseBody = validateCreateShopResponseResponseBody;
const ResultInfo_1 = require("./ResultInfo");
/**
 * Check if a given object implements the CreateShopResponseResponseBody interface.
 */
function instanceOfCreateShopResponseResponseBody(value) {
    if (!('resultInfo' in value) || value['resultInfo'] === undefined)
        return false;
    return true;
}
function CreateShopResponseResponseBodyFromJSON(json) {
    return CreateShopResponseResponseBodyFromJSONTyped(json, false);
}
function CreateShopResponseResponseBodyFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'resultInfo': (0, ResultInfo_1.ResultInfoFromJSON)(json['resultInfo']),
        'shopId': json['shopId'] == null ? undefined : json['shopId'],
    };
}
function CreateShopResponseResponseBodyToJSON(json) {
    return CreateShopResponseResponseBodyToJSONTyped(json, false);
}
function CreateShopResponseResponseBodyToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'resultInfo': (0, ResultInfo_1.ResultInfoToJSON)(value['resultInfo']),
        'shopId': value['shopId'],
    };
}
const propertyValidationAttributesMap = {};
function validateCreateShopResponseResponseBody(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...(0, ResultInfo_1.validateResultInfo)(value.resultInfo));
    return validationErrorContexts;
}
