"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfPayOptionDetailAdditionalInfo = instanceOfPayOptionDetailAdditionalInfo;
exports.PayOptionDetailAdditionalInfoFromJSON = PayOptionDetailAdditionalInfoFromJSON;
exports.PayOptionDetailAdditionalInfoFromJSONTyped = PayOptionDetailAdditionalInfoFromJSONTyped;
exports.PayOptionDetailAdditionalInfoToJSON = PayOptionDetailAdditionalInfoToJSON;
exports.PayOptionDetailAdditionalInfoToJSONTyped = PayOptionDetailAdditionalInfoToJSONTyped;
exports.validatePayOptionDetailAdditionalInfo = validatePayOptionDetailAdditionalInfo;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the PayOptionDetailAdditionalInfo interface.
 */
function instanceOfPayOptionDetailAdditionalInfo(value) {
    return true;
}
function PayOptionDetailAdditionalInfoFromJSON(json) {
    return PayOptionDetailAdditionalInfoFromJSONTyped(json, false);
}
function PayOptionDetailAdditionalInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'topupAndPay': json['topupAndPay'] == null ? undefined : json['topupAndPay'],
        'payerAccountNo': json['payerAccountNo'] == null ? undefined : json['payerAccountNo'],
        'saveCardAfterPay': json['saveCardAfterPay'] == null ? undefined : json['saveCardAfterPay'],
        'channelInfo': json['channelInfo'] == null ? undefined : json['channelInfo'],
        'issuingCountry': json['issuingCountry'] == null ? undefined : json['issuingCountry'],
        'assetType': json['assetType'] == null ? undefined : json['assetType'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}
function PayOptionDetailAdditionalInfoToJSON(json) {
    return PayOptionDetailAdditionalInfoToJSONTyped(json, false);
}
function PayOptionDetailAdditionalInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'topupAndPay': value['topupAndPay'],
        'payerAccountNo': value['payerAccountNo'],
        'saveCardAfterPay': value['saveCardAfterPay'],
        'channelInfo': value['channelInfo'],
        'issuingCountry': value['issuingCountry'],
        'assetType': value['assetType'],
        'extendInfo': value['extendInfo'],
    };
}
const propertyValidationAttributesMap = {
    payerAccountNo: {
        maxLength: 64,
    },
    channelInfo: {
        maxLength: 4096,
    },
    issuingCountry: {
        maxLength: 8,
    },
    assetType: {
        maxLength: 64,
    },
    extendInfo: {
        maxLength: 4096,
    },
};
function validatePayOptionDetailAdditionalInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payerAccountNo', value.payerAccountNo, propertyValidationAttributesMap['payerAccountNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('channelInfo', value.channelInfo, propertyValidationAttributesMap['channelInfo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('issuingCountry', value.issuingCountry, propertyValidationAttributesMap['issuingCountry']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('assetType', value.assetType, propertyValidationAttributesMap['assetType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));
    return validationErrorContexts;
}
