"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfTimeDetail = instanceOfTimeDetail;
exports.TimeDetailFromJSON = TimeDetailFromJSON;
exports.TimeDetailFromJSONTyped = TimeDetailFromJSONTyped;
exports.TimeDetailToJSON = TimeDetailToJSON;
exports.TimeDetailToJSONTyped = TimeDetailToJSONTyped;
exports.validateTimeDetail = validateTimeDetail;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the TimeDetail interface.
 */
function instanceOfTimeDetail(value) {
    if (!('createdTime' in value) || value['createdTime'] === undefined)
        return false;
    if (!('expiryTime' in value) || value['expiryTime'] === undefined)
        return false;
    return true;
}
function TimeDetailFromJSON(json) {
    return TimeDetailFromJSONTyped(json, false);
}
function TimeDetailFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'createdTime': json['createdTime'],
        'expiryTime': json['expiryTime'],
        'paidTimes': json['paidTimes'] == null ? undefined : json['paidTimes'],
        'confirmedTimes': json['confirmedTimes'] == null ? undefined : json['confirmedTimes'],
        'cancelledTime': json['cancelledTime'] == null ? undefined : json['cancelledTime'],
    };
}
function TimeDetailToJSON(json) {
    return TimeDetailToJSONTyped(json, false);
}
function TimeDetailToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'createdTime': value['createdTime'],
        'expiryTime': value['expiryTime'],
        'paidTimes': value['paidTimes'],
        'confirmedTimes': value['confirmedTimes'],
        'cancelledTime': value['cancelledTime'],
    };
}
const propertyValidationAttributesMap = {
    createdTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    expiryTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    cancelledTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
};
function validateTimeDetail(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('createdTime', value.createdTime, propertyValidationAttributesMap['createdTime']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('expiryTime', value.expiryTime, propertyValidationAttributesMap['expiryTime']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('cancelledTime', value.cancelledTime, propertyValidationAttributesMap['cancelledTime']));
    return validationErrorContexts;
}
