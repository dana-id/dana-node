"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfBuyer = instanceOfBuyer;
exports.BuyerFromJSON = BuyerFromJSON;
exports.BuyerFromJSONTyped = BuyerFromJSONTyped;
exports.BuyerToJSON = BuyerToJSON;
exports.BuyerToJSONTyped = BuyerToJSONTyped;
exports.validateBuyer = validateBuyer;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the Buyer interface.
 */
function instanceOfBuyer(value) {
    return true;
}
function BuyerFromJSON(json) {
    return BuyerFromJSONTyped(json, false);
}
function BuyerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'externalUserType': json['externalUserType'] == null ? undefined : json['externalUserType'],
        'nickname': json['nickname'] == null ? undefined : json['nickname'],
        'externalUserId': json['externalUserId'] == null ? undefined : json['externalUserId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}
function BuyerToJSON(json) {
    return BuyerToJSONTyped(json, false);
}
function BuyerToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'externalUserType': value['externalUserType'],
        'nickname': value['nickname'],
        'externalUserId': value['externalUserId'],
        'userId': value['userId'],
    };
}
const propertyValidationAttributesMap = {
    externalUserType: {
        maxLength: 32,
    },
    nickname: {
        maxLength: 64,
    },
    externalUserId: {
        maxLength: 32,
    },
    userId: {
        maxLength: 32,
    },
};
function validateBuyer(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalUserType', value.externalUserType, propertyValidationAttributesMap['externalUserType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('nickname', value.nickname, propertyValidationAttributesMap['nickname']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalUserId', value.externalUserId, propertyValidationAttributesMap['externalUserId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('userId', value.userId, propertyValidationAttributesMap['userId']));
    return validationErrorContexts;
}
