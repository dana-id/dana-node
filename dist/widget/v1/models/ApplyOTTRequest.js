"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplyOTTRequestUserResourcesEnum = void 0;
exports.instanceOfApplyOTTRequest = instanceOfApplyOTTRequest;
exports.ApplyOTTRequestFromJSON = ApplyOTTRequestFromJSON;
exports.ApplyOTTRequestFromJSONTyped = ApplyOTTRequestFromJSONTyped;
exports.ApplyOTTRequestToJSON = ApplyOTTRequestToJSON;
exports.ApplyOTTRequestToJSONTyped = ApplyOTTRequestToJSONTyped;
exports.validateApplyOTTRequest = validateApplyOTTRequest;
const ApplyOTTRequestAdditionalInfo_1 = require("./ApplyOTTRequestAdditionalInfo");
/**
 * @export
 */
exports.ApplyOTTRequestUserResourcesEnum = {
    Ott: 'OTT'
};
/**
 * Check if a given object implements the ApplyOTTRequest interface.
 */
function instanceOfApplyOTTRequest(value) {
    if (!('userResources' in value) || value['userResources'] === undefined)
        return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined)
        return false;
    return true;
}
function ApplyOTTRequestFromJSON(json) {
    return ApplyOTTRequestFromJSONTyped(json, false);
}
function ApplyOTTRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'userResources': json['userResources'],
        'additionalInfo': (0, ApplyOTTRequestAdditionalInfo_1.ApplyOTTRequestAdditionalInfoFromJSON)(json['additionalInfo']),
    };
}
function ApplyOTTRequestToJSON(json) {
    return ApplyOTTRequestToJSONTyped(json, false);
}
function ApplyOTTRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'userResources': value['userResources'],
        'additionalInfo': (0, ApplyOTTRequestAdditionalInfo_1.ApplyOTTRequestAdditionalInfoToJSON)(value['additionalInfo']),
    };
}
const propertyValidationAttributesMap = {};
function validateApplyOTTRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...(0, ApplyOTTRequestAdditionalInfo_1.validateApplyOTTRequestAdditionalInfo)(value.additionalInfo));
    return validationErrorContexts;
}
