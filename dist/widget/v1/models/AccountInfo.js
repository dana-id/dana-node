"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfAccountInfo = instanceOfAccountInfo;
exports.AccountInfoFromJSON = AccountInfoFromJSON;
exports.AccountInfoFromJSONTyped = AccountInfoFromJSONTyped;
exports.AccountInfoToJSON = AccountInfoToJSON;
exports.AccountInfoToJSONTyped = AccountInfoToJSONTyped;
exports.validateAccountInfo = validateAccountInfo;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * Check if a given object implements the AccountInfo interface.
 */
function instanceOfAccountInfo(value) {
    return true;
}
function AccountInfoFromJSON(json) {
    return AccountInfoFromJSONTyped(json, false);
}
function AccountInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'balanceType': json['balanceType'] == null ? undefined : json['balanceType'],
        'amount': json['amount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['amount']),
        'floatAmount': json['floatAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['floatAmount']),
        'holdAmount': json['holdAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['holdAmount']),
        'availableBalance': json['availableBalance'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['availableBalance']),
        'ledgerBalance': json['ledgerBalance'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['ledgerBalance']),
        'currentMultilateralLimit': json['currentMultilateralLimit'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['currentMultilateralLimit']),
        'registrationStatusCode': json['registrationStatusCode'] == null ? undefined : json['registrationStatusCode'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}
function AccountInfoToJSON(json) {
    return AccountInfoToJSONTyped(json, false);
}
function AccountInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'balanceType': value['balanceType'],
        'amount': (0, Money_1.MoneyToJSON)(value['amount']),
        'floatAmount': (0, Money_1.MoneyToJSON)(value['floatAmount']),
        'holdAmount': (0, Money_1.MoneyToJSON)(value['holdAmount']),
        'availableBalance': (0, Money_1.MoneyToJSON)(value['availableBalance']),
        'ledgerBalance': (0, Money_1.MoneyToJSON)(value['ledgerBalance']),
        'currentMultilateralLimit': (0, Money_1.MoneyToJSON)(value['currentMultilateralLimit']),
        'registrationStatusCode': value['registrationStatusCode'],
        'status': value['status'],
    };
}
const propertyValidationAttributesMap = {
    balanceType: {
        maxLength: 70,
    },
    registrationStatusCode: {
        maxLength: 4,
    },
    status: {
        maxLength: 4,
    },
};
function validateAccountInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('balanceType', value.balanceType, propertyValidationAttributesMap['balanceType']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.amount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.floatAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.holdAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.availableBalance));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.ledgerBalance));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.currentMultilateralLimit));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('registrationStatusCode', value.registrationStatusCode, propertyValidationAttributesMap['registrationStatusCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('status', value.status, propertyValidationAttributesMap['status']));
    return validationErrorContexts;
}
