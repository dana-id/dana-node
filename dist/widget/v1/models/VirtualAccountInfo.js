"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfVirtualAccountInfo = instanceOfVirtualAccountInfo;
exports.VirtualAccountInfoFromJSON = VirtualAccountInfoFromJSON;
exports.VirtualAccountInfoFromJSONTyped = VirtualAccountInfoFromJSONTyped;
exports.VirtualAccountInfoToJSON = VirtualAccountInfoToJSON;
exports.VirtualAccountInfoToJSONTyped = VirtualAccountInfoToJSONTyped;
exports.validateVirtualAccountInfo = validateVirtualAccountInfo;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the VirtualAccountInfo interface.
 */
function instanceOfVirtualAccountInfo(value) {
    if (!('virtualAccountCode' in value) || value['virtualAccountCode'] === undefined)
        return false;
    if (!('virtualAccountExpiryTime' in value) || value['virtualAccountExpiryTime'] === undefined)
        return false;
    if (!('signature' in value) || value['signature'] === undefined)
        return false;
    return true;
}
function VirtualAccountInfoFromJSON(json) {
    return VirtualAccountInfoFromJSONTyped(json, false);
}
function VirtualAccountInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'virtualAccountCode': json['virtualAccountCode'],
        'virtualAccountExpiryTime': json['virtualAccountExpiryTime'],
        'signature': json['signature'],
    };
}
function VirtualAccountInfoToJSON(json) {
    return VirtualAccountInfoToJSONTyped(json, false);
}
function VirtualAccountInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'virtualAccountCode': value['virtualAccountCode'],
        'virtualAccountExpiryTime': value['virtualAccountExpiryTime'],
        'signature': value['signature'],
    };
}
const propertyValidationAttributesMap = {
    virtualAccountCode: {
        maxLength: 64,
    },
    virtualAccountExpiryTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
};
function validateVirtualAccountInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('virtualAccountCode', value.virtualAccountCode, propertyValidationAttributesMap['virtualAccountCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('virtualAccountExpiryTime', value.virtualAccountExpiryTime, propertyValidationAttributesMap['virtualAccountExpiryTime']));
    return validationErrorContexts;
}
