"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultInfoResultStatusEnum = void 0;
exports.instanceOfResultInfo = instanceOfResultInfo;
exports.ResultInfoFromJSON = ResultInfoFromJSON;
exports.ResultInfoFromJSONTyped = ResultInfoFromJSONTyped;
exports.ResultInfoToJSON = ResultInfoToJSON;
exports.ResultInfoToJSONTyped = ResultInfoToJSONTyped;
exports.validateResultInfo = validateResultInfo;
/**
 * @export
 */
exports.ResultInfoResultStatusEnum = {
    S: 'S',
    F: 'F',
    U: 'U'
};
/**
 * Check if a given object implements the ResultInfo interface.
 */
function instanceOfResultInfo(value) {
    if (!('resultStatus' in value) || value['resultStatus'] === undefined)
        return false;
    if (!('resultCodeId' in value) || value['resultCodeId'] === undefined)
        return false;
    if (!('resultCode' in value) || value['resultCode'] === undefined)
        return false;
    if (!('resultMsg' in value) || value['resultMsg'] === undefined)
        return false;
    return true;
}
function ResultInfoFromJSON(json) {
    return ResultInfoFromJSONTyped(json, false);
}
function ResultInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'resultStatus': json['resultStatus'],
        'resultCodeId': json['resultCodeId'],
        'resultCode': json['resultCode'],
        'resultMsg': json['resultMsg'],
    };
}
function ResultInfoToJSON(json) {
    return ResultInfoToJSONTyped(json, false);
}
function ResultInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'resultStatus': value['resultStatus'],
        'resultCodeId': value['resultCodeId'],
        'resultCode': value['resultCode'],
        'resultMsg': value['resultMsg'],
    };
}
const propertyValidationAttributesMap = {};
function validateResultInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    return validationErrorContexts;
}
