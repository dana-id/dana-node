"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundPromoInfoPromoTypeEnum = void 0;
exports.instanceOfRefundPromoInfo = instanceOfRefundPromoInfo;
exports.RefundPromoInfoFromJSON = RefundPromoInfoFromJSON;
exports.RefundPromoInfoFromJSONTyped = RefundPromoInfoFromJSONTyped;
exports.RefundPromoInfoToJSON = RefundPromoInfoToJSON;
exports.RefundPromoInfoToJSONTyped = RefundPromoInfoToJSONTyped;
exports.validateRefundPromoInfo = validateRefundPromoInfo;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * @export
 */
exports.RefundPromoInfoPromoTypeEnum = {
    CashBack: 'CASH_BACK',
    Discount: 'DISCOUNT',
    Voucher: 'VOUCHER',
    Point: 'POINT'
};
/**
 * Check if a given object implements the RefundPromoInfo interface.
 */
function instanceOfRefundPromoInfo(value) {
    if (!('promoId' in value) || value['promoId'] === undefined)
        return false;
    if (!('promoName' in value) || value['promoName'] === undefined)
        return false;
    if (!('promoType' in value) || value['promoType'] === undefined)
        return false;
    if (!('refundAmount' in value) || value['refundAmount'] === undefined)
        return false;
    return true;
}
function RefundPromoInfoFromJSON(json) {
    return RefundPromoInfoFromJSONTyped(json, false);
}
function RefundPromoInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'promoId': json['promoId'],
        'promoName': json['promoName'],
        'promoType': json['promoType'],
        'refundAmount': (0, Money_1.MoneyFromJSON)(json['refundAmount']),
    };
}
function RefundPromoInfoToJSON(json) {
    return RefundPromoInfoToJSONTyped(json, false);
}
function RefundPromoInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'promoId': value['promoId'],
        'promoName': value['promoName'],
        'promoType': value['promoType'],
        'refundAmount': (0, Money_1.MoneyToJSON)(value['refundAmount']),
    };
}
const propertyValidationAttributesMap = {
    promoId: {
        maxLength: 128,
    },
    promoName: {
        maxLength: 128,
    },
};
function validateRefundPromoInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('promoId', value.promoId, propertyValidationAttributesMap['promoId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('promoName', value.promoName, propertyValidationAttributesMap['promoName']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.refundAmount));
    return validationErrorContexts;
}
