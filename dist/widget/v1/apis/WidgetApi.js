"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetApi = void 0;
const runtime = require("../../../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class WidgetApi extends runtime.BaseAPI {
    constructor({ partnerId, privateKey, origin, env, clientSecret, debugMode }) {
        const basePath = runtime.getBasePathByEnv(env);
        const configuration = new runtime.Configuration({
            basePath: basePath,
        });
        super(configuration);
        this.partnerId = "";
        this.privateKey = "";
        this.origin = "";
        this.env = "";
        this.clientSecret = "";
        this.debugMode = "";
        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
        this.clientSecret = clientSecret;
        this.debugMode = debugMode;
    }
    /**
     * This API is used to reverses the account binding process by revoking the accessToken and refreshToken
     * Account unbinding - Binding
     */
    async accountUnbinding(accountUnbindingRequest, initOverrides) {
        if (accountUnbindingRequest == null) {
            throw new runtime.RequiredError('accountUnbindingRequest', 'Required parameter "accountUnbindingRequest" was null or undefined when calling accountUnbinding().');
        }
        const validationErrorContexts = (0, index_1.validateAccountUnbindingRequest)(accountUnbindingRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/registration-account-unbinding.htm`;
        const requestBody = JSON.stringify((0, index_1.AccountUnbindingRequestToJSON)(accountUnbindingRequest));
        const accessToken = accountUnbindingRequest.additionalInfo.accessToken;
        const endUserIpAddress = accountUnbindingRequest.additionalInfo.endUserIpAddress;
        const deviceId = accountUnbindingRequest.additionalInfo.deviceId;
        const latitude = accountUnbindingRequest.additionalInfo.latitude;
        const longitude = accountUnbindingRequest.additionalInfo.longitude;
        runtime.DanaHeaderUtil.populateSnapAccountB2B2CScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, accessToken, endUserIpAddress, deviceId, latitude, longitude);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.AccountUnbindingRequestToJSON)(accountUnbindingRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AccountUnbindingResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to get one time token that will be used as authorization parameter upon redirecting to DANA
     * Apply OTT - Widget
     */
    async applyOTT(applyOTTRequest, initOverrides) {
        if (applyOTTRequest == null) {
            throw new runtime.RequiredError('applyOTTRequest', 'Required parameter "applyOTTRequest" was null or undefined when calling applyOTT().');
        }
        const validationErrorContexts = (0, index_1.validateApplyOTTRequest)(applyOTTRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/v1.1/qr/apply-ott`;
        const requestBody = JSON.stringify((0, index_1.ApplyOTTRequestToJSON)(applyOTTRequest));
        const accessToken = applyOTTRequest.additionalInfo.accessToken;
        const endUserIpAddress = applyOTTRequest.additionalInfo.endUserIpAddress;
        const deviceId = applyOTTRequest.additionalInfo.deviceId;
        const latitude = applyOTTRequest.additionalInfo.latitude;
        const longitude = applyOTTRequest.additionalInfo.longitude;
        runtime.DanaHeaderUtil.populateSnapAccountB2B2CScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, accessToken, endUserIpAddress, deviceId, latitude, longitude);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ApplyOTTRequestToJSON)(applyOTTRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApplyOTTResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to finalized account binding process by exchanging the authCode into accessToken that can be used as user authorization
     * Apply Token, required by Apply OTT - Binding
     */
    async applyToken(applyTokenRequest, initOverrides) {
        if (applyTokenRequest == null) {
            throw new runtime.RequiredError('applyTokenRequest', 'Required parameter "applyTokenRequest" was null or undefined when calling applyToken().');
        }
        const validationErrorContexts = (0, index_1.validateApplyTokenRequest)(applyTokenRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/access-token/b2b2c.htm`;
        runtime.DanaHeaderUtil.populateSnapApplyTokenScenarioHeader(headerParameters, this.privateKey, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ApplyTokenRequestToJSON)(applyTokenRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApplyTokenResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to query user\'s DANA account balance via merchant
     * Balance Inquiry
     */
    async balanceInquiry(balanceInquiryRequest, initOverrides) {
        if (balanceInquiryRequest == null) {
            throw new runtime.RequiredError('balanceInquiryRequest', 'Required parameter "balanceInquiryRequest" was null or undefined when calling balanceInquiry().');
        }
        const validationErrorContexts = (0, index_1.validateBalanceInquiryRequest)(balanceInquiryRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/balance-inquiry.htm`;
        const requestBody = JSON.stringify((0, index_1.BalanceInquiryRequestToJSON)(balanceInquiryRequest));
        const accessToken = balanceInquiryRequest.additionalInfo.accessToken;
        const endUserIpAddress = balanceInquiryRequest.additionalInfo.endUserIpAddress;
        const deviceId = balanceInquiryRequest.additionalInfo.deviceId;
        const latitude = balanceInquiryRequest.additionalInfo.latitude;
        const longitude = balanceInquiryRequest.additionalInfo.longitude;
        runtime.DanaHeaderUtil.populateSnapAccountB2B2CScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, accessToken, endUserIpAddress, deviceId, latitude, longitude);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.BalanceInquiryRequestToJSON)(balanceInquiryRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BalanceInquiryResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order - Widget
     */
    async cancelOrder(cancelOrderRequest, initOverrides) {
        var _a, _b;
        if (cancelOrderRequest == null) {
            throw new runtime.RequiredError('cancelOrderRequest', 'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().');
        }
        const validationErrorContexts = (0, index_1.validateCancelOrderRequest)(cancelOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/debit/cancel.htm`;
        const requestBody = JSON.stringify((0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest));
        let enableDebugMode = false;
        if (((_a = this.debugMode) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true' && ((_b = this.env) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'sandbox') {
            enableDebugMode = true;
        }
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, enableDebugMode);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelOrderResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to inquiry payment status and information from merchant\'s platform to DANA
     * Query Payment - Widget
     */
    async queryPayment(queryPaymentRequest, initOverrides) {
        var _a, _b;
        if (queryPaymentRequest == null) {
            throw new runtime.RequiredError('queryPaymentRequest', 'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().');
        }
        const validationErrorContexts = (0, index_1.validateQueryPaymentRequest)(queryPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/v1.1/debit/status`;
        const requestBody = JSON.stringify((0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest));
        let enableDebugMode = false;
        if (((_a = this.debugMode) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true' && ((_b = this.env) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'sandbox') {
            enableDebugMode = true;
        }
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, enableDebugMode);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryPaymentResponseFromJSON)(jsonValue)).value();
    }
    /**
     * The API is used to query user profile such as DANA balance (unit in IDR), masked DANA phone number, KYC or OTT (one time token) between merchant server and DANA\'s server
     * Query User Profile
     */
    async queryUserProfile(queryUserProfileRequest, initOverrides) {
        if (queryUserProfileRequest == null) {
            throw new runtime.RequiredError('queryUserProfileRequest', 'Required parameter "queryUserProfileRequest" was null or undefined when calling queryUserProfile().');
        }
        const validationErrorContexts = (0, index_1.validateQueryUserProfileRequest)(queryUserProfileRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/dana/member/query/queryUserProfile.htm`;
        const requestBody = {
            "request": { "head": {}, "body": queryUserProfileRequest },
            "signature": ""
        };
        const functionName = "dana.member.query.queryUserProfile";
        runtime.DanaHeaderUtil.populateOpenApiScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.clientSecret, this.partnerId, functionName);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestBody,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryUserProfileResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order - Widget
     */
    async refundOrder(refundOrderRequest, initOverrides) {
        var _a, _b;
        if (refundOrderRequest == null) {
            throw new runtime.RequiredError('refundOrderRequest', 'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().');
        }
        const validationErrorContexts = (0, index_1.validateRefundOrderRequest)(refundOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/debit/refund.htm`;
        const requestBody = JSON.stringify((0, index_1.RefundOrderRequestToJSON)(refundOrderRequest));
        let enableDebugMode = false;
        if (((_a = this.debugMode) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true' && ((_b = this.env) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'sandbox') {
            enableDebugMode = true;
        }
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, enableDebugMode);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.RefundOrderRequestToJSON)(refundOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RefundOrderResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to initiate payment from merchant\'s platform to DANA
     * Widget Payment - Widget
     */
    async widgetPayment(widgetPaymentRequest, initOverrides) {
        var _a, _b;
        if (widgetPaymentRequest == null) {
            throw new runtime.RequiredError('widgetPaymentRequest', 'Required parameter "widgetPaymentRequest" was null or undefined when calling widgetPayment().');
        }
        const validationErrorContexts = (0, index_1.validateWidgetPaymentRequest)(widgetPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/redirection/v1.0/debit/payment-host-to-host`;
        const requestBody = JSON.stringify((0, index_1.WidgetPaymentRequestToJSON)(widgetPaymentRequest));
        let enableDebugMode = false;
        if (((_a = this.debugMode) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'true' && ((_b = this.env) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'sandbox') {
            enableDebugMode = true;
        }
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, enableDebugMode);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.WidgetPaymentRequestToJSON)(widgetPaymentRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WidgetPaymentResponseFromJSON)(jsonValue)).value();
    }
}
exports.WidgetApi = WidgetApi;
