"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisbursementApi = void 0;
const runtime = require("../../../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class DisbursementApi extends runtime.BaseAPI {
    constructor({ partnerId, privateKey, origin, env }) {
        const basePath = runtime.getBasePathByEnv(env);
        const configuration = new runtime.Configuration({
            basePath: basePath,
        });
        super(configuration);
        this.partnerId = "";
        this.privateKey = "";
        this.origin = "";
        this.env = "";
        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
    }
    /**
     * This API is used for merchant to do inquiry Bank account info via DANA
     * Transfer to Bank Account Inquiry
     */
    async bankAccountInquiry(bankAccountInquiryRequest, initOverrides) {
        if (bankAccountInquiryRequest == null) {
            throw new runtime.RequiredError('bankAccountInquiryRequest', 'Required parameter "bankAccountInquiryRequest" was null or undefined when calling bankAccountInquiry().');
        }
        const validationErrorContexts = (0, index_1.validateBankAccountInquiryRequest)(bankAccountInquiryRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/bank-account-inquiry.htm`;
        const requestBody = JSON.stringify((0, index_1.BankAccountInquiryRequestToJSON)(bankAccountInquiryRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.BankAccountInquiryRequestToJSON)(bankAccountInquiryRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BankAccountInquiryResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to do account inquiry to DANA
     * DANA Account Inquiry
     */
    async danaAccountInquiry(danaAccountInquiryRequest, initOverrides) {
        if (danaAccountInquiryRequest == null) {
            throw new runtime.RequiredError('danaAccountInquiryRequest', 'Required parameter "danaAccountInquiryRequest" was null or undefined when calling danaAccountInquiry().');
        }
        const validationErrorContexts = (0, index_1.validateDanaAccountInquiryRequest)(danaAccountInquiryRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/account-inquiry.htm`;
        const requestBody = JSON.stringify((0, index_1.DanaAccountInquiryRequestToJSON)(danaAccountInquiryRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.DanaAccountInquiryRequestToJSON)(danaAccountInquiryRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DanaAccountInquiryResponseFromJSON)(jsonValue)).value();
    }
    /**
     * The interface is check merchant resource info (account balance merchant)
     * Member â€“ Merchant Open API Check Disbursement Account
     */
    async queryMerchantResource(queryMerchantResourceRequest, initOverrides) {
        if (queryMerchantResourceRequest == null) {
            throw new runtime.RequiredError('queryMerchantResourceRequest', 'Required parameter "queryMerchantResourceRequest" was null or undefined when calling queryMerchantResource().');
        }
        const validationErrorContexts = (0, index_1.validateQueryMerchantResourceRequest)(queryMerchantResourceRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/merchant/queryMerchantResource.htm`;
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.QueryMerchantResourceRequestToJSON)(queryMerchantResourceRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryMerchantResourceResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to do transfer to Bank request via DANA
     * Transfer to Bank
     */
    async transferToBank(transferToBankRequest, initOverrides) {
        if (transferToBankRequest == null) {
            throw new runtime.RequiredError('transferToBankRequest', 'Required parameter "transferToBankRequest" was null or undefined when calling transferToBank().');
        }
        const validationErrorContexts = (0, index_1.validateTransferToBankRequest)(transferToBankRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/transfer-bank.htm`;
        const requestBody = JSON.stringify((0, index_1.TransferToBankRequestToJSON)(transferToBankRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TransferToBankRequestToJSON)(transferToBankRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransferToBankResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to do inquiry status transfer to Bank transaction to DANA
     * Transfer to Bank Inquiry Status
     */
    async transferToBankInquiryStatus(transferToBankInquiryStatusRequest, initOverrides) {
        if (transferToBankInquiryStatusRequest == null) {
            throw new runtime.RequiredError('transferToBankInquiryStatusRequest', 'Required parameter "transferToBankInquiryStatusRequest" was null or undefined when calling transferToBankInquiryStatus().');
        }
        const validationErrorContexts = (0, index_1.validateTransferToBankInquiryStatusRequest)(transferToBankInquiryStatusRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/transfer-bank-status.htm`;
        const requestBody = JSON.stringify((0, index_1.TransferToBankInquiryStatusRequestToJSON)(transferToBankInquiryStatusRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TransferToBankInquiryStatusRequestToJSON)(transferToBankInquiryStatusRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransferToBankInquiryStatusResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to do top up request to DANA
     * Transfer to DANA
     */
    async transferToDana(transferToDanaRequest, initOverrides) {
        if (transferToDanaRequest == null) {
            throw new runtime.RequiredError('transferToDanaRequest', 'Required parameter "transferToDanaRequest" was null or undefined when calling transferToDana().');
        }
        const validationErrorContexts = (0, index_1.validateTransferToDanaRequest)(transferToDanaRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/topup.htm`;
        const requestBody = JSON.stringify((0, index_1.TransferToDanaRequestToJSON)(transferToDanaRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TransferToDanaRequestToJSON)(transferToDanaRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransferToDanaResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to do inquiry status top up transaction to DANA
     * Transfer to DANA Inquiry Status
     */
    async transferToDanaInquiryStatus(transferToDanaInquiryStatusRequest, initOverrides) {
        if (transferToDanaInquiryStatusRequest == null) {
            throw new runtime.RequiredError('transferToDanaInquiryStatusRequest', 'Required parameter "transferToDanaInquiryStatusRequest" was null or undefined when calling transferToDanaInquiryStatus().');
        }
        const validationErrorContexts = (0, index_1.validateTransferToDanaInquiryStatusRequest)(transferToDanaInquiryStatusRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/emoney/topup-status.htm`;
        const requestBody = JSON.stringify((0, index_1.TransferToDanaInquiryStatusRequestToJSON)(transferToDanaInquiryStatusRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.TransferToDanaInquiryStatusRequestToJSON)(transferToDanaInquiryStatusRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransferToDanaInquiryStatusResponseFromJSON)(jsonValue)).value();
    }
}
exports.DisbursementApi = DisbursementApi;
