"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryMerchantResourceRequestRequestHeadFunctionEnum = void 0;
exports.instanceOfQueryMerchantResourceRequestRequestHead = instanceOfQueryMerchantResourceRequestRequestHead;
exports.QueryMerchantResourceRequestRequestHeadFromJSON = QueryMerchantResourceRequestRequestHeadFromJSON;
exports.QueryMerchantResourceRequestRequestHeadFromJSONTyped = QueryMerchantResourceRequestRequestHeadFromJSONTyped;
exports.QueryMerchantResourceRequestRequestHeadToJSON = QueryMerchantResourceRequestRequestHeadToJSON;
exports.QueryMerchantResourceRequestRequestHeadToJSONTyped = QueryMerchantResourceRequestRequestHeadToJSONTyped;
exports.validateQueryMerchantResourceRequestRequestHead = validateQueryMerchantResourceRequestRequestHead;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.QueryMerchantResourceRequestRequestHeadFunctionEnum = {
    DanaMerchantQueryMerchantResource: 'dana.merchant.queryMerchantResource'
};
/**
 * Check if a given object implements the QueryMerchantResourceRequestRequestHead interface.
 */
function instanceOfQueryMerchantResourceRequestRequestHead(value) {
    if (!('version' in value) || value['version'] === undefined)
        return false;
    if (!('_function' in value) || value['_function'] === undefined)
        return false;
    if (!('clientId' in value) || value['clientId'] === undefined)
        return false;
    if (!('reqTime' in value) || value['reqTime'] === undefined)
        return false;
    if (!('reqMsgId' in value) || value['reqMsgId'] === undefined)
        return false;
    if (!('clientSecret' in value) || value['clientSecret'] === undefined)
        return false;
    return true;
}
function QueryMerchantResourceRequestRequestHeadFromJSON(json) {
    return QueryMerchantResourceRequestRequestHeadFromJSONTyped(json, false);
}
function QueryMerchantResourceRequestRequestHeadFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'version': json['version'],
        '_function': json['function'],
        'clientId': json['clientId'],
        'reqTime': (new Date(json['reqTime'])),
        'reqMsgId': json['reqMsgId'],
        'clientSecret': json['clientSecret'],
        'reserve': json['reserve'] == null ? undefined : json['reserve'],
    };
}
function QueryMerchantResourceRequestRequestHeadToJSON(json) {
    return QueryMerchantResourceRequestRequestHeadToJSONTyped(json, false);
}
function QueryMerchantResourceRequestRequestHeadToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'version': value['version'],
        'function': value['_function'],
        'clientId': value['clientId'],
        'reqTime': ((value['reqTime']).toISOString()),
        'reqMsgId': value['reqMsgId'],
        'clientSecret': value['clientSecret'],
        'reserve': value['reserve'],
    };
}
const propertyValidationAttributesMap = {
    version: {
        maxLength: 8,
    },
    _function: {
        maxLength: 128,
    },
    clientId: {
        maxLength: 32,
    },
    reqMsgId: {
        maxLength: 64,
    },
    clientSecret: {
        maxLength: 64,
    },
    reserve: {
        maxLength: 256,
    },
};
function validateQueryMerchantResourceRequestRequestHead(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('version', value.version, propertyValidationAttributesMap['version']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('_function', value._function, propertyValidationAttributesMap['_function']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('clientId', value.clientId, propertyValidationAttributesMap['clientId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('reqMsgId', value.reqMsgId, propertyValidationAttributesMap['reqMsgId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('clientSecret', value.clientSecret, propertyValidationAttributesMap['clientSecret']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('reserve', value.reserve, propertyValidationAttributesMap['reserve']));
    return validationErrorContexts;
}
