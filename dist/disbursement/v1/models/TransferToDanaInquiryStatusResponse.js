"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferToDanaInquiryStatusResponseLatestTransactionStatusEnum = void 0;
exports.instanceOfTransferToDanaInquiryStatusResponse = instanceOfTransferToDanaInquiryStatusResponse;
exports.TransferToDanaInquiryStatusResponseFromJSON = TransferToDanaInquiryStatusResponseFromJSON;
exports.TransferToDanaInquiryStatusResponseFromJSONTyped = TransferToDanaInquiryStatusResponseFromJSONTyped;
exports.TransferToDanaInquiryStatusResponseToJSON = TransferToDanaInquiryStatusResponseToJSON;
exports.TransferToDanaInquiryStatusResponseToJSONTyped = TransferToDanaInquiryStatusResponseToJSONTyped;
exports.validateTransferToDanaInquiryStatusResponse = validateTransferToDanaInquiryStatusResponse;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * @export
 */
exports.TransferToDanaInquiryStatusResponseLatestTransactionStatusEnum = {
    _00: '00',
    _01: '01',
    _02: '02',
    _03: '03',
    _04: '04',
    _05: '05',
    _06: '06',
    _07: '07'
};
/**
 * Check if a given object implements the TransferToDanaInquiryStatusResponse interface.
 */
function instanceOfTransferToDanaInquiryStatusResponse(value) {
    if (!('responseCode' in value) || value['responseCode'] === undefined)
        return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined)
        return false;
    if (!('originalPartnerReferenceNo' in value) || value['originalPartnerReferenceNo'] === undefined)
        return false;
    if (!('serviceCode' in value) || value['serviceCode'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    if (!('latestTransactionStatus' in value) || value['latestTransactionStatus'] === undefined)
        return false;
    if (!('transactionStatusDesc' in value) || value['transactionStatusDesc'] === undefined)
        return false;
    return true;
}
function TransferToDanaInquiryStatusResponseFromJSON(json) {
    return TransferToDanaInquiryStatusResponseFromJSONTyped(json, false);
}
function TransferToDanaInquiryStatusResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'originalPartnerReferenceNo': json['originalPartnerReferenceNo'],
        'originalReferenceNo': json['originalReferenceNo'] == null ? undefined : json['originalReferenceNo'],
        'originalExternalId': json['originalExternalId'] == null ? undefined : json['originalExternalId'],
        'serviceCode': json['serviceCode'],
        'amount': (0, Money_1.MoneyFromJSON)(json['amount']),
        'latestTransactionStatus': json['latestTransactionStatus'],
        'transactionStatusDesc': json['transactionStatusDesc'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}
function TransferToDanaInquiryStatusResponseToJSON(json) {
    return TransferToDanaInquiryStatusResponseToJSONTyped(json, false);
}
function TransferToDanaInquiryStatusResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'originalPartnerReferenceNo': value['originalPartnerReferenceNo'],
        'originalReferenceNo': value['originalReferenceNo'],
        'originalExternalId': value['originalExternalId'],
        'serviceCode': value['serviceCode'],
        'amount': (0, Money_1.MoneyToJSON)(value['amount']),
        'latestTransactionStatus': value['latestTransactionStatus'],
        'transactionStatusDesc': value['transactionStatusDesc'],
        'additionalInfo': value['additionalInfo'],
    };
}
const propertyValidationAttributesMap = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    originalPartnerReferenceNo: {
        maxLength: 64,
    },
    originalReferenceNo: {
        maxLength: 64,
    },
    originalExternalId: {
        maxLength: 36,
    },
    serviceCode: {
        maxLength: 2,
    },
    latestTransactionStatus: {
        maxLength: 2,
    },
    transactionStatusDesc: {
        maxLength: 50,
    },
};
function validateTransferToDanaInquiryStatusResponse(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('originalPartnerReferenceNo', value.originalPartnerReferenceNo, propertyValidationAttributesMap['originalPartnerReferenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('originalReferenceNo', value.originalReferenceNo, propertyValidationAttributesMap['originalReferenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('originalExternalId', value.originalExternalId, propertyValidationAttributesMap['originalExternalId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('serviceCode', value.serviceCode, propertyValidationAttributesMap['serviceCode']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.amount));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('latestTransactionStatus', value.latestTransactionStatus, propertyValidationAttributesMap['latestTransactionStatus']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('transactionStatusDesc', value.transactionStatusDesc, propertyValidationAttributesMap['transactionStatusDesc']));
    return validationErrorContexts;
}
