"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfTransferToDanaRequest = instanceOfTransferToDanaRequest;
exports.TransferToDanaRequestFromJSON = TransferToDanaRequestFromJSON;
exports.TransferToDanaRequestFromJSONTyped = TransferToDanaRequestFromJSONTyped;
exports.TransferToDanaRequestToJSON = TransferToDanaRequestToJSON;
exports.TransferToDanaRequestToJSONTyped = TransferToDanaRequestToJSONTyped;
exports.validateTransferToDanaRequest = validateTransferToDanaRequest;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
const TransferToDanaRequestAdditionalInfo_1 = require("./TransferToDanaRequestAdditionalInfo");
/**
 * Check if a given object implements the TransferToDanaRequest interface.
 */
function instanceOfTransferToDanaRequest(value) {
    if (!('partnerReferenceNo' in value) || value['partnerReferenceNo'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    if (!('feeAmount' in value) || value['feeAmount'] === undefined)
        return false;
    if (!('additionalInfo' in value) || value['additionalInfo'] === undefined)
        return false;
    return true;
}
function TransferToDanaRequestFromJSON(json) {
    return TransferToDanaRequestFromJSONTyped(json, false);
}
function TransferToDanaRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'partnerReferenceNo': json['partnerReferenceNo'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'amount': (0, Money_1.MoneyFromJSON)(json['amount']),
        'feeAmount': (0, Money_1.MoneyFromJSON)(json['feeAmount']),
        'transactionDate': json['transactionDate'] == null ? undefined : json['transactionDate'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'additionalInfo': (0, TransferToDanaRequestAdditionalInfo_1.TransferToDanaRequestAdditionalInfoFromJSON)(json['additionalInfo']),
    };
}
function TransferToDanaRequestToJSON(json) {
    return TransferToDanaRequestToJSONTyped(json, false);
}
function TransferToDanaRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'partnerReferenceNo': value['partnerReferenceNo'],
        'customerNumber': value['customerNumber'],
        'amount': (0, Money_1.MoneyToJSON)(value['amount']),
        'feeAmount': (0, Money_1.MoneyToJSON)(value['feeAmount']),
        'transactionDate': value['transactionDate'],
        'sessionId': value['sessionId'],
        'categoryId': value['categoryId'],
        'notes': value['notes'],
        'additionalInfo': (0, TransferToDanaRequestAdditionalInfo_1.TransferToDanaRequestAdditionalInfoToJSON)(value['additionalInfo']),
    };
}
const propertyValidationAttributesMap = {
    partnerReferenceNo: {
        maxLength: 64,
    },
    customerNumber: {
        maxLength: 32,
    },
    transactionDate: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    sessionId: {
        maxLength: 25,
    },
    categoryId: {
        maximum: 9999999999,
        exclusiveMaximum: false,
    },
    notes: {
        maxLength: 255,
    },
};
function validateTransferToDanaRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.amount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.feeAmount));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('transactionDate', value.transactionDate, propertyValidationAttributesMap['transactionDate']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('categoryId', value.categoryId, propertyValidationAttributesMap['categoryId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('notes', value.notes, propertyValidationAttributesMap['notes']));
    validationErrorContexts.push(...(0, TransferToDanaRequestAdditionalInfo_1.validateTransferToDanaRequestAdditionalInfo)(value.additionalInfo));
    return validationErrorContexts;
}
