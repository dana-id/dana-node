"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfBankAccountInquiryResponse = instanceOfBankAccountInquiryResponse;
exports.BankAccountInquiryResponseFromJSON = BankAccountInquiryResponseFromJSON;
exports.BankAccountInquiryResponseFromJSONTyped = BankAccountInquiryResponseFromJSONTyped;
exports.BankAccountInquiryResponseToJSON = BankAccountInquiryResponseToJSON;
exports.BankAccountInquiryResponseToJSONTyped = BankAccountInquiryResponseToJSONTyped;
exports.validateBankAccountInquiryResponse = validateBankAccountInquiryResponse;
const runtime_1 = require("../../../runtime");
const BankAccountInquiryResponseAdditionalInfo_1 = require("./BankAccountInquiryResponseAdditionalInfo");
const Money_1 = require("./Money");
/**
 * Check if a given object implements the BankAccountInquiryResponse interface.
 */
function instanceOfBankAccountInquiryResponse(value) {
    if (!('responseCode' in value) || value['responseCode'] === undefined)
        return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined)
        return false;
    if (!('beneficiaryAccountNumber' in value) || value['beneficiaryAccountNumber'] === undefined)
        return false;
    if (!('beneficiaryAccountName' in value) || value['beneficiaryAccountName'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    return true;
}
function BankAccountInquiryResponseFromJSON(json) {
    return BankAccountInquiryResponseFromJSONTyped(json, false);
}
function BankAccountInquiryResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'referenceNo': json['referenceNo'] == null ? undefined : json['referenceNo'],
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'accountType': json['accountType'] == null ? undefined : json['accountType'],
        'beneficiaryAccountNumber': json['beneficiaryAccountNumber'],
        'beneficiaryAccountName': json['beneficiaryAccountName'],
        'beneficiaryBankCode': json['beneficiaryBankCode'] == null ? undefined : json['beneficiaryBankCode'],
        'beneficiaryBankShortName': json['beneficiaryBankShortName'] == null ? undefined : json['beneficiaryBankShortName'],
        'beneficiaryBankName': json['beneficiaryBankName'] == null ? undefined : json['beneficiaryBankName'],
        'amount': (0, Money_1.MoneyFromJSON)(json['amount']),
        'additionalInfo': json['additionalInfo'] == null ? undefined : (0, BankAccountInquiryResponseAdditionalInfo_1.BankAccountInquiryResponseAdditionalInfoFromJSON)(json['additionalInfo']),
    };
}
function BankAccountInquiryResponseToJSON(json) {
    return BankAccountInquiryResponseToJSONTyped(json, false);
}
function BankAccountInquiryResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'referenceNo': value['referenceNo'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'accountType': value['accountType'],
        'beneficiaryAccountNumber': value['beneficiaryAccountNumber'],
        'beneficiaryAccountName': value['beneficiaryAccountName'],
        'beneficiaryBankCode': value['beneficiaryBankCode'],
        'beneficiaryBankShortName': value['beneficiaryBankShortName'],
        'beneficiaryBankName': value['beneficiaryBankName'],
        'amount': (0, Money_1.MoneyToJSON)(value['amount']),
        'additionalInfo': (0, BankAccountInquiryResponseAdditionalInfo_1.BankAccountInquiryResponseAdditionalInfoToJSON)(value['additionalInfo']),
    };
}
const propertyValidationAttributesMap = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    referenceNo: {
        maxLength: 64,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    accountType: {
        maxLength: 25,
    },
    beneficiaryAccountNumber: {
        maxLength: 32,
    },
    beneficiaryAccountName: {
        maxLength: 64,
    },
    beneficiaryBankCode: {
        maxLength: 8,
    },
    beneficiaryBankShortName: {
        maxLength: 25,
    },
    beneficiaryBankName: {
        maxLength: 25,
    },
};
function validateBankAccountInquiryResponse(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('referenceNo', value.referenceNo, propertyValidationAttributesMap['referenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('accountType', value.accountType, propertyValidationAttributesMap['accountType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryAccountNumber', value.beneficiaryAccountNumber, propertyValidationAttributesMap['beneficiaryAccountNumber']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryAccountName', value.beneficiaryAccountName, propertyValidationAttributesMap['beneficiaryAccountName']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryBankCode', value.beneficiaryBankCode, propertyValidationAttributesMap['beneficiaryBankCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryBankShortName', value.beneficiaryBankShortName, propertyValidationAttributesMap['beneficiaryBankShortName']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryBankName', value.beneficiaryBankName, propertyValidationAttributesMap['beneficiaryBankName']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.amount));
    validationErrorContexts.push(...(0, BankAccountInquiryResponseAdditionalInfo_1.validateBankAccountInquiryResponseAdditionalInfo)(value.additionalInfo));
    return validationErrorContexts;
}
