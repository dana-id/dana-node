"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum = void 0;
exports.instanceOfQueryMerchantResourceRequestRequestBody = instanceOfQueryMerchantResourceRequestRequestBody;
exports.QueryMerchantResourceRequestRequestBodyFromJSON = QueryMerchantResourceRequestRequestBodyFromJSON;
exports.QueryMerchantResourceRequestRequestBodyFromJSONTyped = QueryMerchantResourceRequestRequestBodyFromJSONTyped;
exports.QueryMerchantResourceRequestRequestBodyToJSON = QueryMerchantResourceRequestRequestBodyToJSON;
exports.QueryMerchantResourceRequestRequestBodyToJSONTyped = QueryMerchantResourceRequestRequestBodyToJSONTyped;
exports.validateQueryMerchantResourceRequestRequestBody = validateQueryMerchantResourceRequestRequestBody;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.QueryMerchantResourceRequestRequestBodyMerchantResourceInfoListEnum = {
    MerchantDepositBalance: 'MERCHANT_DEPOSIT_BALANCE',
    MerchantAvailableBalance: 'MERCHANT_AVAILABLE_BALANCE',
    MerchantTotalBalance: 'MERCHANT_TOTAL_BALANCE'
};
/**
 * Check if a given object implements the QueryMerchantResourceRequestRequestBody interface.
 */
function instanceOfQueryMerchantResourceRequestRequestBody(value) {
    if (!('requestMerchantId' in value) || value['requestMerchantId'] === undefined)
        return false;
    if (!('merchantResourceInfoList' in value) || value['merchantResourceInfoList'] === undefined)
        return false;
    return true;
}
function QueryMerchantResourceRequestRequestBodyFromJSON(json) {
    return QueryMerchantResourceRequestRequestBodyFromJSONTyped(json, false);
}
function QueryMerchantResourceRequestRequestBodyFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'requestMerchantId': json['requestMerchantId'],
        'merchantResourceInfoList': json['merchantResourceInfoList'],
    };
}
function QueryMerchantResourceRequestRequestBodyToJSON(json) {
    return QueryMerchantResourceRequestRequestBodyToJSONTyped(json, false);
}
function QueryMerchantResourceRequestRequestBodyToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'requestMerchantId': value['requestMerchantId'],
        'merchantResourceInfoList': value['merchantResourceInfoList'],
    };
}
const propertyValidationAttributesMap = {
    merchantResourceInfoList: {
        minItems: 1,
        uniqueItems: false,
    },
};
function validateQueryMerchantResourceRequestRequestBody(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantResourceInfoList', value.merchantResourceInfoList, propertyValidationAttributesMap['merchantResourceInfoList']));
    return validationErrorContexts;
}
