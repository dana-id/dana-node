"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDanaAccountInquiryResponse = instanceOfDanaAccountInquiryResponse;
exports.DanaAccountInquiryResponseFromJSON = DanaAccountInquiryResponseFromJSON;
exports.DanaAccountInquiryResponseFromJSONTyped = DanaAccountInquiryResponseFromJSONTyped;
exports.DanaAccountInquiryResponseToJSON = DanaAccountInquiryResponseToJSON;
exports.DanaAccountInquiryResponseToJSONTyped = DanaAccountInquiryResponseToJSONTyped;
exports.validateDanaAccountInquiryResponse = validateDanaAccountInquiryResponse;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * Check if a given object implements the DanaAccountInquiryResponse interface.
 */
function instanceOfDanaAccountInquiryResponse(value) {
    if (!('responseCode' in value) || value['responseCode'] === undefined)
        return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined)
        return false;
    if (!('customerName' in value) || value['customerName'] === undefined)
        return false;
    if (!('minAmount' in value) || value['minAmount'] === undefined)
        return false;
    if (!('maxAmount' in value) || value['maxAmount'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    if (!('feeAmount' in value) || value['feeAmount'] === undefined)
        return false;
    return true;
}
function DanaAccountInquiryResponseFromJSON(json) {
    return DanaAccountInquiryResponseFromJSONTyped(json, false);
}
function DanaAccountInquiryResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'referenceNo': json['referenceNo'] == null ? undefined : json['referenceNo'],
        'partnerReferenceNo': json['partnerReferenceNo'] == null ? undefined : json['partnerReferenceNo'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'customerNumber': json['customerNumber'] == null ? undefined : json['customerNumber'],
        'customerName': json['customerName'],
        'customerMonthlyLimit': json['customerMonthlyLimit'] == null ? undefined : json['customerMonthlyLimit'],
        'minAmount': (0, Money_1.MoneyFromJSON)(json['minAmount']),
        'maxAmount': (0, Money_1.MoneyFromJSON)(json['maxAmount']),
        'amount': (0, Money_1.MoneyFromJSON)(json['amount']),
        'feeAmount': (0, Money_1.MoneyFromJSON)(json['feeAmount']),
        'feeType': json['feeType'] == null ? undefined : json['feeType'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
    };
}
function DanaAccountInquiryResponseToJSON(json) {
    return DanaAccountInquiryResponseToJSONTyped(json, false);
}
function DanaAccountInquiryResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'referenceNo': value['referenceNo'],
        'partnerReferenceNo': value['partnerReferenceNo'],
        'sessionId': value['sessionId'],
        'customerNumber': value['customerNumber'],
        'customerName': value['customerName'],
        'customerMonthlyLimit': value['customerMonthlyLimit'],
        'minAmount': (0, Money_1.MoneyToJSON)(value['minAmount']),
        'maxAmount': (0, Money_1.MoneyToJSON)(value['maxAmount']),
        'amount': (0, Money_1.MoneyToJSON)(value['amount']),
        'feeAmount': (0, Money_1.MoneyToJSON)(value['feeAmount']),
        'feeType': value['feeType'],
        'additionalInfo': value['additionalInfo'],
    };
}
const propertyValidationAttributesMap = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    referenceNo: {
        maxLength: 64,
    },
    partnerReferenceNo: {
        maxLength: 64,
    },
    sessionId: {
        maxLength: 25,
    },
    customerNumber: {
        maxLength: 32,
    },
    customerName: {
        maxLength: 255,
    },
    customerMonthlyLimit: {
        maximum: 100000000000000000,
        exclusiveMaximum: false,
    },
    feeType: {
        maxLength: 25,
    },
};
function validateDanaAccountInquiryResponse(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('referenceNo', value.referenceNo, propertyValidationAttributesMap['referenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('partnerReferenceNo', value.partnerReferenceNo, propertyValidationAttributesMap['partnerReferenceNo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('sessionId', value.sessionId, propertyValidationAttributesMap['sessionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('customerNumber', value.customerNumber, propertyValidationAttributesMap['customerNumber']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('customerName', value.customerName, propertyValidationAttributesMap['customerName']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('customerMonthlyLimit', value.customerMonthlyLimit, propertyValidationAttributesMap['customerMonthlyLimit']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.minAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.maxAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.amount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.feeAmount));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('feeType', value.feeType, propertyValidationAttributesMap['feeType']));
    return validationErrorContexts;
}
