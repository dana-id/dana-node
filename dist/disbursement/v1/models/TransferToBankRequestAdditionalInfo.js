"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferToBankRequestAdditionalInfoChargeTargetEnum = void 0;
exports.instanceOfTransferToBankRequestAdditionalInfo = instanceOfTransferToBankRequestAdditionalInfo;
exports.TransferToBankRequestAdditionalInfoFromJSON = TransferToBankRequestAdditionalInfoFromJSON;
exports.TransferToBankRequestAdditionalInfoFromJSONTyped = TransferToBankRequestAdditionalInfoFromJSONTyped;
exports.TransferToBankRequestAdditionalInfoToJSON = TransferToBankRequestAdditionalInfoToJSON;
exports.TransferToBankRequestAdditionalInfoToJSONTyped = TransferToBankRequestAdditionalInfoToJSONTyped;
exports.validateTransferToBankRequestAdditionalInfo = validateTransferToBankRequestAdditionalInfo;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.TransferToBankRequestAdditionalInfoChargeTargetEnum = {
    Division: 'DIVISION',
    Merchant: 'MERCHANT'
};
/**
 * Check if a given object implements the TransferToBankRequestAdditionalInfo interface.
 */
function instanceOfTransferToBankRequestAdditionalInfo(value) {
    if (!('fundType' in value) || value['fundType'] === undefined)
        return false;
    return true;
}
function TransferToBankRequestAdditionalInfoFromJSON(json) {
    return TransferToBankRequestAdditionalInfoFromJSONTyped(json, false);
}
function TransferToBankRequestAdditionalInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'fundType': json['fundType'],
        'externalDivisionId': json['externalDivisionId'] == null ? undefined : json['externalDivisionId'],
        'chargeTarget': json['chargeTarget'] == null ? undefined : json['chargeTarget'],
        'needNotify': json['needNotify'] == null ? undefined : json['needNotify'],
        'beneficiaryAccountName': json['beneficiaryAccountName'] == null ? undefined : json['beneficiaryAccountName'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
    };
}
function TransferToBankRequestAdditionalInfoToJSON(json) {
    return TransferToBankRequestAdditionalInfoToJSONTyped(json, false);
}
function TransferToBankRequestAdditionalInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'fundType': value['fundType'],
        'externalDivisionId': value['externalDivisionId'],
        'chargeTarget': value['chargeTarget'],
        'needNotify': value['needNotify'],
        'beneficiaryAccountName': value['beneficiaryAccountName'],
        'accessToken': value['accessToken'],
    };
}
const propertyValidationAttributesMap = {
    fundType: {
        maxLength: 64,
    },
    externalDivisionId: {
        maxLength: 64,
    },
    chargeTarget: {
        maxLength: 64,
    },
    beneficiaryAccountName: {
        maxLength: 64,
    },
    accessToken: {
        maxLength: 512,
    },
};
function validateTransferToBankRequestAdditionalInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('fundType', value.fundType, propertyValidationAttributesMap['fundType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalDivisionId', value.externalDivisionId, propertyValidationAttributesMap['externalDivisionId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('chargeTarget', value.chargeTarget, propertyValidationAttributesMap['chargeTarget']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('beneficiaryAccountName', value.beneficiaryAccountName, propertyValidationAttributesMap['beneficiaryAccountName']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));
    return validationErrorContexts;
}
