"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentGatewayApi = void 0;
const runtime = require("../../../runtime");
const index_1 = require("../models/index");
const uuid_1 = require("uuid");
const date_fns_tz_1 = require("date-fns-tz");
/**
 *
 */
class PaymentGatewayApi extends runtime.BaseAPI {
    constructor({ partnerId, privateKey, env }) {
        const configuration = new runtime.Configuration({
            basePath: runtime.getBasePathByEnv(env),
        });
        super(configuration);
        this.partnerId = "";
        this.privateKey = "";
        this.partnerId = partnerId;
        this.privateKey = privateKey;
    }
    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order API
     */
    async cancelOrderRaw(requestParameters, initOverrides) {
        if (requestParameters['cancelOrderRequest'] == null) {
            throw new runtime.RequiredError('cancelOrderRequest', 'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ORIGIN"] = await this.configuration.apiKey("ORIGIN"); // ORIGIN authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-PARTNER-ID"] = await this.configuration.apiKey("X-PARTNER-ID"); // X_PARTNER_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["CHANNEL-ID"] = await this.configuration.apiKey("CHANNEL-ID"); // CHANNEL_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekey"] = await this.configuration.apiKey("privatekey"); // PRIVATE_KEY authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekeypath"] = await this.configuration.apiKey("privatekeypath"); // PRIVATE_KEY_PATH authentication
        }
        const httpMethod = 'POST';
        const endpointUrl = '/v1.0/debit/cancel.htm';
        const requestBody = JSON.stringify((0, index_1.CancelOrderRequestToJSON)(requestParameters['cancelOrderRequest']));
        const timeStamp = (0, date_fns_tz_1.format)(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
        const signature = runtime.DanaSignatureUtil.generateSnapB2BScenarioSignature(httpMethod, endpointUrl, requestBody, this.privateKey, timeStamp);
        headerParameters['X-TIMESTAMP'] = timeStamp;
        headerParameters['X-SIGNATURE'] = signature;
        headerParameters['X-PARTNER-ID'] = this.partnerId;
        headerParameters['X-EXTERNAL-ID'] = (0, uuid_1.v4)();
        headerParameters['CHANNEL-ID'] = '95221';
        const response = await this.request({
            path: `/v1.0/debit/cancel.htm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CancelOrderRequestToJSON)(requestParameters['cancelOrderRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelOrderResponseFromJSON)(jsonValue));
    }
    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order API
     */
    async cancelOrder(cancelOrderRequest, initOverrides) {
        const response = await this.cancelOrderRaw({ cancelOrderRequest: cancelOrderRequest }, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
     * Consult Pay API
     */
    async consultPayRaw(requestParameters, initOverrides) {
        if (requestParameters['consultPayRequest'] == null) {
            throw new runtime.RequiredError('consultPayRequest', 'Required parameter "consultPayRequest" was null or undefined when calling consultPay().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ORIGIN"] = await this.configuration.apiKey("ORIGIN"); // ORIGIN authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-PARTNER-ID"] = await this.configuration.apiKey("X-PARTNER-ID"); // X_PARTNER_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["CHANNEL-ID"] = await this.configuration.apiKey("CHANNEL-ID"); // CHANNEL_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekey"] = await this.configuration.apiKey("privatekey"); // PRIVATE_KEY authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekeypath"] = await this.configuration.apiKey("privatekeypath"); // PRIVATE_KEY_PATH authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["env"] = await this.configuration.apiKey("env"); // ENV authentication
        }
        const httpMethod = 'POST';
        const endpointUrl = '/v1.0/payment-gateway/consult-pay.htm';
        const requestBody = JSON.stringify((0, index_1.ConsultPayRequestToJSON)(requestParameters['consultPayRequest']));
        const timeStamp = (0, date_fns_tz_1.format)(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
        const signature = runtime.DanaSignatureUtil.generateSnapB2BScenarioSignature(httpMethod, endpointUrl, requestBody, this.privateKey, timeStamp);
        headerParameters['X-TIMESTAMP'] = timeStamp;
        headerParameters['X-SIGNATURE'] = signature;
        headerParameters['X-PARTNER-ID'] = this.partnerId;
        headerParameters['X-EXTERNAL-ID'] = (0, uuid_1.v4)();
        headerParameters['CHANNEL-ID'] = '95221';
        const response = await this.request({
            path: `/v1.0/payment-gateway/consult-pay.htm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ConsultPayRequestToJSON)(requestParameters['consultPayRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConsultPayResponseFromJSON)(jsonValue));
    }
    /**
     * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
     * Consult Pay API
     */
    async consultPay(consultPayRequest, initOverrides) {
        const response = await this.consultPayRaw({ consultPayRequest: consultPayRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Create an order to process a payment through DANA Payment Gateway
     * Create Payment Order
     */
    async createOrderRaw(requestParameters, initOverrides) {
        if (requestParameters['createOrderRequest'] == null) {
            throw new runtime.RequiredError('createOrderRequest', 'Required parameter "createOrderRequest" was null or undefined when calling createOrder().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ORIGIN"] = await this.configuration.apiKey("ORIGIN"); // ORIGIN authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-PARTNER-ID"] = await this.configuration.apiKey("X-PARTNER-ID"); // X_PARTNER_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["CHANNEL-ID"] = await this.configuration.apiKey("CHANNEL-ID"); // CHANNEL_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekey"] = await this.configuration.apiKey("privatekey"); // PRIVATE_KEY authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekeypath"] = await this.configuration.apiKey("privatekeypath"); // PRIVATE_KEY_PATH authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["env"] = await this.configuration.apiKey("env"); // ENV authentication
        }
        const httpMethod = 'POST';
        const endpointUrl = '/v1.0/payment-gateway/payment.htm';
        const requestBody = JSON.stringify((0, index_1.CreateOrderRequestToJSON)(requestParameters['createOrderRequest']));
        const timeStamp = (0, date_fns_tz_1.format)(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
        const signature = runtime.DanaSignatureUtil.generateSnapB2BScenarioSignature(httpMethod, endpointUrl, requestBody, this.privateKey, timeStamp);
        headerParameters['X-TIMESTAMP'] = timeStamp;
        headerParameters['X-SIGNATURE'] = signature;
        headerParameters['X-PARTNER-ID'] = this.partnerId;
        headerParameters['X-EXTERNAL-ID'] = (0, uuid_1.v4)();
        headerParameters['CHANNEL-ID'] = '95221';
        const response = await this.request({
            path: `/v1.0/payment-gateway/payment.htm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CreateOrderRequestToJSON)(requestParameters['createOrderRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreateOrderResponseFromJSON)(jsonValue));
    }
    /**
     * Create an order to process a payment through DANA Payment Gateway
     * Create Payment Order
     */
    async createOrder(createOrderRequest, initOverrides) {
        const response = await this.createOrderRaw({ createOrderRequest: createOrderRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Inquiry payment status and information from merchant’s platform to DANA
     * Query Payment
     */
    async queryPaymentRaw(requestParameters, initOverrides) {
        if (requestParameters['queryPaymentRequest'] == null) {
            throw new runtime.RequiredError('queryPaymentRequest', 'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ORIGIN"] = await this.configuration.apiKey("ORIGIN"); // ORIGIN authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-PARTNER-ID"] = await this.configuration.apiKey("X-PARTNER-ID"); // X_PARTNER_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["CHANNEL-ID"] = await this.configuration.apiKey("CHANNEL-ID"); // CHANNEL_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekey"] = await this.configuration.apiKey("privatekey"); // PRIVATE_KEY authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekeypath"] = await this.configuration.apiKey("privatekeypath"); // PRIVATE_KEY_PATH authentication
        }
        const httpMethod = 'POST';
        const endpointUrl = '/v1.0/debit/status.htm';
        const requestBody = JSON.stringify((0, index_1.QueryPaymentRequestToJSON)(requestParameters['queryPaymentRequest']));
        const timeStamp = (0, date_fns_tz_1.format)(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
        const signature = runtime.DanaSignatureUtil.generateSnapB2BScenarioSignature(httpMethod, endpointUrl, requestBody, this.privateKey, timeStamp);
        headerParameters['X-TIMESTAMP'] = timeStamp;
        headerParameters['X-SIGNATURE'] = signature;
        headerParameters['X-PARTNER-ID'] = this.partnerId;
        headerParameters['X-EXTERNAL-ID'] = (0, uuid_1.v4)();
        headerParameters['CHANNEL-ID'] = '95221';
        const response = await this.request({
            path: `/v1.0/debit/status.htm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.QueryPaymentRequestToJSON)(requestParameters['queryPaymentRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryPaymentResponseFromJSON)(jsonValue));
    }
    /**
     * Inquiry payment status and information from merchant’s platform to DANA
     * Query Payment
     */
    async queryPayment(queryPaymentRequest, initOverrides) {
        const response = await this.queryPaymentRaw({ queryPaymentRequest: queryPaymentRequest }, initOverrides);
        return await response.value();
    }
    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order API
     */
    async refundOrderRaw(requestParameters, initOverrides) {
        if (requestParameters['refundOrderRequest'] == null) {
            throw new runtime.RequiredError('refundOrderRequest', 'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["ORIGIN"] = await this.configuration.apiKey("ORIGIN"); // ORIGIN authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-PARTNER-ID"] = await this.configuration.apiKey("X-PARTNER-ID"); // X_PARTNER_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["CHANNEL-ID"] = await this.configuration.apiKey("CHANNEL-ID"); // CHANNEL_ID authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekey"] = await this.configuration.apiKey("privatekey"); // PRIVATE_KEY authentication
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["privatekeypath"] = await this.configuration.apiKey("privatekeypath"); // PRIVATE_KEY_PATH authentication
        }
        const httpMethod = 'POST';
        const endpointUrl = '/v1.0/debit/refund.htm';
        const requestBody = JSON.stringify((0, index_1.RefundOrderRequestToJSON)(requestParameters['refundOrderRequest']));
        const timeStamp = (0, date_fns_tz_1.format)(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
        const signature = runtime.DanaSignatureUtil.generateSnapB2BScenarioSignature(httpMethod, endpointUrl, requestBody, this.privateKey, timeStamp);
        headerParameters['X-TIMESTAMP'] = timeStamp;
        headerParameters['X-SIGNATURE'] = signature;
        headerParameters['X-PARTNER-ID'] = this.partnerId;
        headerParameters['X-EXTERNAL-ID'] = (0, uuid_1.v4)();
        headerParameters['CHANNEL-ID'] = '95221';
        const response = await this.request({
            path: `/v1.0/debit/refund.htm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.RefundOrderRequestToJSON)(requestParameters['refundOrderRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RefundOrderResponseFromJSON)(jsonValue));
    }
    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order API
     */
    async refundOrder(refundOrderRequest, initOverrides) {
        const response = await this.refundOrderRaw({ refundOrderRequest: refundOrderRequest }, initOverrides);
        return await response.value();
    }
}
exports.PaymentGatewayApi = PaymentGatewayApi;
