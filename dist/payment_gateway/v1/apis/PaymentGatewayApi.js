"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentGatewayApi = void 0;
const runtime = require("../../../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class PaymentGatewayApi extends runtime.BaseAPI {
    constructor({ partnerId, privateKey, origin, env, clientSecret }) {
        const basePath = runtime.getBasePathByEnv(env);
        const configuration = new runtime.Configuration({
            basePath: basePath,
        });
        super(configuration);
        this.partnerId = "";
        this.privateKey = "";
        this.origin = "";
        this.env = "";
        this.clientSecret = "";
        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
        this.clientSecret = clientSecret;
    }
    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order - Payment Gateway
     */
    async cancelOrder(cancelOrderRequest, initOverrides) {
        if (cancelOrderRequest == null) {
            throw new runtime.RequiredError('cancelOrderRequest', 'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().');
        }
        const validationErrorContexts = (0, index_1.validateCancelOrderRequest)(cancelOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/payment-gateway/v1.0/debit/cancel.htm`;
        const requestBody = JSON.stringify((0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelOrderResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
     * Consult Pay - Payment Gateway
     */
    async consultPay(consultPayRequest, initOverrides) {
        if (consultPayRequest == null) {
            throw new runtime.RequiredError('consultPayRequest', 'Required parameter "consultPayRequest" was null or undefined when calling consultPay().');
        }
        const validationErrorContexts = (0, index_1.validateConsultPayRequest)(consultPayRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/payment-gateway/consult-pay.htm`;
        const requestBody = JSON.stringify((0, index_1.ConsultPayRequestToJSON)(consultPayRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ConsultPayRequestToJSON)(consultPayRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConsultPayResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used for merchant to create order in DANA side
     * Create Order - Payment Gateway
     */
    async createOrder(createOrderRequest, initOverrides) {
        if (createOrderRequest == null) {
            throw new runtime.RequiredError('createOrderRequest', 'Required parameter "createOrderRequest" was null or undefined when calling createOrder().');
        }
        const validationErrorContexts = (0, index_1.validateCreateOrderRequest)(createOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/payment-gateway/v1.0/debit/payment-host-to-host.htm`;
        const requestBody = JSON.stringify((0, index_1.CreateOrderRequestToJSON)(createOrderRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CreateOrderRequestToJSON)(createOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CreateOrderResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to inquiry payment status and information from merchant\'s platform to DANA
     * Query Payment - Payment Gateway
     */
    async queryPayment(queryPaymentRequest, initOverrides) {
        if (queryPaymentRequest == null) {
            throw new runtime.RequiredError('queryPaymentRequest', 'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().');
        }
        const validationErrorContexts = (0, index_1.validateQueryPaymentRequest)(queryPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/payment-gateway/v1.0/debit/status.htm`;
        const requestBody = JSON.stringify((0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryPaymentResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order - Payment Gateway
     */
    async refundOrder(refundOrderRequest, initOverrides) {
        if (refundOrderRequest == null) {
            throw new runtime.RequiredError('refundOrderRequest', 'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().');
        }
        const validationErrorContexts = (0, index_1.validateRefundOrderRequest)(refundOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/payment-gateway/v1.0/debit/refund.htm`;
        const requestBody = JSON.stringify((0, index_1.RefundOrderRequestToJSON)(refundOrderRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.RefundOrderRequestToJSON)(refundOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RefundOrderResponseFromJSON)(jsonValue)).value();
    }
}
exports.PaymentGatewayApi = PaymentGatewayApi;
