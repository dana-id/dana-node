"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfPaymentView = instanceOfPaymentView;
exports.PaymentViewFromJSON = PaymentViewFromJSON;
exports.PaymentViewFromJSONTyped = PaymentViewFromJSONTyped;
exports.PaymentViewToJSON = PaymentViewToJSON;
exports.PaymentViewToJSONTyped = PaymentViewToJSONTyped;
exports.validatePaymentView = validatePaymentView;
const runtime_1 = require("../../../runtime");
const PayOptionInfo_1 = require("./PayOptionInfo");
/**
 * Check if a given object implements the PaymentView interface.
 */
function instanceOfPaymentView(value) {
    if (!('cashierRequestId' in value) || value['cashierRequestId'] === undefined)
        return false;
    if (!('paidTime' in value) || value['paidTime'] === undefined)
        return false;
    if (!('payOptionInfos' in value) || value['payOptionInfos'] === undefined)
        return false;
    return true;
}
function PaymentViewFromJSON(json) {
    return PaymentViewFromJSONTyped(json, false);
}
function PaymentViewFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'cashierRequestId': json['cashierRequestId'],
        'paidTime': json['paidTime'],
        'payOptionInfos': (json['payOptionInfos'].map(PayOptionInfo_1.PayOptionInfoFromJSON)),
        'payRequestExtendInfo': json['payRequestExtendInfo'] == null ? undefined : json['payRequestExtendInfo'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}
function PaymentViewToJSON(json) {
    return PaymentViewToJSONTyped(json, false);
}
function PaymentViewToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'cashierRequestId': value['cashierRequestId'],
        'paidTime': value['paidTime'],
        'payOptionInfos': (value['payOptionInfos'].map(PayOptionInfo_1.PayOptionInfoToJSON)),
        'payRequestExtendInfo': value['payRequestExtendInfo'],
        'extendInfo': value['extendInfo'],
    };
}
const propertyValidationAttributesMap = {
    cashierRequestId: {
        maxLength: 64,
    },
    paidTime: {
        maxLength: 25,
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    payRequestExtendInfo: {
        maxLength: 4096,
    },
    extendInfo: {
        maxLength: 4096,
    },
};
function validatePaymentView(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('cashierRequestId', value.cashierRequestId, propertyValidationAttributesMap['cashierRequestId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('paidTime', value.paidTime, propertyValidationAttributesMap['paidTime']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payRequestExtendInfo', value.payRequestExtendInfo, propertyValidationAttributesMap['payRequestExtendInfo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));
    return validationErrorContexts;
}
