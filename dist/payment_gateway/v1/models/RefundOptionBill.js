"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefundOptionBillPayMethodEnum = void 0;
exports.instanceOfRefundOptionBill = instanceOfRefundOptionBill;
exports.RefundOptionBillFromJSON = RefundOptionBillFromJSON;
exports.RefundOptionBillFromJSONTyped = RefundOptionBillFromJSONTyped;
exports.RefundOptionBillToJSON = RefundOptionBillToJSON;
exports.RefundOptionBillToJSONTyped = RefundOptionBillToJSONTyped;
exports.validateRefundOptionBill = validateRefundOptionBill;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * @export
 */
exports.RefundOptionBillPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT'
};
/**
 * Check if a given object implements the RefundOptionBill interface.
 */
function instanceOfRefundOptionBill(value) {
    return true;
}
function RefundOptionBillFromJSON(json) {
    return RefundOptionBillFromJSONTyped(json, false);
}
function RefundOptionBillFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'payMethod': json['payMethod'] == null ? undefined : json['payMethod'],
        'transAmount': json['transAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['transAmount']),
    };
}
function RefundOptionBillToJSON(json) {
    return RefundOptionBillToJSONTyped(json, false);
}
function RefundOptionBillToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'payMethod': value['payMethod'],
        'transAmount': (0, Money_1.MoneyToJSON)(value['transAmount']),
    };
}
const propertyValidationAttributesMap = {
    payMethod: {
        maxLength: 64,
    },
};
function validateRefundOptionBill(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.transAmount));
    return validationErrorContexts;
}
