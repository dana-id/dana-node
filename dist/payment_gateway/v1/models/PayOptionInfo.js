"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayOptionInfoPayOptionEnum = exports.PayOptionInfoPayMethodEnum = void 0;
exports.instanceOfPayOptionInfo = instanceOfPayOptionInfo;
exports.PayOptionInfoFromJSON = PayOptionInfoFromJSON;
exports.PayOptionInfoFromJSONTyped = PayOptionInfoFromJSONTyped;
exports.PayOptionInfoToJSON = PayOptionInfoToJSON;
exports.PayOptionInfoToJSONTyped = PayOptionInfoToJSONTyped;
exports.validatePayOptionInfo = validatePayOptionInfo;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * @export
 */
exports.PayOptionInfoPayMethodEnum = {
    Balance: 'BALANCE',
    Coupon: 'COUPON',
    NetBanking: 'NET_BANKING',
    CreditCard: 'CREDIT_CARD',
    DebitCard: 'DEBIT_CARD',
    VirtualAccount: 'VIRTUAL_ACCOUNT',
    Otc: 'OTC',
    DirectDebitCreditCard: 'DIRECT_DEBIT_CREDIT_CARD',
    DirectDebitDebitCard: 'DIRECT_DEBIT_DEBIT_CARD',
    OnlineCredit: 'ONLINE_CREDIT',
    LoanCredit: 'LOAN_CREDIT',
    NetworkPay: 'NETWORK_PAY',
    Card: 'CARD'
};
/**
 * @export
 */
exports.PayOptionInfoPayOptionEnum = {
    NetworkPayPgSpay: 'NETWORK_PAY_PG_SPAY',
    NetworkPayPgOvo: 'NETWORK_PAY_PG_OVO',
    NetworkPayPgGopay: 'NETWORK_PAY_PG_GOPAY',
    NetworkPayPgLinkaja: 'NETWORK_PAY_PG_LINKAJA',
    NetworkPayPgCard: 'NETWORK_PAY_PG_CARD',
    NetworkPayPcIndomaret: 'NETWORK_PAY_PC_INDOMARET',
    NetworkPayPgQris: 'NETWORK_PAY_PG_QRIS',
    VirtualAccountBca: 'VIRTUAL_ACCOUNT_BCA',
    VirtualAccountBni: 'VIRTUAL_ACCOUNT_BNI',
    VirtualAccountMandiri: 'VIRTUAL_ACCOUNT_MANDIRI',
    VirtualAccountBri: 'VIRTUAL_ACCOUNT_BRI',
    VirtualAccountBtpn: 'VIRTUAL_ACCOUNT_BTPN',
    VirtualAccountCimb: 'VIRTUAL_ACCOUNT_CIMB',
    VirtualAccountPermata: 'VIRTUAL_ACCOUNT_PERMATA',
    VirtualAccountPanin: 'VIRTUAL_ACCOUNT_PANIN'
};
/**
 * Check if a given object implements the PayOptionInfo interface.
 */
function instanceOfPayOptionInfo(value) {
    if (!('payMethod' in value) || value['payMethod'] === undefined)
        return false;
    return true;
}
function PayOptionInfoFromJSON(json) {
    return PayOptionInfoFromJSONTyped(json, false);
}
function PayOptionInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'payMethod': json['payMethod'],
        'payOption': json['payOption'] == null ? undefined : json['payOption'],
        'payAmount': json['payAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['payAmount']),
        'transAmount': json['transAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['transAmount']),
        'chargeAmount': json['chargeAmount'] == null ? undefined : (0, Money_1.MoneyFromJSON)(json['chargeAmount']),
        'payOptionBillExtendInfo': json['payOptionBillExtendInfo'] == null ? undefined : json['payOptionBillExtendInfo'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
        'paymentCode': json['paymentCode'] == null ? undefined : json['paymentCode'],
    };
}
function PayOptionInfoToJSON(json) {
    return PayOptionInfoToJSONTyped(json, false);
}
function PayOptionInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'payMethod': value['payMethod'],
        'payOption': value['payOption'],
        'payAmount': (0, Money_1.MoneyToJSON)(value['payAmount']),
        'transAmount': (0, Money_1.MoneyToJSON)(value['transAmount']),
        'chargeAmount': (0, Money_1.MoneyToJSON)(value['chargeAmount']),
        'payOptionBillExtendInfo': value['payOptionBillExtendInfo'],
        'extendInfo': value['extendInfo'],
        'paymentCode': value['paymentCode'],
    };
}
const propertyValidationAttributesMap = {
    payMethod: {
        maxLength: 64,
    },
    payOption: {
        maxLength: 64,
    },
    payOptionBillExtendInfo: {
        maxLength: 4096,
    },
    extendInfo: {
        maxLength: 4096,
    },
};
function validatePayOptionInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payMethod', value.payMethod, propertyValidationAttributesMap['payMethod']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payOption', value.payOption, propertyValidationAttributesMap['payOption']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.payAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.transAmount));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.chargeAmount));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('payOptionBillExtendInfo', value.payOptionBillExtendInfo, propertyValidationAttributesMap['payOptionBillExtendInfo']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));
    return validationErrorContexts;
}
