"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorContextActorTypeEnum = void 0;
exports.instanceOfActorContext = instanceOfActorContext;
exports.ActorContextFromJSON = ActorContextFromJSON;
exports.ActorContextFromJSONTyped = ActorContextFromJSONTyped;
exports.ActorContextToJSON = ActorContextToJSON;
exports.ActorContextToJSONTyped = ActorContextToJSONTyped;
exports.validateActorContext = validateActorContext;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.ActorContextActorTypeEnum = {
    User: 'USER',
    Merchant: 'MERCHANT',
    MerchantOperator: 'MERCHANT_OPERATOR',
    BackOffice: 'BACK_OFFICE',
    System: 'SYSTEM'
};
/**
 * Check if a given object implements the ActorContext interface.
 */
function instanceOfActorContext(value) {
    return true;
}
function ActorContextFromJSON(json) {
    return ActorContextFromJSONTyped(json, false);
}
function ActorContextFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'actorId': json['actorId'] == null ? undefined : json['actorId'],
        'actorType': json['actorType'] == null ? undefined : json['actorType'],
    };
}
function ActorContextToJSON(json) {
    return ActorContextToJSONTyped(json, false);
}
function ActorContextToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'actorId': value['actorId'],
        'actorType': value['actorType'],
    };
}
const propertyValidationAttributesMap = {
    actorId: {
        maxLength: 64,
    },
    actorType: {
        maxLength: 32,
    },
};
function validateActorContext(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('actorId', value.actorId, propertyValidationAttributesMap['actorId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('actorType', value.actorType, propertyValidationAttributesMap['actorType']));
    return validationErrorContexts;
}
