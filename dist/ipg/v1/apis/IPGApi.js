"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPGApi = void 0;
const runtime = require("../../../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class IPGApi extends runtime.BaseAPI {
    constructor({ partnerId, privateKey, origin, env }) {
        const basePath = runtime.getBasePathByEnv(env);
        const configuration = new runtime.Configuration({
            basePath: basePath,
        });
        super(configuration);
        this.partnerId = "";
        this.privateKey = "";
        this.origin = "";
        this.env = "";
        this.partnerId = partnerId;
        this.privateKey = privateKey;
        this.origin = origin;
        this.env = env;
    }
    /**
     * This API is used to reverses the account binding process by revoking the accessToken and refreshToken
     * Account unbinding - Binding
     */
    async accountUnbinding(accountUnbindingRequest, initOverrides) {
        if (accountUnbindingRequest == null) {
            throw new runtime.RequiredError('accountUnbindingRequest', 'Required parameter "accountUnbindingRequest" was null or undefined when calling accountUnbinding().');
        }
        const validationErrorContexts = (0, index_1.validateAccountUnbindingRequest)(accountUnbindingRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/registration-account-unbinding.htm`;
        const requestBody = JSON.stringify((0, index_1.AccountUnbindingRequestToJSON)(accountUnbindingRequest));
        const accessToken = accountUnbindingRequest.additionalInfo.accessToken;
        const endUserIpAddress = accountUnbindingRequest.additionalInfo.endUserIpAddress;
        const deviceId = accountUnbindingRequest.additionalInfo.deviceId;
        const latitude = accountUnbindingRequest.additionalInfo.latitude;
        const longitude = accountUnbindingRequest.additionalInfo.longitude;
        runtime.DanaHeaderUtil.populateSnapAccountB2B2CScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, accessToken, endUserIpAddress, deviceId, latitude, longitude);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.AccountUnbindingRequestToJSON)(accountUnbindingRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AccountUnbindingResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to get one time token that will be used as authorization parameter upon redirecting to DANA
     * Apply OTT - IPG
     */
    async applyOTT(applyOTTRequest, initOverrides) {
        if (applyOTTRequest == null) {
            throw new runtime.RequiredError('applyOTTRequest', 'Required parameter "applyOTTRequest" was null or undefined when calling applyOTT().');
        }
        const validationErrorContexts = (0, index_1.validateApplyOTTRequest)(applyOTTRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/v1.1/qr/apply-ott`;
        const requestBody = JSON.stringify((0, index_1.ApplyOTTRequestToJSON)(applyOTTRequest));
        const accessToken = applyOTTRequest.additionalInfo.accessToken;
        const endUserIpAddress = applyOTTRequest.additionalInfo.endUserIpAddress;
        const deviceId = applyOTTRequest.additionalInfo.deviceId;
        const latitude = applyOTTRequest.additionalInfo.latitude;
        const longitude = applyOTTRequest.additionalInfo.longitude;
        runtime.DanaHeaderUtil.populateSnapAccountB2B2CScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId, accessToken, endUserIpAddress, deviceId, latitude, longitude);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ApplyOTTRequestToJSON)(applyOTTRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApplyOTTResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to finalized account binding process by exchanging the authCode into accessToken that can be used as user authorization
     * Apply Token, required by Apply OTT - Binding
     */
    async applyToken(applyTokenRequest, initOverrides) {
        if (applyTokenRequest == null) {
            throw new runtime.RequiredError('applyTokenRequest', 'Required parameter "applyTokenRequest" was null or undefined when calling applyToken().');
        }
        const validationErrorContexts = (0, index_1.validateApplyTokenRequest)(applyTokenRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/access-token/b2b2c.htm`;
        runtime.DanaHeaderUtil.populateSnapApplyTokenScenarioHeader(headerParameters, this.privateKey, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ApplyTokenRequestToJSON)(applyTokenRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApplyTokenResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to cancel the order from merchant\'s platform to DANA
     * Cancel Order - IPG
     */
    async cancelOrder(cancelOrderRequest, initOverrides) {
        if (cancelOrderRequest == null) {
            throw new runtime.RequiredError('cancelOrderRequest', 'Required parameter "cancelOrderRequest" was null or undefined when calling cancelOrder().');
        }
        const validationErrorContexts = (0, index_1.validateCancelOrderRequest)(cancelOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/debit/cancel.htm`;
        const requestBody = JSON.stringify((0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CancelOrderRequestToJSON)(cancelOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CancelOrderResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to initiate payment from merchant\'s platform to DANA
     * IPG payment - IPG
     */
    async ipgPayment(iPGPaymentRequest, initOverrides) {
        if (iPGPaymentRequest == null) {
            throw new runtime.RequiredError('iPGPaymentRequest', 'Required parameter "iPGPaymentRequest" was null or undefined when calling ipgPayment().');
        }
        const validationErrorContexts = (0, index_1.validateIPGPaymentRequest)(iPGPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/redirection/v1.0/debit/payment-host-to-host`;
        const requestBody = JSON.stringify((0, index_1.IPGPaymentRequestToJSON)(iPGPaymentRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.IPGPaymentRequestToJSON)(iPGPaymentRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IPGPaymentResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to inquiry payment status and information from merchant\'s platform to DANA
     * Query Payment - IPG
     */
    async queryPayment(queryPaymentRequest, initOverrides) {
        if (queryPaymentRequest == null) {
            throw new runtime.RequiredError('queryPaymentRequest', 'Required parameter "queryPaymentRequest" was null or undefined when calling queryPayment().');
        }
        const validationErrorContexts = (0, index_1.validateQueryPaymentRequest)(queryPaymentRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/rest/v1.1/debit/status`;
        const requestBody = JSON.stringify((0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.QueryPaymentRequestToJSON)(queryPaymentRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.QueryPaymentResponseFromJSON)(jsonValue)).value();
    }
    /**
     * This API is used to refund the order from merchant\'s platform to DANA
     * Refund Order - IPG
     */
    async refundOrder(refundOrderRequest, initOverrides) {
        if (refundOrderRequest == null) {
            throw new runtime.RequiredError('refundOrderRequest', 'Required parameter "refundOrderRequest" was null or undefined when calling refundOrder().');
        }
        const validationErrorContexts = (0, index_1.validateRefundOrderRequest)(refundOrderRequest);
        if (validationErrorContexts.length > 0) {
            throw new runtime.ValidationError(validationErrorContexts);
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const endpointUrl = `/v1.0/debit/refund.htm`;
        const requestBody = JSON.stringify((0, index_1.RefundOrderRequestToJSON)(refundOrderRequest));
        runtime.DanaHeaderUtil.populateSnapB2BScenarioHeader(headerParameters, 'POST', endpointUrl, requestBody, this.privateKey, this.origin, this.partnerId);
        const response = await this.request({
            path: endpointUrl,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.RefundOrderRequestToJSON)(refundOrderRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RefundOrderResponseFromJSON)(jsonValue)).value();
    }
}
exports.IPGApi = IPGApi;
