"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfApplyTokenResponse = instanceOfApplyTokenResponse;
exports.ApplyTokenResponseFromJSON = ApplyTokenResponseFromJSON;
exports.ApplyTokenResponseFromJSONTyped = ApplyTokenResponseFromJSONTyped;
exports.ApplyTokenResponseToJSON = ApplyTokenResponseToJSON;
exports.ApplyTokenResponseToJSONTyped = ApplyTokenResponseToJSONTyped;
exports.validateApplyTokenResponse = validateApplyTokenResponse;
const runtime_1 = require("../../../runtime");
const ApplyTokenResponseAdditionalInfo_1 = require("./ApplyTokenResponseAdditionalInfo");
/**
 * Check if a given object implements the ApplyTokenResponse interface.
 */
function instanceOfApplyTokenResponse(value) {
    if (!('responseCode' in value) || value['responseCode'] === undefined)
        return false;
    if (!('responseMessage' in value) || value['responseMessage'] === undefined)
        return false;
    if (!('accessToken' in value) || value['accessToken'] === undefined)
        return false;
    return true;
}
function ApplyTokenResponseFromJSON(json) {
    return ApplyTokenResponseFromJSONTyped(json, false);
}
function ApplyTokenResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'responseCode': json['responseCode'],
        'responseMessage': json['responseMessage'],
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'accessToken': json['accessToken'],
        'accessTokenExpiryTime': json['accessTokenExpiryTime'] == null ? undefined : json['accessTokenExpiryTime'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'refreshTokenExpiryTime': json['refreshTokenExpiryTime'] == null ? undefined : json['refreshTokenExpiryTime'],
        'additionalInfo': json['additionalInfo'] == null ? undefined : (0, ApplyTokenResponseAdditionalInfo_1.ApplyTokenResponseAdditionalInfoFromJSON)(json['additionalInfo']),
    };
}
function ApplyTokenResponseToJSON(json) {
    return ApplyTokenResponseToJSONTyped(json, false);
}
function ApplyTokenResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'responseCode': value['responseCode'],
        'responseMessage': value['responseMessage'],
        'tokenType': value['tokenType'],
        'accessToken': value['accessToken'],
        'accessTokenExpiryTime': value['accessTokenExpiryTime'],
        'refreshToken': value['refreshToken'],
        'refreshTokenExpiryTime': value['refreshTokenExpiryTime'],
        'additionalInfo': (0, ApplyTokenResponseAdditionalInfo_1.ApplyTokenResponseAdditionalInfoToJSON)(value['additionalInfo']),
    };
}
const propertyValidationAttributesMap = {
    responseCode: {
        maxLength: 7,
    },
    responseMessage: {
        maxLength: 150,
    },
    accessTokenExpiryTime: {
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
    refreshTokenExpiryTime: {
        pattern: new RegExp('/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+07:00$/'.slice(1, -1)),
    },
};
function validateApplyTokenResponse(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseCode', value.responseCode, propertyValidationAttributesMap['responseCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('responseMessage', value.responseMessage, propertyValidationAttributesMap['responseMessage']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('accessTokenExpiryTime', value.accessTokenExpiryTime, propertyValidationAttributesMap['accessTokenExpiryTime']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('refreshTokenExpiryTime', value.refreshTokenExpiryTime, propertyValidationAttributesMap['refreshTokenExpiryTime']));
    validationErrorContexts.push(...(0, ApplyTokenResponseAdditionalInfo_1.validateApplyTokenResponseAdditionalInfo)(value.additionalInfo));
    return validationErrorContexts;
}
