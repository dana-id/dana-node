"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSeller = instanceOfSeller;
exports.SellerFromJSON = SellerFromJSON;
exports.SellerFromJSONTyped = SellerFromJSONTyped;
exports.SellerToJSON = SellerToJSON;
exports.SellerToJSONTyped = SellerToJSONTyped;
exports.validateSeller = validateSeller;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the Seller interface.
 */
function instanceOfSeller(value) {
    return true;
}
function SellerFromJSON(json) {
    return SellerFromJSONTyped(json, false);
}
function SellerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'externalUserType': json['externalUserType'] == null ? undefined : json['externalUserType'],
        'nickname': json['nickname'] == null ? undefined : json['nickname'],
        'externalUserId': json['externalUserId'] == null ? undefined : json['externalUserId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}
function SellerToJSON(json) {
    return SellerToJSONTyped(json, false);
}
function SellerToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'externalUserType': value['externalUserType'],
        'nickname': value['nickname'],
        'externalUserId': value['externalUserId'],
        'userId': value['userId'],
    };
}
const propertyValidationAttributesMap = {
    externalUserType: {
        maxLength: 32,
    },
    nickname: {
        maxLength: 64,
    },
    externalUserId: {
        maxLength: 32,
    },
    userId: {
        maxLength: 32,
    },
};
function validateSeller(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalUserType', value.externalUserType, propertyValidationAttributesMap['externalUserType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('nickname', value.nickname, propertyValidationAttributesMap['nickname']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('externalUserId', value.externalUserId, propertyValidationAttributesMap['externalUserId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('userId', value.userId, propertyValidationAttributesMap['userId']));
    return validationErrorContexts;
}
