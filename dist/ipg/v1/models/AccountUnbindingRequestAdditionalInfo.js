"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfAccountUnbindingRequestAdditionalInfo = instanceOfAccountUnbindingRequestAdditionalInfo;
exports.AccountUnbindingRequestAdditionalInfoFromJSON = AccountUnbindingRequestAdditionalInfoFromJSON;
exports.AccountUnbindingRequestAdditionalInfoFromJSONTyped = AccountUnbindingRequestAdditionalInfoFromJSONTyped;
exports.AccountUnbindingRequestAdditionalInfoToJSON = AccountUnbindingRequestAdditionalInfoToJSON;
exports.AccountUnbindingRequestAdditionalInfoToJSONTyped = AccountUnbindingRequestAdditionalInfoToJSONTyped;
exports.validateAccountUnbindingRequestAdditionalInfo = validateAccountUnbindingRequestAdditionalInfo;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the AccountUnbindingRequestAdditionalInfo interface.
 */
function instanceOfAccountUnbindingRequestAdditionalInfo(value) {
    if (!('accessToken' in value) || value['accessToken'] === undefined)
        return false;
    return true;
}
function AccountUnbindingRequestAdditionalInfoFromJSON(json) {
    return AccountUnbindingRequestAdditionalInfoFromJSONTyped(json, false);
}
function AccountUnbindingRequestAdditionalInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'accessToken': json['accessToken'],
    };
}
function AccountUnbindingRequestAdditionalInfoToJSON(json) {
    return AccountUnbindingRequestAdditionalInfoToJSONTyped(json, false);
}
function AccountUnbindingRequestAdditionalInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'accessToken': value['accessToken'],
    };
}
const propertyValidationAttributesMap = {
    accessToken: {
        maxLength: 512,
    },
};
function validateAccountUnbindingRequestAdditionalInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('accessToken', value.accessToken, propertyValidationAttributesMap['accessToken']));
    return validationErrorContexts;
}
