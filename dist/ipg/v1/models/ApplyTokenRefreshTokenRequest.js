"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplyTokenRefreshTokenRequestGrantTypeEnum = void 0;
exports.instanceOfApplyTokenRefreshTokenRequest = instanceOfApplyTokenRefreshTokenRequest;
exports.ApplyTokenRefreshTokenRequestFromJSON = ApplyTokenRefreshTokenRequestFromJSON;
exports.ApplyTokenRefreshTokenRequestFromJSONTyped = ApplyTokenRefreshTokenRequestFromJSONTyped;
exports.ApplyTokenRefreshTokenRequestToJSON = ApplyTokenRefreshTokenRequestToJSON;
exports.ApplyTokenRefreshTokenRequestToJSONTyped = ApplyTokenRefreshTokenRequestToJSONTyped;
exports.validateApplyTokenRefreshTokenRequest = validateApplyTokenRefreshTokenRequest;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.ApplyTokenRefreshTokenRequestGrantTypeEnum = {
    RefreshToken: 'REFRESH_TOKEN'
};
/**
 * Check if a given object implements the ApplyTokenRefreshTokenRequest interface.
 */
function instanceOfApplyTokenRefreshTokenRequest(value) {
    if (!('grantType' in value) || value['grantType'] === undefined)
        return false;
    if (!('refreshToken' in value) || value['refreshToken'] === undefined)
        return false;
    return true;
}
function ApplyTokenRefreshTokenRequestFromJSON(json) {
    return ApplyTokenRefreshTokenRequestFromJSONTyped(json, false);
}
function ApplyTokenRefreshTokenRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'additionalInfo': json['additionalInfo'] == null ? undefined : json['additionalInfo'],
        'grantType': json['grantType'],
        'authCode': json['authCode'] == null ? undefined : json['authCode'],
        'refreshToken': json['refreshToken'],
    };
}
function ApplyTokenRefreshTokenRequestToJSON(json) {
    return ApplyTokenRefreshTokenRequestToJSONTyped(json, false);
}
function ApplyTokenRefreshTokenRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'additionalInfo': value['additionalInfo'],
        'grantType': value['grantType'],
        'authCode': value['authCode'],
        'refreshToken': value['refreshToken'],
    };
}
const propertyValidationAttributesMap = {
    grantType: {
        maxLength: 64,
    },
    authCode: {
        maxLength: 256,
    },
    refreshToken: {
        maxLength: 512,
    },
};
function validateApplyTokenRefreshTokenRequest(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('grantType', value.grantType, propertyValidationAttributesMap['grantType']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('authCode', value.authCode, propertyValidationAttributesMap['authCode']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('refreshToken', value.refreshToken, propertyValidationAttributesMap['refreshToken']));
    return validationErrorContexts;
}
