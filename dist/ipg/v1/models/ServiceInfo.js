"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceInfoServiceScenarioEnum = exports.ServiceInfoServiceTypeEnum = void 0;
exports.instanceOfServiceInfo = instanceOfServiceInfo;
exports.ServiceInfoFromJSON = ServiceInfoFromJSON;
exports.ServiceInfoFromJSONTyped = ServiceInfoFromJSONTyped;
exports.ServiceInfoToJSON = ServiceInfoToJSON;
exports.ServiceInfoToJSONTyped = ServiceInfoToJSONTyped;
exports.validateServiceInfo = validateServiceInfo;
const runtime_1 = require("../../../runtime");
/**
 * @export
 */
exports.ServiceInfoServiceTypeEnum = {
    Parking: 'PARKING',
    Investment: 'INVESTMENT'
};
/**
 * @export
 */
exports.ServiceInfoServiceScenarioEnum = {
    ScanAndPay: 'SCAN_AND_PAY',
    ExitAndPay: 'EXIT_AND_PAY',
    EmasPurchase: 'EMAS_PURCHASE'
};
/**
 * Check if a given object implements the ServiceInfo interface.
 */
function instanceOfServiceInfo(value) {
    return true;
}
function ServiceInfoFromJSON(json) {
    return ServiceInfoFromJSONTyped(json, false);
}
function ServiceInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'serviceType': json['serviceType'] == null ? undefined : json['serviceType'],
        'serviceScenario': json['serviceScenario'] == null ? undefined : json['serviceScenario'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}
function ServiceInfoToJSON(json) {
    return ServiceInfoToJSONTyped(json, false);
}
function ServiceInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'serviceType': value['serviceType'],
        'serviceScenario': value['serviceScenario'],
        'extendInfo': value['extendInfo'],
    };
}
const propertyValidationAttributesMap = {
    extendInfo: {
        maxLength: 4096,
    },
};
function validateServiceInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));
    return validationErrorContexts;
}
