"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfGoods = instanceOfGoods;
exports.GoodsFromJSON = GoodsFromJSON;
exports.GoodsFromJSONTyped = GoodsFromJSONTyped;
exports.GoodsToJSON = GoodsToJSON;
exports.GoodsToJSONTyped = GoodsToJSONTyped;
exports.validateGoods = validateGoods;
const runtime_1 = require("../../../runtime");
const Money_1 = require("./Money");
/**
 * Check if a given object implements the Goods interface.
 */
function instanceOfGoods(value) {
    if (!('category' in value) || value['category'] === undefined)
        return false;
    if (!('price' in value) || value['price'] === undefined)
        return false;
    if (!('merchantGoodsId' in value) || value['merchantGoodsId'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('quantity' in value) || value['quantity'] === undefined)
        return false;
    return true;
}
function GoodsFromJSON(json) {
    return GoodsFromJSONTyped(json, false);
}
function GoodsFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'unit': json['unit'] == null ? undefined : json['unit'],
        'category': json['category'],
        'price': (0, Money_1.MoneyFromJSON)(json['price']),
        'merchantShippingId': json['merchantShippingId'] == null ? undefined : json['merchantShippingId'],
        'merchantGoodsId': json['merchantGoodsId'],
        'description': json['description'],
        'snapshotUrl': json['snapshotUrl'] == null ? undefined : json['snapshotUrl'],
        'quantity': json['quantity'],
        'extendInfo': json['extendInfo'] == null ? undefined : json['extendInfo'],
    };
}
function GoodsToJSON(json) {
    return GoodsToJSONTyped(json, false);
}
function GoodsToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'unit': value['unit'],
        'category': value['category'],
        'price': (0, Money_1.MoneyToJSON)(value['price']),
        'merchantShippingId': value['merchantShippingId'],
        'merchantGoodsId': value['merchantGoodsId'],
        'description': value['description'],
        'snapshotUrl': value['snapshotUrl'],
        'quantity': value['quantity'],
        'extendInfo': value['extendInfo'],
    };
}
const propertyValidationAttributesMap = {
    unit: {
        maxLength: 64,
    },
    category: {
        maxLength: 64,
    },
    merchantShippingId: {
        maxLength: 64,
    },
    merchantGoodsId: {
        maxLength: 64,
    },
    description: {
        maxLength: 1024,
    },
    snapshotUrl: {
        maxLength: 512,
    },
    quantity: {
        maxLength: 16,
    },
    extendInfo: {
        maxLength: 4096,
    },
};
function validateGoods(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('unit', value.unit, propertyValidationAttributesMap['unit']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('category', value.category, propertyValidationAttributesMap['category']));
    validationErrorContexts.push(...(0, Money_1.validateMoney)(value.price));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantShippingId', value.merchantShippingId, propertyValidationAttributesMap['merchantShippingId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('merchantGoodsId', value.merchantGoodsId, propertyValidationAttributesMap['merchantGoodsId']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('description', value.description, propertyValidationAttributesMap['description']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('snapshotUrl', value.snapshotUrl, propertyValidationAttributesMap['snapshotUrl']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('quantity', value.quantity, propertyValidationAttributesMap['quantity']));
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('extendInfo', value.extendInfo, propertyValidationAttributesMap['extendInfo']));
    return validationErrorContexts;
}
