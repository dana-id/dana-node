"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfApplyTokenResponseAdditionalInfoUserInfo = instanceOfApplyTokenResponseAdditionalInfoUserInfo;
exports.ApplyTokenResponseAdditionalInfoUserInfoFromJSON = ApplyTokenResponseAdditionalInfoUserInfoFromJSON;
exports.ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped = ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped;
exports.ApplyTokenResponseAdditionalInfoUserInfoToJSON = ApplyTokenResponseAdditionalInfoUserInfoToJSON;
exports.ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped = ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped;
exports.validateApplyTokenResponseAdditionalInfoUserInfo = validateApplyTokenResponseAdditionalInfoUserInfo;
const runtime_1 = require("../../../runtime");
/**
 * Check if a given object implements the ApplyTokenResponseAdditionalInfoUserInfo interface.
 */
function instanceOfApplyTokenResponseAdditionalInfoUserInfo(value) {
    return true;
}
function ApplyTokenResponseAdditionalInfoUserInfoFromJSON(json) {
    return ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped(json, false);
}
function ApplyTokenResponseAdditionalInfoUserInfoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'publicUserId': json['publicUserId'] == null ? undefined : json['publicUserId'],
    };
}
function ApplyTokenResponseAdditionalInfoUserInfoToJSON(json) {
    return ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped(json, false);
}
function ApplyTokenResponseAdditionalInfoUserInfoToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'publicUserId': value['publicUserId'],
    };
}
const propertyValidationAttributesMap = {
    publicUserId: {
        maxLength: 64,
    },
};
function validateApplyTokenResponseAdditionalInfoUserInfo(value) {
    const validationErrorContexts = [];
    if (value == null) {
        return validationErrorContexts;
    }
    validationErrorContexts.push(...runtime_1.ValidationUtil.validateProperty('publicUserId', value.publicUserId, propertyValidationAttributesMap['publicUserId']));
    return validationErrorContexts;
}
